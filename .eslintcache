[{"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\hooks\\auth.tsx":"1","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\ToastContainer\\styles.ts":"2","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Button\\styles.ts":"3","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\OutlineInputRegex\\index.tsx":"4","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\OutlineInputRegex\\styles.ts":"5","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\FindContractModal\\ContractsTable\\index.tsx":"6","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\utils\\hasSocialTariff.ts":"7","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\DebitsConsultationModal\\index.tsx":"8","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\PowerOutageFlow\\StepModal\\index.tsx":"9","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\MonitoringOfProtocols\\ProtocolsTable\\styles.ts":"10","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\pages\\SignIn\\index.tsx":"11","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Input\\index.tsx":"12","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Input\\styles.ts":"13","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\hooks\\index.tsx":"14","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\FindContractModal\\index.tsx":"15","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\CustomRadioGroup\\styles.ts":"16","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Tooltip\\styles.ts":"17","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\FindContractModal\\ContractsTable\\styles.ts":"18","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\DueDateChange\\index.tsx":"19","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\PowerOutageFlow\\questions\\PowerOutageQuestions.ts":"20","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\hooks\\customerService.tsx":"21","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Main\\ServicesContent\\ContractData\\index.tsx":"22","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\utils\\extractResponseData.ts":"23","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\utils\\getInstallationSubclassName.ts":"24","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Main\\ServicesContent\\index.tsx":"25","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\LeftBar\\index.tsx":"26"},{"size":2413,"mtime":1624366395859,"results":"27","hashOfConfig":"28"},{"size":162,"mtime":1641989344597,"results":"29","hashOfConfig":"30"},{"size":377,"mtime":1624365581372,"results":"31","hashOfConfig":"28"},{"size":2030,"mtime":1624365581401,"results":"32","hashOfConfig":"28"},{"size":1448,"mtime":1641989344567,"results":"33","hashOfConfig":"30"},{"size":2132,"mtime":1624365581376,"results":"34","hashOfConfig":"28"},{"size":463,"mtime":1624365581447,"results":"35","hashOfConfig":"28"},{"size":9210,"mtime":1641989344570,"results":"36","hashOfConfig":"30"},{"size":5062,"mtime":1641989344584,"results":"37","hashOfConfig":"30"},{"size":1200,"mtime":1641989344581,"results":"38","hashOfConfig":"30"},{"size":3057,"mtime":1624366234582,"results":"39","hashOfConfig":"28"},{"size":1557,"mtime":1624365581378,"results":"40","hashOfConfig":"28"},{"size":1273,"mtime":1624365581378,"results":"41","hashOfConfig":"28"},{"size":1583,"mtime":1641989344608,"results":"42","hashOfConfig":"30"},{"size":1399,"mtime":1641989344523,"results":"43","hashOfConfig":"30"},{"size":186,"mtime":1641989344520,"results":"44","hashOfConfig":"30"},{"size":743,"mtime":1641989344599,"results":"45","hashOfConfig":"30"},{"size":1239,"mtime":1641989344522,"results":"46","hashOfConfig":"30"},{"size":3558,"mtime":1641989344572,"results":"47","hashOfConfig":"30"},{"size":3327,"mtime":1641989344587,"results":"48","hashOfConfig":"30"},{"size":10866,"mtime":1641998440945,"results":"49","hashOfConfig":"30"},{"size":1767,"mtime":1641993861736,"results":"50","hashOfConfig":"30"},{"size":7797,"mtime":1641998619336,"results":"51","hashOfConfig":"30"},{"size":2236,"mtime":1641998513990,"results":"52","hashOfConfig":"30"},{"size":419,"mtime":1641997784528,"results":"53","hashOfConfig":"30"},{"size":7505,"mtime":1641998427180,"results":"54","hashOfConfig":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"114pnsy",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"j10x2d",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\hooks\\auth.tsx",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\ToastContainer\\styles.ts",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Button\\styles.ts",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\OutlineInputRegex\\index.tsx",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\OutlineInputRegex\\styles.ts",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\FindContractModal\\ContractsTable\\index.tsx",["109","110"],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\utils\\hasSocialTariff.ts",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\DebitsConsultationModal\\index.tsx",["111"],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\PowerOutageFlow\\StepModal\\index.tsx",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\MonitoringOfProtocols\\ProtocolsTable\\styles.ts",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\pages\\SignIn\\index.tsx",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Input\\index.tsx",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Input\\styles.ts",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\hooks\\index.tsx",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\FindContractModal\\index.tsx",["112","113"],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\CustomRadioGroup\\styles.ts",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Tooltip\\styles.ts",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\FindContractModal\\ContractsTable\\styles.ts",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\DueDateChange\\index.tsx",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\PowerOutageFlow\\questions\\PowerOutageQuestions.ts",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\hooks\\customerService.tsx",["114","115","116","117"],"import React, { createContext, useCallback, useContext, useState } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport Swal from 'sweetalert2';\n\nimport { useAuth } from './auth';\n\nimport Customer from '../types/Customer';\nimport Installation from '../types/Installation';\nimport Debits from '../types/Debits';\n\nimport {\n  extractResponseData,\n  getInstallationData,\n  getServiceNotes,\n} from '../utils/extractResponseData';\n\nimport ServiceNotes from '../types/ServiceNotes';\nimport eqtlBarApi from '../services/eqtlBarApi';\nimport Address from '../types/Address';\n\ninterface CustomerServiceState {\n  operatingCompany: string;\n  customer: Customer;\n  installation: Installation;\n  debits: Debits;\n  serviceNotes: ServiceNotes;\n  protocol?: string;\n  contracts: Contract[];\n}\n\ninterface GetCustomerData {\n  stateCode: string;\n  contractAccount: string;\n}\n\ninterface StartServiceProps {\n  stateCode: string;\n  contractAccount: string;\n}\n\ninterface CustomerServiceContextData {\n  operatingCompany: string;\n  protocol: string | undefined;\n  customer: Customer;\n  installation: Installation;\n  debits: Debits;\n  serviceNotes: ServiceNotes;\n  contracts: Contract[];\n  serviceStarted: boolean;\n  fetchServiceData(customerData: GetCustomerData): Promise<void>;\n  fetchInstallationData({\n    contractAccount,\n    operatingCompany,\n  }: FetchInstallationDataProps): Promise<void>;\n  startService({\n    stateCode,\n    contractAccount,\n  }: StartServiceProps): Promise<void>;\n  finishService(attendanceTime: string): Promise<void>;\n  registerServicePerformed({\n    serviceName,\n    executionDate,\n  }: ServicePerformed): void;\n  findAllContracts({\n    stateCode,\n    cpf,\n  }: FindAllContractsProps): Promise<Contract[]>;\n  generateProtocol({\n    operatingCompany,\n    contractAccount,\n  }: GenerateProtocolProps): Promise<void>;\n}\n\ninterface GenerateProtocolProps {\n  operatingCompany: string;\n  contractAccount: string;\n}\n\ninterface FindAllContractsProps {\n  stateCode: string;\n  cpf: string;\n}\n\ninterface FetchInstallationDataProps {\n  contractAccount: string;\n  operatingCompany: string;\n}\n\ninterface ServicePerformed {\n  serviceName: string;\n  executionDate: Date;\n}\n\ninterface Contract {\n  contractAccount: string;\n  address: Address;\n}\n\nconst CustomerServiceContext = createContext<CustomerServiceContextData>(\n  {} as CustomerServiceContextData,\n);\n\nconst CustomerServiceProvider: React.FC = ({ children }) => {\n  const { user } = useAuth();\n\n  const [serviceStarted, setServiceStarted] = useState(false);\n  const [servicesPerformed, setServicesPerformed] = useState<\n    ServicePerformed[]\n  >([]);\n\n  const [\n    customerServiceData,\n    setCustomerServiceData,\n  ] = useState<CustomerServiceState>(() => {\n    const storagedCustomerServiceData = localStorage.getItem(\n      '@TelaAgil:customerServiceData',\n    );\n\n    const storagedProtocol = localStorage.getItem('@TelaAgil:protocol');\n\n    if (storagedCustomerServiceData) {\n      const {\n        operatingCompany,\n        customer,\n        installation,\n        debits,\n        serviceNotes,\n      } = JSON.parse(storagedCustomerServiceData);\n\n      const customerServiceState: CustomerServiceState = {\n        operatingCompany,\n        customer,\n        installation,\n        debits,\n        serviceNotes,\n        contracts: [],\n      };\n\n      if (storagedProtocol) {\n        customerServiceState.protocol = storagedProtocol;\n      }\n\n      return customerServiceState;\n    }\n\n    return {} as CustomerServiceState;\n  });\n\n  const findAllContracts = useCallback(\n    async ({ stateCode, cpf }: FindAllContractsProps) => {\n      const response = await eqtlBarApi.get('/atendimento/v1/clientes', {\n        params: {\n          cpf,\n          flagDadosCliente: true,\n          empresaOperadora: stateCode,\n          codigoTransacao: uuid(),\n        },\n      });\n\n      const contracts: Contract[] = response.data.data.cliente.map(\n        (contract: any) => ({\n          contractAccount:\n            typeof contract.contaContrato === 'string'\n              ? contract.contaContrato.replace(/^0+/, '')\n              : contract.contaContrato.toString().replace(/^0+/, ''),\n          address: {\n            publicArea: contract.endereco.logradouro,\n            number: contract.endereco.numero,\n            neighborhood: contract.endereco.bairro,\n            city: contract.endereco.cidade,\n            uf: contract.endereco.uf,\n            postalCode: contract.endereco.cep,\n            referencePoint: contract.endereco.pontoReferencia,\n          },\n        }),\n      );\n\n      if (!contracts.length) {\n        throw new Error();\n      } else {\n        setCustomerServiceData({\n          ...customerServiceData,\n          operatingCompany: stateCode,\n          contracts,\n        });\n\n        return contracts;\n      }\n    },\n    [customerServiceData],\n  );\n\n  const fetchServiceData = useCallback(\n    async ({ stateCode, contractAccount }: GetCustomerData) => {\n      const response = await eqtlBarApi.get('/atendimento/v1/clientes', {\n        params: {\n          codigoTransacao: uuid(),\n          contrato: contractAccount,\n          empresaOperadora: stateCode,\n          flagDadosCliente: true,\n          flagStatusInstalacao: true,\n          flagPossuiDebitos: true,\n          flagDadosTecnicos: true,\n          flagNotasAbertas: true,\n          flagNotasEncerradas: true,\n          flagDetalheDebitoCobranca: true,\n          flagDetalheDebitoFatura: true,\n        },\n      });\n\n      console.log(response.data);\n\n      const {\n        customer,\n        installation,\n        debits,\n        serviceNotes,\n      } = extractResponseData(response, stateCode);\n\n      console.log({\n        customer,\n        installation,\n        debits,\n        serviceNotes,\n      });\n\n      localStorage.setItem(\n        '@TelaAgil:customerServiceData',\n        JSON.stringify({\n          operatingCompany: stateCode,\n          customer,\n          installation,\n          debits,\n          serviceNotes,\n          contracts: [],\n        }),\n      );\n\n      setCustomerServiceData({\n        operatingCompany: stateCode,\n        customer,\n        installation,\n        debits,\n        serviceNotes,\n        contracts: [],\n      });\n    },\n    [],\n  );\n\n  const generateProtocol = useCallback(\n    async ({ operatingCompany, contractAccount }: GenerateProtocolProps) => {\n      const response = await eqtlBarApi.get('/atendimento/v1/clientes', {\n        params: {\n          empresaOperadora: operatingCompany,\n          contrato: contractAccount,\n          flagGerarProtocolo: true,\n          codigoTransacao: uuid(),\n        },\n      });\n\n      localStorage.setItem('@TelaAgil:protocol', response.data.data.protocolo);\n\n      setCustomerServiceData(state => ({\n        ...state,\n        protocol: response.data.data.protocolo,\n      }));\n    },\n    [],\n  );\n\n  const fetchInstallationData = useCallback(\n    async ({\n      contractAccount,\n      operatingCompany,\n    }: FetchInstallationDataProps) => {\n      const response = await eqtlBarApi.get('/atendimento/v1/clientes', {\n        params: {\n          codigoTransacao: uuid(),\n          contrato: contractAccount,\n          empresaOperadora: operatingCompany,\n          flagStatusInstalacao: true,\n          flagDadosTecnicos: true,\n          flagNotasAbertas: true,\n          flagNotasEncerradas: true,\n        },\n      });\n\n      const responseInstallationData = response.data.data.instalacao;\n\n      const installationData = getInstallationData(\n        responseInstallationData,\n        operatingCompany,\n      );\n\n      const serviceNotesData = getServiceNotes(response);\n\n      setCustomerServiceData({\n        ...customerServiceData,\n        installation: installationData,\n        serviceNotes: serviceNotesData,\n      });\n\n      localStorage.setItem(\n        '@TelaAgil:customerServiceData',\n        JSON.stringify({\n          ...customerServiceData,\n          installation: installationData,\n          serviceNotes: serviceNotesData,\n        }),\n      );\n    },\n    [customerServiceData],\n  );\n\n  const startService = useCallback(\n    async ({ stateCode, contractAccount }: StartServiceProps) => {\n      const formattedContractAccount = contractAccount.replace(/^0+/, '');\n\n      try {\n        await fetchServiceData({\n          stateCode,\n          contractAccount: formattedContractAccount,\n        });\n\n        setServiceStarted(true);\n      } catch (err) {\n        console.log(err);\n        Swal.fire({\n          icon: 'error',\n          title: 'Erro no atendimento',\n          html:\n            '<p>Ocorreu um erro ao iniciar o atendimento, cheque as informações do cliente</p>',\n          confirmButtonText: `OK`,\n          confirmButtonColor: '#3c1490',\n        });\n      }\n    },\n    [fetchServiceData],\n  );\n\n  const saveAttendanceLog = useCallback(\n    async (attendanceTime: string) => {\n      await eqtlBarApi.post('/logs', {\n        user_id: user.id,\n        username: user.name,\n        contractAccount: customerServiceData.customer.contractAccount,\n        attendanceTime,\n        services: servicesPerformed,\n      });\n    },\n    [user, customerServiceData.customer, servicesPerformed],\n  );\n\n  const finishService = useCallback(\n    async (attendanceTime: string) => {\n      await saveAttendanceLog(attendanceTime);\n\n      localStorage.removeItem('@TelaAgil:protocol');\n      localStorage.removeItem('@TelaAgil:contracts');\n      localStorage.removeItem('@TelaAgil:customerServiceData');\n\n      setCustomerServiceData({} as CustomerServiceContextData);\n\n      setServicesPerformed([]);\n\n      setServiceStarted(false);\n    },\n    [saveAttendanceLog],\n  );\n\n  const registerServicePerformed = useCallback(\n    ({ serviceName, executionDate }: ServicePerformed) => {\n      setServicesPerformed(oldServices => [\n        ...oldServices,\n        { serviceName, executionDate },\n      ]);\n    },\n    [],\n  );\n\n  return (\n    <CustomerServiceContext.Provider\n      value={{\n        operatingCompany: customerServiceData.operatingCompany,\n        protocol: customerServiceData.protocol,\n        customer: customerServiceData.customer,\n        installation: customerServiceData.installation,\n        debits: customerServiceData.debits,\n        serviceNotes: customerServiceData.serviceNotes,\n        contracts: customerServiceData.contracts,\n        serviceStarted,\n        fetchServiceData,\n        fetchInstallationData,\n        startService,\n        finishService,\n        registerServicePerformed,\n        findAllContracts,\n        generateProtocol,\n      }}\n    >\n      {children}\n    </CustomerServiceContext.Provider>\n  );\n};\n\nfunction useCustomerService(): CustomerServiceContextData {\n  const context = useContext(CustomerServiceContext);\n\n  if (!context) {\n    throw new Error(\n      'useCustomerService must be used within a CustomerServiceProvider',\n    );\n  }\n\n  return context;\n}\n\nexport { CustomerServiceProvider, useCustomerService };\n","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Main\\ServicesContent\\ContractData\\index.tsx",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\utils\\extractResponseData.ts",["118","119","120","121","122","123","124"],"import { AxiosResponse } from 'axios';\nimport { parseISO } from 'date-fns';\n\nimport Customer from '../types/Customer';\nimport Installation from '../types/Installation';\nimport Debits, { InvoiceDebit, InstallmentDebit } from '../types/Debits';\nimport ServiceNotes, { OpenNote, ClosedNote } from '../types/ServiceNotes';\n\nimport { phoneMask } from './inputMasks';\n\nimport getInstallationSubclassName from './getInstallationSubclassName';\n\ninterface ExtractedData {\n  customer: Customer;\n  installation: Installation;\n  debits: Debits;\n  serviceNotes: ServiceNotes;\n}\n\ninterface ResponsePhone {\n  tipoTelefone: string;\n  numeroTelefone: string;\n}\n\nfunction getCustomerData(response: AxiosResponse, stateCode: string): Customer {\n  const responseCustomer = response.data.data.cliente[0];\n\n  const customer: Customer = {\n    contractAccount:\n      typeof responseCustomer.contaContrato === 'string'\n        ? responseCustomer.contaContrato.replace(/^0+/, '')\n        : responseCustomer.contaContrato.toString().replace(/^0+/, ''),\n    name: responseCustomer.nome,\n    surname: responseCustomer.sobrenome,\n    motherName: responseCustomer.nomeMae,\n    dayOfBirth: parseISO(responseCustomer.dataNascimento),\n    rg: responseCustomer.numeroRg,\n    cpf: responseCustomer.numeroCpf,\n    contacts: {\n      email: responseCustomer.contatos.email,\n    },\n    address: {\n      publicArea: responseCustomer.endereco.logradouro,\n      number: responseCustomer.endereco.numero,\n      neighborhood: responseCustomer.endereco.bairro,\n      city: responseCustomer.endereco.cidade,\n      uf: responseCustomer.endereco.uf,\n      postalCode: responseCustomer.endereco.cep,\n    },\n    phaseNumber: Number(responseCustomer.numeroFases),\n    bp: responseCustomer.bp,\n    installationNumber: responseCustomer.numeroInstalacao,\n  };\n\n  if (stateCode === '82' || stateCode === '86') {\n    const landline = responseCustomer.contatos.telefones\n      .filter(\n        (telefone: ResponsePhone) =>\n          telefone.numeroTelefone && telefone.tipoTelefone === 'R',\n      )\n      .map((telefone: ResponsePhone) => phoneMask(telefone.numeroTelefone));\n\n    const cellPhone = responseCustomer.contatos.telefones\n      .filter(\n        (telefone: ResponsePhone) =>\n          telefone.numeroTelefone && telefone.tipoTelefone === 'C',\n      )\n      .map((telefone: ResponsePhone) => phoneMask(telefone.numeroTelefone));\n\n    customer.contacts = {\n      phones: {\n        landline,\n        cellPhone,\n      },\n      email: responseCustomer.contatos.email,\n    };\n\n    customer.installationNumber = responseCustomer.numeroInstalacao.toString();\n\n    customer.address.complement = responseCustomer.endereco.complemento;\n  }\n\n  return customer;\n}\n\nfunction getInstallationData(\n  responseInstallation: any,\n  stateCode: string,\n): Installation {\n  const {\n    status,\n    corteAndamento,\n    desligaAndamento,\n    faltaEnergiaIndividual,\n    faltaEnergiaColetiva,\n    desligamentoProgramado,\n    faltaFases,\n    faltaEnergiaAvaliacaoTecnica,\n  } = responseInstallation;\n\n  const {\n    classe,\n    subclasse,\n    tarifa,\n    grupoTensao,\n    tipoPagamento,\n    fase,\n    localidade,\n    bomPagador,\n  } = responseInstallation.dadosTecnicos;\n\n  const {\n    latitude,\n    longitude,\n  } = responseInstallation.dadosTecnicos.coordenadaGeografica;\n\n  const installation: Installation = {\n    status,\n    cutInProgress: true && corteAndamento === 'S',\n    turnOffInProgress: true && desligaAndamento === 'S',\n    individualPowerOutage: true && faltaEnergiaIndividual === 'S',\n    collectivePowerOutage: true && faltaEnergiaColetiva === 'S',\n    scheduledShutdown: true && desligamentoProgramado === 'S',\n    powerPhaseOutage: true && faltaFases === 'S',\n    powerOutageTechnicalEvaluation:\n      true && faltaEnergiaAvaliacaoTecnica === 'S',\n    technicalData: {\n      class: classe,\n      subclass: subclasse,\n      tariff: tarifa,\n      tensionGroup: grupoTensao,\n      geographicCoordinates: {\n        latitude,\n        longitude,\n      },\n      paymentType: tipoPagamento,\n      phase: Number(fase),\n      locality: localidade,\n      goodPayer: true && bomPagador === 'S',\n    },\n  };\n\n  if (stateCode === '98' || stateCode === '95') {\n    installation.technicalData.subclass = getInstallationSubclassName(\n      installation.technicalData.subclass,\n    );\n  }\n\n  return installation;\n}\n\nfunction getDebits(responseDebits: any, stateCode: string): Debits {\n  const { debitosFatura, debitosParcelamento } = responseDebits;\n\n  const invoiceDebits: InvoiceDebit[] = debitosFatura.detalhesDebitoFatura.map(\n    (debit: any) => {\n      return {\n        overdueInvoiceNumber: debit.numeroFaturaVencida,\n        dueDate: parseISO(debit.dataVencimento),\n        invoiceAmount: Number(debit.valorFatura),\n        invoiceReference: debit.referenciaFatura,\n        paymentCode: debit.codigoPagamento,\n      };\n    },\n  );\n\n  const installmentDebits: InstallmentDebit[] = debitosParcelamento.detalhesDebitoParcelamento.map(\n    (debit: any) => {\n      const parsedDebit: InstallmentDebit = {\n        billingDocumentNumber: debit.numeroDocumentoCobranca,\n        invoiceAmount: Number(debit.valorFatura.toString().trim()),\n        invoiceReference: '',\n        paymentCode: debit.codigoPagamento,\n      };\n\n      if (stateCode === '82' || stateCode === '86') {\n        parsedDebit.invoiceReference = debit.referenciaFatura;\n      }\n\n      return parsedDebit;\n    },\n  );\n\n  const debits: Debits = {\n    invoiceDebits: {\n      invoiceDebitDetails: invoiceDebits,\n      totalAmountInvoiceDebits: Number(debitosFatura.valorTotalDebitoFatura),\n    },\n    installmentDebits: {\n      installmentDebitDetails: installmentDebits,\n      totalAmountInstallmentDebits: Number(\n        debitosParcelamento.valorTotalDebitoParcelamento,\n      ),\n    },\n  };\n\n  return debits;\n}\n\nfunction getServiceNotes(response: AxiosResponse): ServiceNotes {\n  const responseNotes = response.data.data.notas;\n\n  const mappedOpenServiceNotes: OpenNote[] = responseNotes.notasAbertas.map(\n    (note: any) => {\n      const openServiceNote: OpenNote = {\n        type: note.tipoNota,\n        typeDescription: note.descricaoTipoNota,\n        codeGroup: note.grupoCode,\n        codeGroupDescription: note.descricaoGrupoCode,\n        code: note.code,\n        codeDescription: note.descricaoCode,\n        openingDate: parseISO(note.dataAbertura),\n        status: note.status,\n        rejectionCode: note.codigoRejeicao,\n        rejectionCodeDescription: note.descricaoCodigoRejeicao,\n      };\n\n      return openServiceNote;\n    },\n  );\n\n  const mappedClosedServiceNotes: ClosedNote[] = responseNotes.notasEncerradas.map(\n    (note: any) => {\n      const openServiceNote: ClosedNote = {\n        type: note.tipoNota,\n        typeDescription: note.descricaoNota,\n        codeGroup: note.grupoCode,\n        codeGroupDescription: note.descricaoGrupoCode,\n        code: note.code,\n        codeDescription: note.descricaoCode,\n        openingDate: parseISO(note.dataAbertura),\n        conclusionDate: parseISO(note.dataConclusao),\n      };\n\n      return openServiceNote;\n    },\n  );\n\n  const serviceNotes: ServiceNotes = {\n    openServiceNotes: mappedOpenServiceNotes,\n    closedServiceNotes: mappedClosedServiceNotes,\n  };\n\n  return serviceNotes;\n}\n\nfunction extractResponseData(\n  response: AxiosResponse,\n  stateCode: string,\n): ExtractedData {\n  const { data: responseData } = response.data;\n\n  const customer = getCustomerData(response, stateCode);\n  const installation = getInstallationData(responseData.instalacao, stateCode);\n  const debits = getDebits(responseData.debitos, stateCode);\n  const serviceNotes = getServiceNotes(response);\n\n  return {\n    customer,\n    installation,\n    debits,\n    serviceNotes,\n  };\n}\n\nexport { extractResponseData, getInstallationData, getServiceNotes };\n","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\utils\\getInstallationSubclassName.ts",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Main\\ServicesContent\\index.tsx",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\LeftBar\\index.tsx",["125","126"],{"ruleId":"127","severity":1,"message":"128","line":43,"column":20,"nodeType":"129","messageId":"130","endLine":43,"endColumn":25},{"ruleId":"127","severity":1,"message":"131","line":43,"column":27,"nodeType":"129","messageId":"130","endLine":43,"endColumn":32},{"ruleId":"132","severity":1,"message":"133","line":272,"column":6,"nodeType":"134","endLine":272,"endColumn":32,"suggestions":"135"},{"ruleId":"127","severity":1,"message":"136","line":8,"column":40,"nodeType":"129","messageId":"130","endLine":8,"endColumn":50},{"ruleId":"127","severity":1,"message":"137","line":8,"column":52,"nodeType":"129","messageId":"130","endLine":8,"endColumn":61},{"ruleId":"138","severity":1,"message":"139","line":161,"column":20,"nodeType":"140","messageId":"141","endLine":161,"endColumn":23,"suggestions":"142"},{"ruleId":"143","severity":1,"message":"144","line":211,"column":7,"nodeType":"145","messageId":"146","endLine":211,"endColumn":18},{"ruleId":"143","severity":1,"message":"144","line":220,"column":7,"nodeType":"145","messageId":"146","endLine":220,"endColumn":18},{"ruleId":"143","severity":1,"message":"144","line":328,"column":9,"nodeType":"145","messageId":"146","endLine":328,"endColumn":20},{"ruleId":"147","severity":1,"message":"148","line":87,"column":3,"nodeType":"129","messageId":"149","endLine":87,"endColumn":28},{"ruleId":"138","severity":1,"message":"139","line":87,"column":25,"nodeType":"140","messageId":"141","endLine":87,"endColumn":28,"suggestions":"150"},{"ruleId":"138","severity":1,"message":"139","line":152,"column":36,"nodeType":"140","messageId":"141","endLine":152,"endColumn":39,"suggestions":"151"},{"ruleId":"138","severity":1,"message":"139","line":156,"column":13,"nodeType":"140","messageId":"141","endLine":156,"endColumn":16,"suggestions":"152"},{"ruleId":"138","severity":1,"message":"139","line":168,"column":13,"nodeType":"140","messageId":"141","endLine":168,"endColumn":16,"suggestions":"153"},{"ruleId":"138","severity":1,"message":"139","line":204,"column":12,"nodeType":"140","messageId":"141","endLine":204,"endColumn":15,"suggestions":"154"},{"ruleId":"138","severity":1,"message":"139","line":223,"column":12,"nodeType":"140","messageId":"141","endLine":223,"endColumn":15,"suggestions":"155"},{"ruleId":"127","severity":1,"message":"156","line":32,"column":8,"nodeType":"129","messageId":"130","endLine":32,"endColumn":20},{"ruleId":"127","severity":1,"message":"157","line":34,"column":8,"nodeType":"129","messageId":"130","endLine":34,"endColumn":24},"@typescript-eslint/no-unused-vars","'index' is defined but never used.","Identifier","unusedVar","'event' is defined but never used.","react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'operatingCompany'. Either include it or remove the dependency array.","ArrayExpression",["158"],"'OwnerLabel' is defined but never used.","'OwnerName' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["159","160"],"no-console","Unexpected console statement.","MemberExpression","unexpected","@typescript-eslint/explicit-module-boundary-types","Argument 'responseInstallation' should be typed with a non-any type.","anyTypedArg",["161","162"],["163","164"],["165","166"],["167","168"],["169","170"],["171","172"],"'OutlineInput' is defined but never used.","'OutlineInputMask' is defined but never used.",{"desc":"173","fix":"174"},{"messageId":"175","fix":"176","desc":"177"},{"messageId":"178","fix":"179","desc":"180"},{"messageId":"175","fix":"181","desc":"177"},{"messageId":"178","fix":"182","desc":"180"},{"messageId":"175","fix":"183","desc":"177"},{"messageId":"178","fix":"184","desc":"180"},{"messageId":"175","fix":"185","desc":"177"},{"messageId":"178","fix":"186","desc":"180"},{"messageId":"175","fix":"187","desc":"177"},{"messageId":"178","fix":"188","desc":"180"},{"messageId":"175","fix":"189","desc":"177"},{"messageId":"178","fix":"190","desc":"180"},{"messageId":"175","fix":"191","desc":"177"},{"messageId":"178","fix":"192","desc":"180"},"Update the dependencies array to be: [debits.invoiceDebits.invoiceDebitDetails, handleClickDebit, operatingCompany]",{"range":"193","text":"194"},"suggestUnknown",{"range":"195","text":"196"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"195","text":"197"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"198","text":"196"},{"range":"198","text":"197"},{"range":"199","text":"196"},{"range":"199","text":"197"},{"range":"200","text":"196"},{"range":"200","text":"197"},{"range":"201","text":"196"},{"range":"201","text":"197"},{"range":"202","text":"196"},{"range":"202","text":"197"},{"range":"203","text":"196"},{"range":"203","text":"197"},[7700,7726],"[debits.invoiceDebits.invoiceDebitDetails, handleClickDebit, operatingCompany]",[3904,3907],"unknown","never",[2760,2763],[4379,4382],[4571,4574],[4980,4983],[6014,6017],[6639,6642]]