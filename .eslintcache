[{"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\hooks\\customerService.tsx":"1","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\EmailInvoice\\index.tsx":"2","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\hooks\\powerOutageService.tsx":"3","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\hooks\\powerReconnectionService.tsx":"4","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Main\\ServicesContent\\QuickMenu\\index.tsx":"5","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\routes\\index.tsx":"6","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\CustomRadioGroup\\styles.ts":"7","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Main\\ServicesContent\\ClientData\\index.tsx":"8","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\DueDateChange\\index.tsx":"9","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\RequestList\\StatusIndicator\\styles.ts":"10"},{"size":8950,"mtime":1618497350236,"results":"11","hashOfConfig":"12"},{"size":3873,"mtime":1618494452790,"results":"13","hashOfConfig":"12"},{"size":9142,"mtime":1618496873612,"results":"14","hashOfConfig":"12"},{"size":22910,"mtime":1618497724888,"results":"15","hashOfConfig":"12"},{"size":7566,"mtime":1618508282088,"results":"16","hashOfConfig":"12"},{"size":379,"mtime":1618492488937,"results":"17","hashOfConfig":"12"},{"size":186,"mtime":1618492488879,"results":"18","hashOfConfig":"12"},{"size":3318,"mtime":1618492488897,"results":"19","hashOfConfig":"12"},{"size":5493,"mtime":1618492488911,"results":"20","hashOfConfig":"12"},{"size":629,"mtime":1618492488920,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"tpyhyp",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\hooks\\customerService.tsx",["44"],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\EmailInvoice\\index.tsx",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\hooks\\powerOutageService.tsx",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\hooks\\powerReconnectionService.tsx",["45"],"import React, { createContext, useCallback, useContext } from 'react';\nimport { useLoading } from 'react-use-loading';\nimport { v4 as uuid } from 'uuid';\nimport Swal from 'sweetalert2';\n\nimport eqtlBarApi from '../services/eqtlBarApi';\n\nimport Customer from '../types/Customer';\nimport Installation from '../types/Installation';\nimport ServiceNotes from '../types/ServiceNotes';\n\nimport { currencyMask } from '../utils/inputMasks';\n\nimport Loading from '../components/Loading';\nimport Debits from '../types/Debits';\n\nimport { useAuth } from './auth';\nimport { useCustomerService } from './customerService';\n\ninterface PowerReconnectionContextData {\n  ableToReconnection({\n    contractAccount,\n    installation,\n    serviceNotes,\n  }: AbleToReconnectionProps): AbleToReconnectionResponse;\n  getReconnectionInfo({\n    installationNumber,\n    phaseNumber,\n    locality,\n    operatingCompany,\n  }: GetReconnectionInfoProps): Promise<ReconnectionInfo>;\n  prepareForPowerReconnection({\n    attendanceData,\n    installation,\n    debits,\n    operatingCompany,\n    protocol,\n  }: PrepareForPowerReconnectionProps): Promise<void>;\n}\n\ninterface AbleToReconnectionResponse {\n  ok: boolean;\n  error?: string;\n}\n\ninterface ReconnectionInfo {\n  tariffs: {\n    commonTariff?: number;\n    emergencyTariff?: number;\n  };\n  deadlineForReconnection: { hours: number };\n}\n\ninterface AbleForEmergencyReconnectionProps {\n  operatingCompany: string;\n  installationNumber: string;\n}\n\ninterface AbleToReconnectionProps {\n  contractAccount: string;\n  installation: Installation;\n  serviceNotes: ServiceNotes;\n}\n\ninterface GetReconnectionInfoProps {\n  installationNumber: string;\n  phaseNumber: number;\n  locality: string;\n  operatingCompany: string;\n}\n\ninterface GeneratePowerReconnectionProps {\n  type: 'common' | 'emergency';\n  operatingCompany: string;\n  contractAccount: string;\n  protocol: string;\n  descriptionText: string;\n  reference: string;\n}\n\ninterface StartPowerReconnectionFlowProps {\n  attendanceData: Customer;\n  installation: Installation;\n  operatingCompany: string;\n  protocol: string;\n}\n\ninterface PrepareForPowerReconnectionProps {\n  attendanceData: Customer;\n  installation: Installation;\n  debits: Debits;\n  operatingCompany: string;\n  protocol: string;\n}\n\nconst PowerReconnectionServiceContext = createContext<PowerReconnectionContextData>(\n  {} as PowerReconnectionContextData,\n);\n\nconst PowerReconnectionProvider: React.FC = ({ children }) => {\n  const [\n    { isLoading, message },\n    { start: startLoading, stop: stopLoading },\n  ] = useLoading();\n\n  const { user } = useAuth();\n\n  const ableForEmergencyReconnection = useCallback(\n    async ({\n      operatingCompany,\n      installationNumber,\n    }: AbleForEmergencyReconnectionProps) => {\n      const response = await eqtlBarApi.get(\n        '/servico/v1/religa/validaHorario',\n        {\n          params: {\n            empresaOperadora: operatingCompany,\n            numeroInstalacao: installationNumber,\n            codigoTransacao: uuid(),\n          },\n        },\n      );\n\n      if (response.data.data.regraSaida === 'U') {\n        return true;\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const getReconnectionInfo = useCallback(\n    async ({\n      installationNumber,\n      phaseNumber,\n      locality,\n      operatingCompany,\n    }: GetReconnectionInfoProps) => {\n      const hasEmergencyReconnection = await ableForEmergencyReconnection({\n        installationNumber,\n        operatingCompany,\n      });\n\n      const reconnectionInfo = {} as ReconnectionInfo;\n\n      if (hasEmergencyReconnection) {\n        if (phaseNumber === 1) {\n          switch (operatingCompany) {\n            case '98':\n              reconnectionInfo.tariffs = { commonTariff: 8.23 };\n              break;\n            case '95':\n              reconnectionInfo.tariffs = {\n                commonTariff: 8.24,\n                emergencyTariff: 41.31,\n              };\n              break;\n            case '82':\n              reconnectionInfo.tariffs = { commonTariff: 8.25 };\n              break;\n            case '86':\n              reconnectionInfo.tariffs = { commonTariff: 7.88 };\n              break;\n            default:\n              break;\n          }\n        }\n\n        if (phaseNumber === 2) {\n          switch (operatingCompany) {\n            case '98':\n              reconnectionInfo.tariffs = { commonTariff: 11.34 };\n              break;\n            case '95':\n              reconnectionInfo.tariffs = {\n                commonTariff: 11.34,\n                emergencyTariff: 61.98,\n              };\n              break;\n            case '82':\n              reconnectionInfo.tariffs = { commonTariff: 34.12 };\n              break;\n            case '86':\n              reconnectionInfo.tariffs = { commonTariff: 32.6 };\n              break;\n            default:\n              break;\n          }\n        }\n\n        if (phaseNumber === 3) {\n          switch (operatingCompany) {\n            case '98':\n              reconnectionInfo.tariffs = { commonTariff: 34.06 };\n              break;\n            case '95':\n              reconnectionInfo.tariffs = {\n                commonTariff: 34.07,\n                emergencyTariff: 103.32,\n              };\n              break;\n            default:\n              break;\n          }\n        }\n      }\n\n      if (!hasEmergencyReconnection) {\n        if (locality === 'RURAL') {\n          reconnectionInfo.deadlineForReconnection = { hours: 48 };\n        } else {\n          reconnectionInfo.deadlineForReconnection = { hours: 24 };\n        }\n\n        if (phaseNumber === 1) {\n          switch (operatingCompany) {\n            case '98':\n              reconnectionInfo.tariffs = { commonTariff: 8.23 };\n              break;\n            case '95':\n              reconnectionInfo.tariffs = { commonTariff: 8.24 };\n              break;\n            case '82':\n              reconnectionInfo.tariffs = { commonTariff: 8.25 };\n              break;\n            case '86':\n              reconnectionInfo.tariffs = { commonTariff: 7.88 };\n              break;\n            default:\n              break;\n          }\n        }\n\n        if (phaseNumber === 2) {\n          switch (operatingCompany) {\n            case '98':\n              reconnectionInfo.tariffs = { commonTariff: 11.34 };\n              break;\n            case '95':\n              reconnectionInfo.tariffs = { commonTariff: 11.34 };\n              break;\n            default:\n              break;\n          }\n        }\n\n        if (phaseNumber === 3) {\n          switch (operatingCompany) {\n            case '98':\n              reconnectionInfo.tariffs = { commonTariff: 34.06 };\n              break;\n            case '95':\n              reconnectionInfo.tariffs = { commonTariff: 34.07 };\n              break;\n            case '82':\n              reconnectionInfo.tariffs = { commonTariff: 34.12 };\n              break;\n            case '86':\n              reconnectionInfo.tariffs = { commonTariff: 32.6 };\n              break;\n            default:\n              break;\n          }\n        }\n      }\n\n      return reconnectionInfo;\n    },\n    [ableForEmergencyReconnection],\n  );\n\n  const ableToReconnection = useCallback(\n    ({\n      contractAccount,\n      installation,\n      serviceNotes,\n    }: AbleToReconnectionProps) => {\n      // Buscar notas de desligamento\n      const shutdownNote = serviceNotes.openServiceNotes.find(\n        note => note.type === 'DS',\n      );\n\n      // Buscar notas de suspensão\n      const suspensionNote = serviceNotes.openServiceNotes.find(\n        note => note.type === 'SF',\n      );\n\n      // Buscar notas de fiscalização\n      const oversightNote = serviceNotes.openServiceNotes.find(\n        note => note.type === 'FS',\n      );\n\n      // Buscar notas de ligação nova\n      const newEnergyConnectionNote = serviceNotes.openServiceNotes.find(\n        note => note.type === 'LN',\n      );\n\n      // Buscar notas de religação\n      const reconnectionNote = serviceNotes.openServiceNotes.find(\n        note => note.type === 'RL',\n      );\n\n      if (installation.status === 'Potencial') {\n        return {\n          ok: false,\n          error: `A conta contrato ${contractAccount} ainda não está ligada.`,\n        };\n      }\n\n      if (\n        installation.status === 'Desligada' ||\n        installation.status === 'Desliga em andamento'\n      ) {\n        return {\n          ok: false,\n          error:\n            'Esta conta contrato está desligada. Para restabelecer seu fornecimento de energia você precisa solicitar uma reativação.',\n        };\n      }\n\n      if (\n        installation.cutInProgress ||\n        installation.status === 'Corte executado' ||\n        installation.status === 'Corte em andamento'\n      ) {\n        if (reconnectionNote) {\n          if (\n            reconnectionNote.status === 'REJE' ||\n            reconnectionNote.status === 'ATIV' ||\n            reconnectionNote.status === 'DEVO'\n          ) {\n            return {\n              // VERIFICAR TEXTO\n              ok: false,\n              error: 'Infelizmente não é possível atender este caso por aqui.',\n            };\n          }\n\n          if (reconnectionNote.status === 'RECE') {\n            if (reconnectionNote.code === 'RELU') {\n              return {\n                ok: false,\n                error: `Já existe um serviço de religação de urgência em aberto para ${contractAccount}. Por favor, aguarde e logo logo seu fornecimento de energia será restabelecido.`,\n              };\n            }\n\n            if (reconnectionNote.code === 'RELA') {\n              return {\n                ok: false,\n                error: `Já existe um serviço de religação automática em aberto para ${contractAccount}. Por favor, aguarde e logo logo seu fornecimento de energia será restabelecido.`,\n              };\n            }\n\n            if (reconnectionNote.code === 'RELC') {\n              return {\n                ok: false,\n                error: `Já existe um serviço de religação em aberto para ${contractAccount}. Por favor, aguarde e logo logo seu fornecimento de energia será restabelecido.`,\n              };\n            }\n          }\n        }\n\n        if (shutdownNote) {\n          return {\n            ok: false,\n            error:\n              'Esta conta contrato está desligada. Para restabelecer seu fornecimento de energia você precisa solicitar uma reativação.',\n          };\n        }\n\n        if (oversightNote) {\n          // VERIFICAR ESSA CONDIÇÃO\n          return {\n            ok: false,\n            error:\n              'Infelizmente não é possível atender este caso por aqui. Você pode solicitar este serviço ligando para o 116 ou indo em uma de nossas agências de atendimento',\n          };\n        }\n\n        if (suspensionNote) {\n          // VERIFICAR ESSA CONDIÇÃO\n          if (\n            suspensionNote.status !== 'RECE' &&\n            suspensionNote.status !== 'FINL'\n          ) {\n            if (oversightNote) {\n              return {\n                ok: false,\n                error:\n                  'Infelizmente não é possível atender este caso por aqui. Você pode solicitar este serviço ligando para o 116 ou indo em uma de nossas agências de atendimento',\n              };\n            }\n          }\n        }\n      }\n\n      if (newEnergyConnectionNote) {\n        return {\n          ok: false,\n          error: `Já existe um serviço de reativação em aberto para ${contractAccount}. Por favor, aguarde e logo logo seu fornecimento de energia será restabelecido.`,\n        };\n      }\n\n      if (\n        installation.status === 'Reativa em Andamento' ||\n        installation.status === 'Religa em Andamento'\n      ) {\n        if (newEnergyConnectionNote) {\n          return {\n            ok: false,\n            error: `Já existe um serviço de reativação em aberto para ${contractAccount}. Por favor, aguarde e logo logo seu fornecimento de energia será restabelecido.`,\n          };\n        }\n\n        if (reconnectionNote) {\n          if (\n            reconnectionNote.status === 'REJE' ||\n            reconnectionNote.status === 'ATIV' ||\n            reconnectionNote.status === 'DEVO'\n          ) {\n            // VERIFICAR ESSE TEXTO\n            return {\n              ok: false,\n              error: 'Infelizmente não é possível atender este caso por aqui.',\n            };\n          }\n\n          if (\n            reconnectionNote.status === 'RECE' ||\n            reconnectionNote.status === 'ERRO'\n          ) {\n            if (reconnectionNote.code === 'RELU') {\n              return {\n                ok: false,\n                error: `Já existe um serviço de religação de urgência em aberto para ${contractAccount}. Por favor, aguarde e logo logo seu fornecimento de energia será restabelecido.`,\n              };\n            }\n\n            if (reconnectionNote.code === 'RELA') {\n              return {\n                ok: false,\n                error: `Já existe um serviço de religação automática em aberto para ${contractAccount}. Por favor, aguarde e logo logo seu fornecimento de energia será restabelecido.`,\n              };\n            }\n\n            if (reconnectionNote.code === 'RELC') {\n              return {\n                ok: false,\n                error: `Já existe um serviço de religação em aberto para ${contractAccount}. Por favor, aguarde e logo logo seu fornecimento de energia será restabelecido.`,\n              };\n            }\n          }\n        }\n\n        if (reconnectionNote) {\n          if (\n            reconnectionNote.status === 'REJE' ||\n            reconnectionNote.status === 'ATIV' ||\n            reconnectionNote.status === 'DEVO'\n          ) {\n            // VERIFICAR ESSE TEXTO\n            return {\n              ok: false,\n              error: 'Infelizmente não é possível atender este caso por aqui.',\n            };\n          }\n\n          return {\n            ok: false,\n            error: 'Você já possui uma religação em andamento',\n          };\n        }\n      }\n\n      if (installation.status === 'Ligada') {\n        if (oversightNote) {\n          // VERIFICAR ESSE\n          return {\n            ok: false,\n            error: 'Infelizmente não é possível atender este caso por aqui.',\n          };\n        }\n\n        if (suspensionNote) {\n          return { ok: true };\n        }\n\n        return {\n          ok: false,\n          error: `A conta contrato ${contractAccount} não está com o fornecimento suspenso, mas pode ser que você esteja com uma falta de energia.`,\n        };\n      }\n\n      // AVALIAR ESTE CASO\n      return { ok: true };\n    },\n    [],\n  );\n\n  const generatePowerReconnection = useCallback(\n    async ({\n      type,\n      operatingCompany,\n      contractAccount,\n      protocol,\n      descriptionText,\n      reference,\n    }: GeneratePowerReconnectionProps) => {\n      try {\n        startLoading('Gerando solicitação de Religação ...');\n\n        let path;\n\n        switch (type) {\n          case 'common':\n            path = '/servico/v1/religa/comum';\n            break;\n          case 'emergency':\n            path = '/servico/v1/religa/urgente';\n            break;\n          default:\n            return;\n        }\n\n        await eqtlBarApi.post(\n          path,\n          {\n            codigoTransacao: uuid(),\n            data: {\n              contaContrato: contractAccount,\n              protocolo: protocol,\n              textoDescritivo: descriptionText,\n              referencia: reference,\n            },\n          },\n          {\n            params: {\n              empresaOperadora: operatingCompany,\n            },\n          },\n        );\n\n        Swal.fire({\n          icon: 'success',\n          title: 'Religação',\n          html: '<p>Religação comum gerada com sucesso.</p>',\n          confirmButtonText: `OK`,\n          confirmButtonColor: '#3c1490',\n        });\n      } catch {\n        Swal.fire({\n          icon: 'error',\n          title: 'Religação',\n          html: '<p>Falha ao gerar a solicitação de Religação.</p>',\n          confirmButtonText: `OK`,\n          confirmButtonColor: '#3c1490',\n        });\n      } finally {\n        stopLoading();\n      }\n    },\n    [startLoading, stopLoading],\n  );\n\n  const startPowerReconnectionFlow = useCallback(\n    async ({\n      attendanceData,\n      installation,\n      operatingCompany,\n      protocol,\n    }: StartPowerReconnectionFlowProps) => {\n      try {\n        startLoading('Analisando informações da instalação ...');\n\n        const reconnectionInfo = await getReconnectionInfo({\n          installationNumber: attendanceData.installationNumber,\n          locality: installation.technicalData.locality,\n          operatingCompany,\n          phaseNumber: attendanceData.phaseNumber,\n        });\n\n        if (\n          !reconnectionInfo.tariffs.emergencyTariff &&\n          reconnectionInfo.tariffs.commonTariff\n        ) {\n          Swal.fire({\n            icon: 'question',\n            title: 'Religação',\n            html: `<p>Você gostaria de solicitar uma Religação Comum com prazo de até ${\n              reconnectionInfo.deadlineForReconnection.hours\n            } horas para atendimento no valor de ${currencyMask(\n              reconnectionInfo.tariffs.commonTariff,\n            )} a serem cobrados em sua próxima fatura?</p>`,\n            showDenyButton: true,\n            confirmButtonText: `Sim, gostaria`,\n            denyButtonText: `Não`,\n            confirmButtonColor: '#3c1490',\n            denyButtonColor: '#eb5757',\n          }).then(async resultCommonTariff => {\n            if (resultCommonTariff.isConfirmed) {\n              await generatePowerReconnection({\n                type: 'common',\n                contractAccount: attendanceData.contractAccount,\n                descriptionText: `Gerado pela Tela Ágil - Usuário: ${user}`,\n                operatingCompany,\n                protocol: protocol || '00',\n                reference: attendanceData.address.referencePoint\n                  ? attendanceData.address.referencePoint\n                  : '',\n              });\n            } else if (resultCommonTariff.isDenied) {\n              Swal.fire({\n                icon: 'info',\n                title: 'Religação',\n                html: '<p>Sua solicitação não foi realizada.</p>',\n                confirmButtonText: `Sim`,\n                confirmButtonColor: '#3c1490',\n              });\n            }\n          });\n        } else if (\n          reconnectionInfo.tariffs.emergencyTariff &&\n          reconnectionInfo.tariffs.commonTariff\n        ) {\n          const inputOptions = {\n            COMUM: `Comum = ${currencyMask(\n              reconnectionInfo.tariffs.commonTariff || 0,\n            )}`,\n            URGENCIA: `Urgência = ${currencyMask(\n              reconnectionInfo.tariffs.emergencyTariff || 0,\n            )}`,\n          };\n\n          const { value: reconnectionOption } = await Swal.fire({\n            title: 'Religação',\n            html:\n              '<p>Você gostaria de solicitar uma Religação que será cobrada somente na sua próxima fatura? Caso seja sim, selecione o tipo de religação:</p>',\n            input: 'radio',\n            inputOptions,\n            inputValidator: value => {\n              if (!value) {\n                return 'Selecione uma opção para continuar.';\n              }\n\n              return null;\n            },\n          });\n\n          if (reconnectionOption) {\n            const reconnectionType =\n              reconnectionOption === 'URGENCIA' ? 'emergency' : 'common';\n\n            await generatePowerReconnection({\n              type: reconnectionType,\n              contractAccount: attendanceData.contractAccount,\n              descriptionText: `Gerado pela Tela Ágil - Usuário: ${user}`,\n              operatingCompany,\n              protocol: protocol || '00',\n              reference: attendanceData.address.referencePoint\n                ? attendanceData.address.referencePoint\n                : '',\n            });\n          }\n        }\n      } catch {\n        Swal.fire({\n          icon: 'error',\n          title: 'Religação',\n          html: '<p>Falha ao gerar o serviço de religação.</p>',\n          confirmButtonText: `OK`,\n          confirmButtonColor: '#3c1490',\n        });\n      } finally {\n        stopLoading();\n      }\n    },\n    [\n      generatePowerReconnection,\n      getReconnectionInfo,\n      startLoading,\n      stopLoading,\n      user,\n    ],\n  );\n\n  const prepareForPowerReconnection = useCallback(\n    async ({\n      attendanceData,\n      installation,\n      debits,\n      operatingCompany,\n      protocol,\n    }: PrepareForPowerReconnectionProps) => {\n      if (\n        debits.invoiceDebits.totalAmountInvoiceDebits > 0 ||\n        debits.installmentDebits.totalAmountInstallmentDebits > 0\n      ) {\n        Swal.fire({\n          icon: 'question',\n          title: 'Religação',\n          html: `<p>Você possui ${\n            debits.invoiceDebits.invoiceDebitDetails.length\n          } faturas com um débito de ${currencyMask(\n            debits.invoiceDebits.totalAmountInvoiceDebits,\n          )}. Estão pagas?</p>`,\n          showDenyButton: true,\n          confirmButtonText: `Sim`,\n          denyButtonText: `Não`,\n          confirmButtonColor: '#3c1490',\n          denyButtonColor: '#eb5757',\n        }).then(async resultHasDebits => {\n          if (resultHasDebits.isConfirmed) {\n            await startPowerReconnectionFlow({\n              attendanceData,\n              installation,\n              operatingCompany,\n              protocol,\n            });\n          } else if (resultHasDebits.isDenied) {\n            Swal.fire({\n              icon: 'info',\n              title: 'Religação',\n              html:\n                '<p>Efetue o pagamento e retorne para solicitar a religação.</p>',\n              confirmButtonText: `Sim`,\n              confirmButtonColor: '#3c1490',\n            });\n          }\n        });\n      } else {\n        await startPowerReconnectionFlow({\n          attendanceData,\n          installation,\n          operatingCompany,\n          protocol,\n        });\n      }\n    },\n    [startPowerReconnectionFlow],\n  );\n\n  return (\n    <PowerReconnectionServiceContext.Provider\n      value={{\n        ableToReconnection,\n        getReconnectionInfo,\n        prepareForPowerReconnection,\n      }}\n    >\n      {children}\n\n      {isLoading && (\n        <Loading isOpen={isLoading} message={message} setIsOpen={stopLoading} />\n      )}\n    </PowerReconnectionServiceContext.Provider>\n  );\n};\n\nfunction usePowerReconnectionService(): PowerReconnectionContextData {\n  const context = useContext(PowerReconnectionServiceContext);\n\n  if (!context) {\n    throw new Error(\n      'usePowerReconnectionService must be used within a PowerReconnectionProvider',\n    );\n  }\n\n  return context;\n}\n\nexport { PowerReconnectionProvider, usePowerReconnectionService };\n","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Main\\ServicesContent\\QuickMenu\\index.tsx",["46"],"import React, { useState } from 'react';\n\nimport { BsLightningFill } from 'react-icons/bs';\nimport { FaPlug, FaDollarSign, FaDivide, FaCalendarAlt } from 'react-icons/fa';\nimport { IoDocumentText } from 'react-icons/io5';\nimport { IoMdMail } from 'react-icons/io';\nimport { MdReceipt } from 'react-icons/md';\nimport Swal from 'sweetalert2';\n\nimport {\n  Container,\n  Content,\n  MenuItem,\n  MenuItemButton,\n  MenuItemText,\n} from './styles';\n\nimport PowerOutageFlow from '../../../Services/PowerOutageFlow';\nimport DebitsConsultationModal from '../../../Services/DebitsConsultationModal';\nimport InstallmentPaymentModal from '../../../Services/InstallmentPaymentModal';\nimport EmailInvoice from '../../../Services/EmailInvoice';\nimport ExpirationChange from '../../../Services/DueDateChange';\nimport RequestList from '../../../Services/RequestList';\n\nimport { useCustomerService } from '../../../../hooks/customerService';\nimport { usePowerReconnectionService } from '../../../../hooks/powerReconnectionService';\nimport { usePowerOutageService } from '../../../../hooks/powerOutageService';\n\nconst QuickMenu: React.FC = () => {\n  const [outagePowerOpen, setOutagePowerOpen] = useState(false);\n  const [debitsConsultationOpen, setDebitsConsultationOpen] = useState(false);\n  const [installmentPaymentOpen, setInstallmentPaymentOpen] = useState(false);\n  const [emailInvoiceOpen, setEmailInvoiceOpen] = useState(false);\n  const [expirationChangeOpen, setExpirationChangeOpen] = useState(false);\n  const [requestListOpen, setRequestListOpen] = useState(false);\n\n  const {\n    serviceNotes,\n    debits,\n    customer,\n    installation,\n    operatingCompany,\n    protocol,\n  } = useCustomerService();\n  const { ableToPowerOutage } = usePowerOutageService();\n  const {\n    ableToReconnection,\n    prepareForPowerReconnection,\n  } = usePowerReconnectionService();\n\n  async function toggleOutagePower(): Promise<void> {\n    if (\n      await ableToPowerOutage({\n        contractAccount: customer.contractAccount,\n        installation,\n        operatingCompany,\n        protocol: protocol || '00',\n        reference: customer.address.referencePoint\n          ? customer.address.referencePoint\n          : '',\n        serviceNotes,\n      })\n    ) {\n      setOutagePowerOpen(!outagePowerOpen);\n    }\n  }\n\n  async function togglePowerReconnection(): Promise<void> {\n    const responseAbleToReconnection = ableToReconnection({\n      contractAccount: customer.contractAccount,\n      serviceNotes,\n      installation,\n    });\n\n    if (!responseAbleToReconnection.ok) {\n      Swal.fire({\n        icon: 'warning',\n        title: 'Religação',\n        html: `<p>${\n          responseAbleToReconnection.error ||\n          'O cliente não está habilitado para gerar uma religação'\n        }</p>`,\n        confirmButtonText: `OK`,\n        confirmButtonColor: '#3c1490',\n      });\n    } else {\n      await prepareForPowerReconnection({\n        attendanceData: customer,\n        installation,\n        debits,\n        operatingCompany,\n        protocol: protocol || '00',\n      });\n    }\n  }\n\n  function toggleDebitsConsultation(): void {\n    if (\n      debits.installmentDebits.totalAmountInstallmentDebits === 0 &&\n      debits.invoiceDebits.totalAmountInvoiceDebits === 0\n    ) {\n      Swal.fire({\n        icon: 'warning',\n        title: 'Consulta de débitos',\n        html: '<p>O cliente não possui débitos</p>',\n        confirmButtonText: `OK`,\n        confirmButtonColor: '#3c1490',\n      });\n    } else {\n      setDebitsConsultationOpen(!debitsConsultationOpen);\n    }\n  }\n\n  function toggleInstallmentPayment(): void {\n    if (!debits.installmentDebits.installmentDebitDetails.length) {\n      Swal.fire({\n        icon: 'warning',\n        title: 'Parcelamento',\n        html: '<p>O cliente não possui negociações de parcelamento</p>',\n        confirmButtonText: `OK`,\n        confirmButtonColor: '#3c1490',\n      });\n    } else {\n      setInstallmentPaymentOpen(!installmentPaymentOpen);\n    }\n  }\n\n  function toggleEmailInvoice(): void {\n    if (!customer.contacts.email) {\n      Swal.fire({\n        icon: 'warning',\n        title: 'Fatura por e-mail',\n        html: '<p>O cliente não possui um e-mail cadastrado</p>',\n        confirmButtonText: `OK`,\n        confirmButtonColor: '#3c1490',\n      });\n    } else {\n      setEmailInvoiceOpen(!emailInvoiceOpen);\n    }\n  }\n\n  function toggleExpirationChange(): void {\n    setExpirationChangeOpen(!expirationChangeOpen);\n  }\n\n  function toggleRequestList(): void {\n    if (\n      !serviceNotes.openServiceNotes.length &&\n      !serviceNotes.closedServiceNotes.length\n    ) {\n      Swal.fire({\n        icon: 'warning',\n        title: 'Acompanhamento de protocolos',\n        html: '<p>O cliente não possui notas para serem exibidas.</p>',\n        confirmButtonText: `OK`,\n        confirmButtonColor: '#3c1490',\n      });\n    } else {\n      setRequestListOpen(!requestListOpen);\n    }\n  }\n\n  return (\n    <Container>\n      <h3>Menu rápido</h3>\n\n      <Content>\n        <MenuItem>\n          <MenuItemButton type=\"button\" onClick={toggleOutagePower}>\n            <BsLightningFill size={20} />\n          </MenuItemButton>\n\n          <MenuItemText>Falta de energia</MenuItemText>\n        </MenuItem>\n\n        <MenuItem>\n          <MenuItemButton type=\"button\" onClick={togglePowerReconnection}>\n            <FaPlug size={20} />\n          </MenuItemButton>\n\n          <MenuItemText>Religação</MenuItemText>\n        </MenuItem>\n\n        <MenuItem>\n          <MenuItemButton type=\"button\" onClick={toggleDebitsConsultation}>\n            <IoDocumentText size={20} />\n          </MenuItemButton>\n\n          <MenuItemText>Consulta de débitos</MenuItemText>\n        </MenuItem>\n\n        {/* <MenuItem>\n          <MenuItemButton type=\"button\">\n            <FaDollarSign size={20} />\n          </MenuItemButton>\n\n          <MenuItemText>Baixa Renda</MenuItemText>\n        </MenuItem> */}\n\n        <MenuItem>\n          <MenuItemButton type=\"button\" onClick={toggleInstallmentPayment}>\n            <FaDivide size={20} />\n          </MenuItemButton>\n\n          <MenuItemText>Entrada de parcelamento</MenuItemText>\n        </MenuItem>\n\n        <MenuItem>\n          <MenuItemButton type=\"button\" onClick={toggleEmailInvoice}>\n            <IoMdMail size={20} />\n          </MenuItemButton>\n\n          <MenuItemText>Fatura por e-mail</MenuItemText>\n        </MenuItem>\n\n        <MenuItem>\n          <MenuItemButton type=\"button\" onClick={toggleExpirationChange}>\n            <FaCalendarAlt size={20} />\n          </MenuItemButton>\n\n          <MenuItemText>Data certa</MenuItemText>\n        </MenuItem>\n\n        <MenuItem>\n          <MenuItemButton type=\"button\" onClick={toggleRequestList}>\n            <MdReceipt size={20} />\n          </MenuItemButton>\n\n          <MenuItemText>Acompanhamento de protocolos</MenuItemText>\n        </MenuItem>\n      </Content>\n\n      <PowerOutageFlow\n        modalOpen={outagePowerOpen}\n        toggleModal={toggleOutagePower}\n      />\n\n      <DebitsConsultationModal\n        isOpen={debitsConsultationOpen}\n        setIsOpen={toggleDebitsConsultation}\n      />\n      <InstallmentPaymentModal\n        isOpen={installmentPaymentOpen}\n        setIsOpen={toggleInstallmentPayment}\n      />\n\n      <EmailInvoice isOpen={emailInvoiceOpen} setIsOpen={toggleEmailInvoice} />\n\n      <ExpirationChange\n        isOpen={expirationChangeOpen}\n        setIsOpen={toggleExpirationChange}\n      />\n\n      <RequestList isOpen={requestListOpen} setIsOpen={toggleRequestList} />\n    </Container>\n  );\n};\n\nexport default QuickMenu;\n","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\routes\\index.tsx",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\CustomRadioGroup\\styles.ts",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Main\\ServicesContent\\ClientData\\index.tsx",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\DueDateChange\\index.tsx",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\RequestList\\StatusIndicator\\styles.ts",[],{"ruleId":"47","severity":1,"message":"48","line":140,"column":20,"nodeType":"49","messageId":"50","endLine":140,"endColumn":23,"suggestions":"51"},{"ruleId":"52","severity":1,"message":"53","line":18,"column":10,"nodeType":"54","messageId":"55","endLine":18,"endColumn":28},{"ruleId":"52","severity":1,"message":"56","line":4,"column":18,"nodeType":"54","messageId":"55","endLine":4,"endColumn":30},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["57","58"],"@typescript-eslint/no-unused-vars","'useCustomerService' is defined but never used.","Identifier","unusedVar","'FaDollarSign' is defined but never used.",{"messageId":"59","fix":"60","desc":"61"},{"messageId":"62","fix":"63","desc":"64"},"suggestUnknown",{"range":"65","text":"66"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"65","text":"67"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[3490,3493],"unknown","never"]nt/no-unused-vars","'useCustomerService' is defined but never used.","Identifier","unusedVar","'FaDollarSign' is defined but never used.","react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'operatingCompany'. Either include it or remove the dependency array.","ArrayExpression",["68"],{"messageId":"69","fix":"70","desc":"71"},{"messageId":"72","fix":"73","desc":"74"},{"desc":"75","fix":"76"},"suggestUnknown",{"range":"77","text":"78"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"77","text":"79"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.","Update the dependencies array to be: [debits.invoiceDebits.invoiceDebitDetails, handleClickDebit, operatingCompany]",{"range":"80","text":"81"},[3490,3493],"unknown","never",[7542,7568],"[debits.invoiceDebits.invoiceDebitDetails, handleClickDebit, operatingCompany]"]nents\\Tooltip\\index.tsx",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\utils\\hasSocialTariff.ts",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\RequestList\\index.tsx",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\DebitsConsultationModal\\styles.ts",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\RequestList\\StatusIndicator\\index.tsx",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\PowerOutageFlow\\StepModal\\styles.ts",[],{"ruleId":"81","severity":1,"message":"82","line":140,"column":20,"nodeType":"83","messageId":"84","endLine":140,"endColumn":23,"suggestions":"85"},{"ruleId":"86","severity":1,"message":"87","line":18,"column":10,"nodeType":"88","messageId":"89","endLine":18,"endColumn":28},{"ruleId":"86","severity":1,"message":"90","line":4,"column":18,"nodeType":"88","messageId":"89","endLine":4,"endColumn":30},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["101","102"],"@typescript-eslint/no-unused-vars","'useCustomerService' is defined but never used.","Identifier","unusedVar","'FaDollarSign' is defined but never used.","lines-around-directive",["103"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],{"messageId":"104","fix":"105","desc":"106"},{"messageId":"107","fix":"108","desc":"109"},"padding-line-between-statements","suggestUnknown",{"range":"110","text":"111"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"110","text":"112"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[3490,3493],"unknown","never"]