[{"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/index.tsx":"1","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/auth.tsx":"2","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/whatsappSending.tsx":"3","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/alert.tsx":"4","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/routes/Route.tsx":"5","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/services/eqtlBarApi.ts":"6","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/extractResponseData.ts":"7","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/getValidationErrors.ts":"8","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/pages/Dashboard/styles.ts":"9","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Loading/index.tsx":"10","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/ToastContainer/styles.ts":"11","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Input/index.tsx":"12","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/index.tsx":"13","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/LeftBar/styles.ts":"14","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/ToastContainer/Toast/styles.ts":"15","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/FindContractModal/index.tsx":"16","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/OutlineInput/index.tsx":"17","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/Header/styles.ts":"18","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/CustomRadioGroup/RadioOptions/styles.ts":"19","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/CustomRadioGroup/styles.ts":"20","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ClientData/index.tsx":"21","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Modal/index.tsx":"22","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ContractData/styles.ts":"23","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/Header/TagInfo/styles.ts":"24","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DebitsConsultationModal/index.tsx":"25","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DebitsConsultationModal/styles.ts":"26","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/questions/PowerOutageQuestions.ts":"27","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/StepModal/index.tsx":"28","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/StatusIndicator/index.tsx":"29","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/InputMask/styles.ts":"30","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/StatusIndicator/styles.ts":"31","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/powerOutageService.tsx":"32","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/customerService.tsx":"33"},{"size":479,"mtime":1618857799129,"results":"34","hashOfConfig":"35"},{"size":2120,"mtime":1618857799129,"results":"36","hashOfConfig":"35"},{"size":7072,"mtime":1618857799129,"results":"37","hashOfConfig":"35"},{"size":1482,"mtime":1618857799129,"results":"38","hashOfConfig":"35"},{"size":802,"mtime":1618857799133,"results":"39","hashOfConfig":"35"},{"size":266,"mtime":1618857799133,"results":"40","hashOfConfig":"35"},{"size":7698,"mtime":1618864922579,"results":"41","hashOfConfig":"35"},{"size":357,"mtime":1618857799133,"results":"42","hashOfConfig":"35"},{"size":266,"mtime":1618857799129,"results":"43","hashOfConfig":"35"},{"size":1081,"mtime":1618857799125,"results":"44","hashOfConfig":"35"},{"size":162,"mtime":1618857799129,"results":"45","hashOfConfig":"35"},{"size":1557,"mtime":1618857799125,"results":"46","hashOfConfig":"35"},{"size":296,"mtime":1618857799129,"results":"47","hashOfConfig":"35"},{"size":2177,"mtime":1618857799125,"results":"48","hashOfConfig":"35"},{"size":1170,"mtime":1618857799129,"results":"49","hashOfConfig":"35"},{"size":1399,"mtime":1618857799125,"results":"50","hashOfConfig":"35"},{"size":1655,"mtime":1618857799129,"results":"51","hashOfConfig":"35"},{"size":980,"mtime":1618857799129,"results":"52","hashOfConfig":"35"},{"size":363,"mtime":1618857799125,"results":"53","hashOfConfig":"35"},{"size":186,"mtime":1618857799125,"results":"54","hashOfConfig":"35"},{"size":3318,"mtime":1618857799129,"results":"55","hashOfConfig":"35"},{"size":893,"mtime":1618857799129,"results":"56","hashOfConfig":"35"},{"size":705,"mtime":1618857799129,"results":"57","hashOfConfig":"35"},{"size":572,"mtime":1618857799129,"results":"58","hashOfConfig":"35"},{"size":9052,"mtime":1618857799129,"results":"59","hashOfConfig":"35"},{"size":2871,"mtime":1618857799129,"results":"60","hashOfConfig":"35"},{"size":3327,"mtime":1618857799129,"results":"61","hashOfConfig":"35"},{"size":4907,"mtime":1618857799129,"results":"62","hashOfConfig":"35"},{"size":353,"mtime":1618857799129,"results":"63","hashOfConfig":"35"},{"size":1138,"mtime":1618857799125,"results":"64","hashOfConfig":"35"},{"size":629,"mtime":1618857799129,"results":"65","hashOfConfig":"35"},{"size":10201,"mtime":1618866683878,"results":"66","hashOfConfig":"35"},{"size":10341,"mtime":1618866658138,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"8cwa88",{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135"},"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/auth.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/whatsappSending.tsx",["136"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/alert.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/routes/Route.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/services/eqtlBarApi.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/extractResponseData.ts",["137","138","139","140","141","142","143"],"import { AxiosResponse } from 'axios';\nimport { parseISO } from 'date-fns';\n\nimport Customer from '../types/Customer';\nimport Installation from '../types/Installation';\nimport Debits, { InvoiceDebit, InstallmentDebit } from '../types/Debits';\nimport ServiceNotes, { OpenNote, ClosedNote } from '../types/ServiceNotes';\n\nimport { phoneMask } from './inputMasks';\n\nimport getInstallationSubclassName from './getInstallationSubclassName';\n\ninterface ExtractedData {\n  customer: Customer;\n  installation: Installation;\n  debits: Debits;\n  serviceNotes: ServiceNotes;\n}\n\ninterface ResponsePhone {\n  tipoTelefone: string;\n  numeroTelefone: string;\n}\n\nfunction getCustomerData(response: AxiosResponse, stateCode: string): Customer {\n  const responseCustomer = response.data.data.cliente[0];\n\n  const customer: Customer = {\n    contractAccount: responseCustomer.contaContrato,\n    name: responseCustomer.nome,\n    surname: responseCustomer.sobrenome,\n    motherName: responseCustomer.nomeMae,\n    dayOfBirth: parseISO(responseCustomer.dataNascimento),\n    rg: responseCustomer.numeroRg,\n    cpf: responseCustomer.numeroCpf,\n    contacts: {\n      email: responseCustomer.contatos.email,\n    },\n    address: {\n      publicArea: responseCustomer.endereco.logradouro,\n      number: responseCustomer.endereco.numero,\n      neighborhood: responseCustomer.endereco.bairro,\n      city: responseCustomer.endereco.cidade,\n      uf: responseCustomer.endereco.uf,\n      postalCode: responseCustomer.endereco.cep,\n    },\n    phaseNumber: Number(responseCustomer.numeroFases),\n    bp: responseCustomer.bp,\n    installationNumber: responseCustomer.numeroInstalacao,\n  };\n\n  if (stateCode === '82' || stateCode === '86') {\n    customer.contractAccount = responseCustomer.contaContrato.toString();\n\n    const landline = responseCustomer.contatos.telefones\n      .filter(\n        (telefone: ResponsePhone) =>\n          telefone.numeroTelefone && telefone.tipoTelefone === 'R',\n      )\n      .map((telefone: ResponsePhone) => phoneMask(telefone.numeroTelefone));\n\n    const cellPhone = responseCustomer.contatos.telefones\n      .filter(\n        (telefone: ResponsePhone) =>\n          telefone.numeroTelefone && telefone.tipoTelefone === 'C',\n      )\n      .map((telefone: ResponsePhone) => phoneMask(telefone.numeroTelefone));\n\n    customer.contacts = {\n      phones: {\n        landline,\n        cellPhone,\n      },\n      email: responseCustomer.contatos.email,\n    };\n\n    customer.installationNumber = responseCustomer.numeroInstalacao.toString();\n\n    customer.address.complement = responseCustomer.endereco.complemento;\n  }\n\n  return customer;\n}\n\nfunction getInstallationData(\n  responseInstallation: any,\n  stateCode: string,\n): Installation {\n  const {\n    status,\n    corteAndamento,\n    desligaAndamento,\n    faltaEnergiaIndividual,\n    faltaEnergiaColetiva,\n    desligamentoProgramado,\n    faltaFases,\n    faltaEnergiaAvaliacaoTecnica,\n  } = responseInstallation;\n\n  const {\n    classe,\n    subclasse,\n    tarifa,\n    grupoTensao,\n    tipoPagamento,\n    fase,\n    localidade,\n    bomPagador,\n  } = responseInstallation.dadosTecnicos;\n\n  const {\n    latitude,\n    longitude,\n  } = responseInstallation.dadosTecnicos.coordenadaGeografica;\n\n  const installation: Installation = {\n    status,\n    cutInProgress: true && corteAndamento === 'S',\n    turnOffInProgress: true && desligaAndamento === 'S',\n    individualPowerOutage: true && faltaEnergiaIndividual === 'S',\n    collectivePowerOutage: true && faltaEnergiaColetiva === 'S',\n    scheduledShutdown: true && desligamentoProgramado === 'S',\n    powerPhaseOutage: true && faltaFases === 'S',\n    powerOutageTechnicalEvaluation:\n      true && faltaEnergiaAvaliacaoTecnica === 'S',\n    technicalData: {\n      class: classe,\n      subclass: subclasse,\n      tariff: tarifa,\n      tensionGroup: grupoTensao,\n      geographicCoordinates: {\n        latitude,\n        longitude,\n      },\n      paymentType: tipoPagamento,\n      phase: Number(fase),\n      locality: localidade,\n      goodPayer: true && bomPagador === 'S',\n    },\n  };\n\n  if (stateCode === '98' || stateCode === '95') {\n    installation.technicalData.subclass = getInstallationSubclassName(\n      installation.technicalData.subclass,\n    );\n  }\n\n  return installation;\n}\n\nfunction getDebits(responseDebits: any, stateCode: string): Debits {\n  const { debitosFatura, debitosParcelamento } = responseDebits;\n\n  const invoiceDebits: InvoiceDebit[] = debitosFatura.detalhesDebitoFatura.map(\n    (debit: any) => {\n      return {\n        overdueInvoiceNumber: debit.numeroFaturaVencida,\n        dueDate: parseISO(debit.dataVencimento),\n        invoiceAmount: Number(debit.valorFatura),\n        invoiceReference: debit.referenciaFatura,\n        paymentCode: debit.codigoPagamento,\n      };\n    },\n  );\n\n  const installmentDebits: InstallmentDebit[] = debitosParcelamento.detalhesDebitoParcelamento.map(\n    (debit: any) => {\n      const parsedDebit: InstallmentDebit = {\n        billingDocumentNumber: debit.numeroDocumentoCobranca,\n        invoiceAmount: Number(debit.valorFatura.toString().trim()),\n        invoiceReference: '',\n        paymentCode: debit.codigoPagamento,\n      };\n\n      if (stateCode === '82' || stateCode === '86') {\n        parsedDebit.invoiceReference = debit.referenciaFatura;\n      }\n\n      return parsedDebit;\n    },\n  );\n\n  const debits: Debits = {\n    invoiceDebits: {\n      invoiceDebitDetails: invoiceDebits,\n      totalAmountInvoiceDebits: Number(debitosFatura.valorTotalDebitoFatura),\n    },\n    installmentDebits: {\n      installmentDebitDetails: installmentDebits,\n      totalAmountInstallmentDebits: Number(\n        debitosParcelamento.valorTotalDebitoParcelamento,\n      ),\n    },\n  };\n\n  return debits;\n}\n\nfunction getServiceNotes(response: AxiosResponse): ServiceNotes {\n  const responseNotes = response.data.data.notas;\n\n  const mappedOpenServiceNotes: OpenNote[] = responseNotes.notasAbertas.map(\n    (note: any) => {\n      const openServiceNote: OpenNote = {\n        type: note.tipoNota,\n        typeDescription: note.descricaoTipoNota,\n        codeGroup: note.grupoCode,\n        codeGroupDescription: note.descricaoGrupoCode,\n        code: note.code,\n        codeDescription: note.descricaoCode,\n        openingDate: parseISO(note.dataAbertura),\n        status: note.status,\n        rejectionCode: note.codigoRejeicao,\n        rejectionCodeDescription: note.descricaoCodigoRejeicao,\n      };\n\n      return openServiceNote;\n    },\n  );\n\n  const mappedClosedServiceNotes: ClosedNote[] = responseNotes.notasEncerradas.map(\n    (note: any) => {\n      const openServiceNote: ClosedNote = {\n        type: note.tipoNota,\n        typeDescription: note.descricaoNota,\n        codeGroup: note.grupoCode,\n        codeGroupDescription: note.descricaoGrupoCode,\n        code: note.code,\n        codeDescription: note.descricaoCode,\n        openingDate: parseISO(note.dataAbertura),\n        conclusionDate: parseISO(note.dataConclusao),\n      };\n\n      return openServiceNote;\n    },\n  );\n\n  const serviceNotes: ServiceNotes = {\n    openServiceNotes: mappedOpenServiceNotes,\n    closedServiceNotes: mappedClosedServiceNotes,\n  };\n\n  return serviceNotes;\n}\n\nfunction extractResponseData(\n  response: AxiosResponse,\n  stateCode: string,\n): ExtractedData {\n  const { data: responseData } = response.data;\n\n  const customer = getCustomerData(response, stateCode);\n  const installation = getInstallationData(responseData.instalacao, stateCode);\n  const debits = getDebits(responseData.debitos, stateCode);\n  const serviceNotes = getServiceNotes(response);\n\n  return {\n    customer,\n    installation,\n    debits,\n    serviceNotes,\n  };\n}\n\nexport { extractResponseData, getInstallationData };\n","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/getValidationErrors.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/pages/Dashboard/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Loading/index.tsx",["144"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/ToastContainer/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Input/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/LeftBar/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/ToastContainer/Toast/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/FindContractModal/index.tsx",["145","146"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/OutlineInput/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/Header/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/CustomRadioGroup/RadioOptions/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/CustomRadioGroup/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ClientData/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Modal/index.tsx",["147"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ContractData/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/Header/TagInfo/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DebitsConsultationModal/index.tsx",["148"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DebitsConsultationModal/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/questions/PowerOutageQuestions.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/StepModal/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/StatusIndicator/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/InputMask/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/StatusIndicator/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/powerOutageService.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/customerService.tsx",["149"],"import React, { createContext, useCallback, useContext, useState } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport Swal from 'sweetalert2';\n\nimport { useAuth } from './auth';\n\nimport Customer from '../types/Customer';\nimport Installation from '../types/Installation';\nimport Debits from '../types/Debits';\n\nimport {\n  extractResponseData,\n  getInstallationData,\n} from '../utils/extractResponseData';\n\nimport ServiceNotes from '../types/ServiceNotes';\nimport eqtlBarApi from '../services/eqtlBarApi';\nimport Address from '../types/Address';\n\ninterface CustomerServiceState {\n  operatingCompany: string;\n  customer: Customer;\n  installation: Installation;\n  debits: Debits;\n  serviceNotes: ServiceNotes;\n  protocol?: string;\n  contracts: Contract[];\n}\n\ninterface GetCustomerData {\n  stateCode: string;\n  contract: string;\n}\n\ninterface StartServiceProps {\n  stateCode: string;\n  contract: string;\n}\n\ninterface CustomerServiceContextData {\n  operatingCompany: string;\n  protocol: string | undefined;\n  customer: Customer;\n  installation: Installation;\n  debits: Debits;\n  serviceNotes: ServiceNotes;\n  contracts: Contract[];\n  serviceStarted: boolean;\n  fetchServiceData(customerData: GetCustomerData): Promise<void>;\n  fetchInstallationData({\n    contractAccount,\n    operatingCompany,\n  }: FetchInstallationDataProps): Promise<void>;\n  startService({ stateCode, contract }: GetCustomerData): Promise<void>;\n  finishService(attendanceTime: string): Promise<void>;\n  registerServicePerformed({\n    serviceName,\n    executionDate,\n  }: ServicePerformed): void;\n  findAllContracts({\n    stateCode,\n    cpf,\n  }: FindAllContractsProps): Promise<Contract[]>;\n}\n\ninterface GenerateProtocolProps {\n  operatingCompany: string;\n  contract: string;\n}\n\ninterface FindAllContractsProps {\n  stateCode: string;\n  cpf: string;\n}\n\ninterface FetchInstallationDataProps {\n  contractAccount: string;\n  operatingCompany: string;\n}\n\ninterface ServicePerformed {\n  serviceName: string;\n  executionDate: Date;\n}\n\ninterface Contract {\n  contractAccount: string;\n  address: Address;\n}\n\nconst CustomerServiceContext = createContext<CustomerServiceContextData>(\n  {} as CustomerServiceContextData,\n);\n\nconst CustomerServiceProvider: React.FC = ({ children }) => {\n  const { user } = useAuth();\n\n  const [serviceStarted, setServiceStarted] = useState(false);\n  const [servicesPerformed, setServicesPerformed] = useState<\n    ServicePerformed[]\n  >([]);\n\n  const [\n    customerServiceData,\n    setCustomerServiceData,\n  ] = useState<CustomerServiceState>(() => {\n    const storagedCustomerServiceData = localStorage.getItem(\n      '@TelaAgil:customerServiceData',\n    );\n\n    const storagedProtocol = localStorage.getItem('@TelaAgil:protocol');\n\n    if (storagedCustomerServiceData) {\n      const {\n        operatingCompany,\n        customer,\n        installation,\n        debits,\n        serviceNotes,\n      } = JSON.parse(storagedCustomerServiceData);\n\n      const customerServiceState: CustomerServiceState = {\n        operatingCompany,\n        customer,\n        installation,\n        debits,\n        serviceNotes,\n        contracts: [],\n      };\n\n      if (storagedProtocol) {\n        customerServiceState.protocol = storagedProtocol;\n      }\n\n      return customerServiceState;\n    }\n\n    return {} as CustomerServiceState;\n  });\n\n  const findAllContracts = useCallback(\n    async ({ stateCode, cpf }: FindAllContractsProps) => {\n      const response = await eqtlBarApi.get('/atendimento/v1/clientes', {\n        params: {\n          cpf,\n          flagDadosCliente: true,\n          empresaOperadora: stateCode,\n          codigoTransacao: uuid(),\n        },\n      });\n\n      const contracts: Contract[] = response.data.data.cliente.map(\n        (contract: any) => ({\n          contractAccount: contract.contaContrato,\n          address: {\n            publicArea: contract.endereco.logradouro,\n            number: contract.endereco.numero,\n            neighborhood: contract.endereco.bairro,\n            city: contract.endereco.cidade,\n            uf: contract.endereco.uf,\n            postalCode: contract.endereco.cep,\n            referencePoint: contract.endereco.pontoReferencia,\n          },\n        }),\n      );\n\n      if (!contracts.length) {\n        throw new Error();\n      } else {\n        setCustomerServiceData({\n          ...customerServiceData,\n          operatingCompany: stateCode,\n          contracts,\n        });\n\n        return contracts;\n      }\n    },\n    [customerServiceData],\n  );\n\n  const fetchServiceData = useCallback(\n    async ({ stateCode, contract }: GetCustomerData) => {\n      const response = await eqtlBarApi.get('/atendimento/v1/clientes', {\n        params: {\n          codigoTransacao: uuid(),\n          contrato: contract,\n          empresaOperadora: stateCode,\n          flagDadosCliente: true,\n          flagStatusInstalacao: true,\n          flagPossuiDebitos: true,\n          flagDadosTecnicos: true,\n          flagNotasAbertas: true,\n          flagNotasEncerradas: true,\n          flagDetalheDebitoCobranca: true,\n          flagDetalheDebitoFatura: true,\n        },\n      });\n\n      const {\n        customer,\n        installation,\n        debits,\n        serviceNotes,\n      } = extractResponseData(response, stateCode);\n\n      localStorage.setItem(\n        '@TelaAgil:customerServiceData',\n        JSON.stringify({\n          operatingCompany: stateCode,\n          customer,\n          installation,\n          debits,\n          serviceNotes,\n          contracts: [],\n        }),\n      );\n\n      setCustomerServiceData({\n        operatingCompany: stateCode,\n        customer,\n        installation,\n        debits,\n        serviceNotes,\n        contracts: [],\n      });\n    },\n    [],\n  );\n\n  const generateProtocol = useCallback(\n    async ({ operatingCompany, contract }: GenerateProtocolProps) => {\n      const response = await eqtlBarApi.get('/atendimento/v1/clientes', {\n        params: {\n          empresaOperadora: operatingCompany,\n          contrato: contract,\n          flagGerarProtocolo: true,\n          codigoTransacao: uuid(),\n        },\n      });\n\n      localStorage.setItem('@TelaAgil:protocol', response.data.data.protocolo);\n\n      setCustomerServiceData(state => ({\n        ...state,\n        protocol: response.data.data.protocolo,\n      }));\n    },\n    [],\n  );\n\n  const fetchInstallationData = useCallback(\n    async ({\n      contractAccount,\n      operatingCompany,\n    }: FetchInstallationDataProps) => {\n      const formattedContractAccount = contractAccount\n        .toString()\n        .replace(/^0+/, '');\n\n      const response = await eqtlBarApi.get('/atendimento/v1/clientes', {\n        params: {\n          codigoTransacao: uuid(),\n          contrato: formattedContractAccount,\n          empresaOperadora: operatingCompany,\n          flagStatusInstalacao: true,\n          flagDadosTecnicos: true,\n        },\n      });\n\n      const responseInstallationData = response.data.data.instalacao;\n\n      const responseInstallation = getInstallationData(\n        responseInstallationData,\n        operatingCompany,\n      );\n\n      setCustomerServiceData({\n        ...customerServiceData,\n        installation: responseInstallation,\n      });\n\n      localStorage.setItem(\n        '@TelaAgil:customerServiceData',\n        JSON.stringify({\n          ...customerServiceData,\n          installation: responseInstallation,\n        }),\n      );\n    },\n    [customerServiceData],\n  );\n\n  const startService = useCallback(\n    async ({ stateCode, contract }: StartServiceProps) => {\n      const formattedContract = contract.toString().replace(/^0+/, '');\n\n      try {\n        await fetchServiceData({\n          stateCode,\n          contract: formattedContract,\n        });\n\n        await generateProtocol({\n          contract: formattedContract,\n          operatingCompany: stateCode,\n        });\n\n        setServiceStarted(true);\n      } catch {\n        Swal.fire({\n          icon: 'error',\n          title: 'Erro no atendimento',\n          html:\n            '<p>Ocorreu um erro ao iniciar o atendimento, cheque as informações do cliente</p>',\n          confirmButtonText: `OK`,\n          confirmButtonColor: '#3c1490',\n        });\n      }\n    },\n    [fetchServiceData, generateProtocol],\n  );\n\n  const saveAttendanceLog = useCallback(\n    async (attendanceTime: string) => {\n      await eqtlBarApi.post('/logs', {\n        user_id: user.id,\n        username: user.name,\n        contractAccount: customerServiceData.customer.contractAccount,\n        attendanceTime,\n        services: servicesPerformed,\n      });\n    },\n    [user, customerServiceData.customer, servicesPerformed],\n  );\n\n  const finishService = useCallback(\n    async (attendanceTime: string) => {\n      await saveAttendanceLog(attendanceTime);\n\n      localStorage.removeItem('@TelaAgil:protocol');\n      localStorage.removeItem('@TelaAgil:contracts');\n      localStorage.removeItem('@TelaAgil:customerServiceData');\n\n      setCustomerServiceData({} as CustomerServiceContextData);\n\n      setServicesPerformed([]);\n\n      setServiceStarted(false);\n    },\n    [saveAttendanceLog],\n  );\n\n  const registerServicePerformed = useCallback(\n    ({ serviceName, executionDate }: ServicePerformed) => {\n      setServicesPerformed(oldServices => [\n        ...oldServices,\n        { serviceName, executionDate },\n      ]);\n    },\n    [],\n  );\n\n  return (\n    <CustomerServiceContext.Provider\n      value={{\n        operatingCompany: customerServiceData.operatingCompany,\n        protocol: customerServiceData.protocol,\n        customer: customerServiceData.customer,\n        installation: customerServiceData.installation,\n        debits: customerServiceData.debits,\n        serviceNotes: customerServiceData.serviceNotes,\n        contracts: customerServiceData.contracts,\n        serviceStarted,\n        fetchServiceData,\n        fetchInstallationData,\n        startService,\n        finishService,\n        registerServicePerformed,\n        findAllContracts,\n      }}\n    >\n      {children}\n    </CustomerServiceContext.Provider>\n  );\n};\n\nfunction useCustomerService(): CustomerServiceContextData {\n  const context = useContext(CustomerServiceContext);\n\n  if (!context) {\n    throw new Error(\n      'useCustomerService must be used within a CustomerServiceProvider',\n    );\n  }\n\n  return context;\n}\n\nexport { CustomerServiceProvider, useCustomerService };\n",{"ruleId":"150","severity":1,"message":"151","line":2,"column":16,"nodeType":"152","messageId":"153","endLine":2,"endColumn":20},{"ruleId":"154","severity":1,"message":"155","line":86,"column":3,"nodeType":"152","messageId":"156","endLine":86,"endColumn":28},{"ruleId":"157","severity":1,"message":"158","line":86,"column":25,"nodeType":"159","messageId":"160","endLine":86,"endColumn":28,"suggestions":"161"},{"ruleId":"157","severity":1,"message":"158","line":151,"column":36,"nodeType":"159","messageId":"160","endLine":151,"endColumn":39,"suggestions":"162"},{"ruleId":"157","severity":1,"message":"158","line":155,"column":13,"nodeType":"159","messageId":"160","endLine":155,"endColumn":16,"suggestions":"163"},{"ruleId":"157","severity":1,"message":"158","line":167,"column":13,"nodeType":"159","messageId":"160","endLine":167,"endColumn":16,"suggestions":"164"},{"ruleId":"157","severity":1,"message":"158","line":203,"column":12,"nodeType":"159","messageId":"160","endLine":203,"endColumn":15,"suggestions":"165"},{"ruleId":"157","severity":1,"message":"158","line":222,"column":12,"nodeType":"159","messageId":"160","endLine":222,"endColumn":15,"suggestions":"166"},{"ruleId":"150","severity":1,"message":"167","line":18,"column":3,"nodeType":"152","messageId":"153","endLine":18,"endColumn":12},{"ruleId":"150","severity":1,"message":"168","line":8,"column":40,"nodeType":"152","messageId":"153","endLine":8,"endColumn":50},{"ruleId":"150","severity":1,"message":"169","line":8,"column":52,"nodeType":"152","messageId":"153","endLine":8,"endColumn":61},{"ruleId":"157","severity":1,"message":"158","line":7,"column":13,"nodeType":"159","messageId":"160","endLine":7,"endColumn":16,"suggestions":"170"},{"ruleId":"171","severity":1,"message":"172","line":268,"column":6,"nodeType":"173","endLine":268,"endColumn":32,"suggestions":"174"},{"ruleId":"157","severity":1,"message":"158","line":153,"column":20,"nodeType":"159","messageId":"160","endLine":153,"endColumn":23,"suggestions":"175"},"@typescript-eslint/no-unused-vars","'uuid' is defined but never used.","Identifier","unusedVar","@typescript-eslint/explicit-module-boundary-types","Argument 'responseInstallation' should be typed with a non-any type.","anyTypedArg","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["176","177"],["178","179"],["180","181"],["182","183"],["184","185"],["186","187"],"'setIsOpen' is defined but never used.","'OwnerLabel' is defined but never used.","'OwnerName' is defined but never used.",["188","189"],"react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'operatingCompany'. Either include it or remove the dependency array.","ArrayExpression",["190"],["191","192"],{"messageId":"193","fix":"194","desc":"195"},{"messageId":"196","fix":"197","desc":"198"},{"messageId":"193","fix":"199","desc":"195"},{"messageId":"196","fix":"200","desc":"198"},{"messageId":"193","fix":"201","desc":"195"},{"messageId":"196","fix":"202","desc":"198"},{"messageId":"193","fix":"203","desc":"195"},{"messageId":"196","fix":"204","desc":"198"},{"messageId":"193","fix":"205","desc":"195"},{"messageId":"196","fix":"206","desc":"198"},{"messageId":"193","fix":"207","desc":"195"},{"messageId":"196","fix":"208","desc":"198"},{"messageId":"193","fix":"209","desc":"195"},{"messageId":"196","fix":"210","desc":"198"},{"desc":"211","fix":"212"},{"messageId":"193","fix":"213","desc":"195"},{"messageId":"196","fix":"214","desc":"198"},"suggestUnknown",{"range":"215","text":"216"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"215","text":"217"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"218","text":"216"},{"range":"218","text":"217"},{"range":"219","text":"216"},{"range":"219","text":"217"},{"range":"220","text":"216"},{"range":"220","text":"217"},{"range":"221","text":"216"},{"range":"221","text":"217"},{"range":"222","text":"216"},{"range":"222","text":"217"},{"range":"223","text":"216"},{"range":"223","text":"217"},"Update the dependencies array to be: [debits.invoiceDebits.invoiceDebitDetails, handleClickDebit, operatingCompany]",{"range":"224","text":"225"},{"range":"226","text":"216"},{"range":"226","text":"217"},[2678,2681],"unknown","never",[4297,4300],[4489,4492],[4898,4901],[5932,5935],[6557,6560],[147,150],[7542,7568],"[debits.invoiceDebits.invoiceDebitDetails, handleClickDebit, operatingCompany]",[3736,3739]]