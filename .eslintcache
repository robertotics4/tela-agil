[{"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/index.tsx":"1","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/auth.tsx":"2","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/whatsappSending.tsx":"3","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/alert.tsx":"4","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/routes/Route.tsx":"5","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/services/eqtlBarApi.ts":"6","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/extractResponseData.ts":"7","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/getValidationErrors.ts":"8","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/pages/Dashboard/styles.ts":"9","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Loading/index.tsx":"10","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/ToastContainer/styles.ts":"11","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Input/index.tsx":"12","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/index.tsx":"13","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/LeftBar/styles.ts":"14","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/ToastContainer/Toast/styles.ts":"15","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/FindContractModal/index.tsx":"16","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/OutlineInput/index.tsx":"17","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/Header/styles.ts":"18","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/CustomRadioGroup/RadioOptions/styles.ts":"19","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/CustomRadioGroup/styles.ts":"20","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ClientData/index.tsx":"21","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Modal/index.tsx":"22","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ContractData/styles.ts":"23","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/Header/TagInfo/styles.ts":"24","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DebitsConsultationModal/index.tsx":"25","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DebitsConsultationModal/styles.ts":"26","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/questions/PowerOutageQuestions.ts":"27","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/StepModal/index.tsx":"28","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/StatusIndicator/index.tsx":"29","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/InputMask/styles.ts":"30","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/StatusIndicator/styles.ts":"31","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/powerOutageService.tsx":"32","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/customerService.tsx":"33","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/styles/global.ts":"34","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/index.tsx":"35","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/toast.tsx":"36","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/powerReconnectionService.tsx":"37","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/pages/SignIn/index.tsx":"38","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/pages/SignIn/styles.ts":"39","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/AlertModal/styles.ts":"40","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Button/index.tsx":"41","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/styles.ts":"42","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Button/styles.ts":"43","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/index.tsx":"44","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/CustomRadioGroup/RadioOptions/index.tsx":"45","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/FindContractModal/styles.ts":"46","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/Header/TagInfo/index.tsx":"47","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/hasSocialTariff.ts":"48","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/FindContractModal/ContractsTable/styles.ts":"49","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/InstallmentPaymentModal/index.tsx":"50","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DueDateChange/index.tsx":"51","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/getUnformattedPhone.ts":"52","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DueDateChange/styles.ts":"53","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/EmailInvoice/styles.tsx":"54","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/StepModal/styles.ts":"55","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/services/authenticationApi.ts":"56","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/services/yaloApi.ts":"57","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/index.tsx":"58","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/ServiceNotesTable/index.tsx":"59","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/ServiceNotesTable/styles.ts":"60","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/FindContractModal/ContractsTable/index.tsx":"61","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/LeftBar/index.tsx":"62","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/inputMasks.ts":"63","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/ToastContainer/index.tsx":"64","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/ToastContainer/Toast/index.tsx":"65","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/OutlineInputMask/index.tsx":"66","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/OutlineInput/styles.ts":"67","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ContractData/index.tsx":"68","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/styles.ts":"69","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/routes/index.tsx":"70","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/pages/Dashboard/index.tsx":"71","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Loading/styles.ts":"72","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/OutlineInputMask/styles.ts":"73","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/QuickMenu/styles.ts":"74","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/InstallmentPaymentModal/styles.ts":"75","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/InputMask/index.tsx":"76","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/debitsConsultation.tsx":"77","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/timer.tsx":"78","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/CustomRadioGroup/index.tsx":"79","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Tooltip/styles.ts":"80","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ClientData/styles.ts":"81","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Tooltip/index.tsx":"82","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/getInstallationSubclassName.ts":"83","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/AlertModal/index.tsx":"84","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/EmailInvoice/index.tsx":"85","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/QuickMenu/index.tsx":"86","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/index.tsx":"87","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/changeDueDateService.tsx":"88","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/styles.ts":"89","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/App.tsx":"90"},{"size":495,"mtime":1619629479482,"results":"91","hashOfConfig":"92"},{"size":2213,"mtime":1619629479482,"results":"93","hashOfConfig":"94"},{"size":7072,"mtime":1619035218154,"results":"95","hashOfConfig":"94"},{"size":1482,"mtime":1618857799129,"results":"96","hashOfConfig":"94"},{"size":802,"mtime":1619035218154,"results":"97","hashOfConfig":"94"},{"size":272,"mtime":1619122485148,"results":"98","hashOfConfig":"94"},{"size":8063,"mtime":1619629479482,"results":"99","hashOfConfig":"92"},{"size":374,"mtime":1619629479482,"results":"100","hashOfConfig":"92"},{"size":280,"mtime":1619629479482,"results":"101","hashOfConfig":"92"},{"size":1132,"mtime":1619629479478,"results":"102","hashOfConfig":"92"},{"size":171,"mtime":1619629479482,"results":"103","hashOfConfig":"92"},{"size":1620,"mtime":1619629479478,"results":"104","hashOfConfig":"92"},{"size":313,"mtime":1619629479478,"results":"105","hashOfConfig":"94"},{"size":2319,"mtime":1619629479478,"results":"106","hashOfConfig":"92"},{"size":1243,"mtime":1619629479482,"results":"107","hashOfConfig":"92"},{"size":1450,"mtime":1619629479478,"results":"108","hashOfConfig":"92"},{"size":1730,"mtime":1619629479478,"results":"109","hashOfConfig":"92"},{"size":1037,"mtime":1619629479478,"results":"110","hashOfConfig":"94"},{"size":386,"mtime":1619629479478,"results":"111","hashOfConfig":"92"},{"size":197,"mtime":1619629479478,"results":"112","hashOfConfig":"92"},{"size":3469,"mtime":1619629479478,"results":"113","hashOfConfig":"94"},{"size":941,"mtime":1619629479478,"results":"114","hashOfConfig":"92"},{"size":705,"mtime":1619035218150,"results":"115","hashOfConfig":"94"},{"size":572,"mtime":1619035218150,"results":"116","hashOfConfig":"94"},{"size":9210,"mtime":1619641038166,"results":"117","hashOfConfig":"92"},{"size":3036,"mtime":1619629479478,"results":"118","hashOfConfig":"94"},{"size":3474,"mtime":1619629479482,"results":"119","hashOfConfig":"92"},{"size":5062,"mtime":1619707353512,"results":"120","hashOfConfig":"92"},{"size":369,"mtime":1619629479482,"results":"121","hashOfConfig":"92"},{"size":1217,"mtime":1619629479478,"results":"122","hashOfConfig":"92"},{"size":664,"mtime":1619629479482,"results":"123","hashOfConfig":"92"},{"size":10597,"mtime":1619718872236,"results":"124","hashOfConfig":"92"},{"size":10712,"mtime":1619717392633,"results":"125","hashOfConfig":"92"},{"size":534,"mtime":1619035218154,"results":"126","hashOfConfig":"94"},{"size":1399,"mtime":1619648462810,"results":"127","hashOfConfig":"92"},{"size":1546,"mtime":1619629479482,"results":"128","hashOfConfig":"92"},{"size":23293,"mtime":1619725220565,"results":"129","hashOfConfig":"92"},{"size":3057,"mtime":1619035218154,"results":"130","hashOfConfig":"94"},{"size":758,"mtime":1619035218154,"results":"131","hashOfConfig":"94"},{"size":1363,"mtime":1619035218146,"results":"132","hashOfConfig":"94"},{"size":329,"mtime":1619629479478,"results":"133","hashOfConfig":"92"},{"size":142,"mtime":1619629479478,"results":"134","hashOfConfig":"92"},{"size":396,"mtime":1619629479478,"results":"135","hashOfConfig":"92"},{"size":440,"mtime":1619629479478,"results":"136","hashOfConfig":"92"},{"size":1834,"mtime":1619629479478,"results":"137","hashOfConfig":"92"},{"size":461,"mtime":1619629479478,"results":"138","hashOfConfig":"92"},{"size":434,"mtime":1619629479478,"results":"139","hashOfConfig":"92"},{"size":484,"mtime":1619629479482,"results":"140","hashOfConfig":"92"},{"size":1239,"mtime":1619035218150,"results":"141","hashOfConfig":"94"},{"size":5915,"mtime":1619629479478,"results":"142","hashOfConfig":"92"},{"size":3558,"mtime":1619651781380,"results":"143","hashOfConfig":"92"},{"size":262,"mtime":1619035218154,"results":"144","hashOfConfig":"94"},{"size":1294,"mtime":1619629479478,"results":"145","hashOfConfig":"94"},{"size":799,"mtime":1619629479478,"results":"146","hashOfConfig":"92"},{"size":903,"mtime":1619629479478,"results":"147","hashOfConfig":"92"},{"size":313,"mtime":1619629479482,"results":"148","hashOfConfig":"92"},{"size":187,"mtime":1619629479482,"results":"149","hashOfConfig":"92"},{"size":3761,"mtime":1619629479482,"results":"150","hashOfConfig":"92"},{"size":1878,"mtime":1619629479482,"results":"151","hashOfConfig":"92"},{"size":1273,"mtime":1619629479482,"results":"152","hashOfConfig":"92"},{"size":2132,"mtime":1619717048854,"results":"153","hashOfConfig":"92"},{"size":7679,"mtime":1619731760145,"results":"154","hashOfConfig":"92"},{"size":1803,"mtime":1619629479482,"results":"155","hashOfConfig":"92"},{"size":819,"mtime":1619629479482,"results":"156","hashOfConfig":"92"},{"size":1237,"mtime":1619629479482,"results":"157","hashOfConfig":"92"},{"size":1739,"mtime":1619629479478,"results":"158","hashOfConfig":"92"},{"size":1548,"mtime":1619629479478,"results":"159","hashOfConfig":"92"},{"size":1656,"mtime":1619035218150,"results":"160","hashOfConfig":"94"},{"size":290,"mtime":1619629479482,"results":"161","hashOfConfig":"92"},{"size":395,"mtime":1619629479482,"results":"162","hashOfConfig":"92"},{"size":643,"mtime":1619629479482,"results":"163","hashOfConfig":"94"},{"size":248,"mtime":1619629479478,"results":"164","hashOfConfig":"92"},{"size":1271,"mtime":1619035218150,"results":"165","hashOfConfig":"94"},{"size":1336,"mtime":1619642649308,"results":"166","hashOfConfig":"92"},{"size":2634,"mtime":1619629479478,"results":"167","hashOfConfig":"92"},{"size":1675,"mtime":1619629479478,"results":"168","hashOfConfig":"94"},{"size":1589,"mtime":1619629479482,"results":"169","hashOfConfig":"92"},{"size":1265,"mtime":1619035218150,"results":"170","hashOfConfig":"94"},{"size":366,"mtime":1619035218150,"results":"171","hashOfConfig":"94"},{"size":783,"mtime":1619629479482,"results":"172","hashOfConfig":"92"},{"size":860,"mtime":1619629479478,"results":"173","hashOfConfig":"92"},{"size":364,"mtime":1619629479482,"results":"174","hashOfConfig":"94"},{"size":2257,"mtime":1619629479482,"results":"175","hashOfConfig":"92"},{"size":2485,"mtime":1619629479478,"results":"176","hashOfConfig":"94"},{"size":3861,"mtime":1619730692377,"results":"177","hashOfConfig":"92"},{"size":8865,"mtime":1619651626571,"results":"178","hashOfConfig":"92"},{"size":1248,"mtime":1619629479482,"results":"179","hashOfConfig":"92"},{"size":3932,"mtime":1619650960974,"results":"180","hashOfConfig":"92"},{"size":444,"mtime":1619629479478,"results":"181","hashOfConfig":"92"},{"size":372,"mtime":1619629479474,"results":"182","hashOfConfig":"92"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1t2qx1c",{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"8cwa88",{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"190"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"219"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"215"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"237"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"241"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"241"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"237"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"271"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"271"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"237"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"303"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"314","messages":"315","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"318","messages":"319","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"329","messages":"330","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"237"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"244"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"366","messages":"367","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"370","messages":"371","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372","usedDeprecatedRules":"215"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"375","messages":"376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/auth.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/whatsappSending.tsx",["381"],"import React, { createContext, useCallback, useContext } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport yaloApi from '../services/yaloApi';\n\ninterface UrlVariationsProps {\n  [operatingCompany: string]: {\n    id: string;\n    token: {\n      activeSession: string;\n      noSession: string;\n    };\n  };\n}\n\nconst urlVariations: UrlVariationsProps = {\n  '98': {\n    id: 'equatorial-cemar',\n    token: {\n      activeSession:\n        'eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJ5YWxvY2hhdF9hdXRoIiwiZXhwIjoxNTUzNzM1NjIwLCJpYXQiOjE1NTEzMTY0MjAsImlzcyI6InlhbG9jaGF0X2F1dGgiLCJqdGkiOiJlNjM2MmVmYS01ZDRlLTQ0Y2EtODE0OS0xMmQ0ZGY3MmViNWIiLCJuYmYiOjE1NTEzMTY0MTksInN1YiI6IjVjNzczNWMxMzdhZGE5MDAwODg1OWIwMSIsInR5cCI6ImFjY2VzcyJ9.ExSTxYepjNNi1NWV_MtC_g87NEmZz7tAPpeGHLfre9IkiI3oC2np945L9nCTTzleqgjJ9kWUNscdJaaEIy6SPg',\n      noSession:\n        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJUNUtNbHBiSGpKQ2RQSUtmdFZ5SUJBem5IUEllcThyMCJ9.EDZ45MU8V6tlEvAv1KAZeLtAwRSJgSg2bo5VzwNzdRE',\n    },\n  },\n  '95': {\n    id: 'equatorial-celpa',\n    token: {\n      activeSession:\n        'eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJ5YWxvY2hhdF9hdXRoIiwiZXhwIjoxNTU1MDM2OTM1LCJpYXQiOjE1NTI2MTc3MzUsImlzcyI6InlhbG9jaGF0X2F1dGgiLCJqdGkiOiI2Y2JjN2I0OC03YzYwLTRjOTgtOGQwNy1jODAxZmE0MmRhMzUiLCJuYmYiOjE1NTI2MTc3MzQsInN1YiI6IjVjOGIwZjcyZTU3M2ZjMDAwOTE0NjA1MiIsInR5cCI6ImFjY2VzcyJ9.mU7bgLdmcdFgxt017Ds2UrlNyUNzy31irOyLQTJwVSoeGo7ejKwzN0ctpV6Ntm3rGkF4G_xnI1T8Ua0hPZP1WQ',\n      noSession:\n        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJUNUtNbHBiSGpKQ2RQSUtmdFZ5SUJBem5IUEllcThyMCJ9.EDZ45MU8V6tlEvAv1KAZeLtAwRSJgSg2bo5VzwNzdRE',\n    },\n  },\n  '82': {\n    id: 'equatorial-alagoas',\n    token: {\n      activeSession:\n        'eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJ5YWxvY2hhdF9hdXRoIiwiYm90IjoiZXF1YXRvcmlhbC1hbGFnb2FzIiwiZXhwIjoxNTcwMDQyMzIxLCJpYXQiOjE1Njc2MjMxMjEsImlzcyI6InlhbG9jaGF0X2F1dGgiLCJqdGkiOiI2NWQ1OGQ0Zi03MDM0LTRjNGItOWYyNS0yYzRmMTdjMzYwN2EiLCJuYmYiOjE1Njc2MjMxMjAsInN1YiI6IjVkNzAwN2M4NmM5OGFhMDAwOTBlZDc3ZiIsInR5cCI6ImFjY2VzcyJ9.VTPLnWo7zJYDMlrywLVN1LV36rFA7C6NfLmoIOxy8WyyHsenon5C7gALbgfwtZnmtHnvz-ERNzVtcYewlgOl0A',\n      noSession:\n        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJUNUtNbHBiSGpKQ2RQSUtmdFZ5SUJBem5IUEllcThyMCJ9.EDZ45MU8V6tlEvAv1KAZeLtAwRSJgSg2bo5VzwNzdRE',\n    },\n  },\n  '86': {\n    id: 'equatorial-piaui',\n    token: {\n      activeSession:\n        'eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJ5YWxvY2hhdF9hdXRoIiwiYm90IjoiZXF1YXRvcmlhbC1waWF1aSIsImV4cCI6MTU3MDA0MjIzNiwiaWF0IjoxNTY3NjIzMDM2LCJpc3MiOiJ5YWxvY2hhdF9hdXRoIiwianRpIjoiNDBhNWRjMGUtZDQwZS00OGM0LTkzMTQtY2ViMzQ4MTJlNDk3IiwibmJmIjoxNTY3NjIzMDM1LCJzdWIiOiI1ZDcwMDcxMWZlZTExNTAwMGJhZTJhNjkiLCJ0eXAiOiJhY2Nlc3MifQ.-M94J42QltLdAHuHxyiz-BaFR6EfxHfUA8Z89Jblp6udxL-xIHn8yhDUCUL7nGrPxfMhbR6nJAf6Rg4EsujVZQ',\n      noSession:\n        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJUNUtNbHBiSGpKQ2RQSUtmdFZ5SUJBem5IUEllcThyMCJ9.EDZ45MU8V6tlEvAv1KAZeLtAwRSJgSg2bo5VzwNzdRE',\n    },\n  },\n};\n\ninterface WhatsappSendingContextData {\n  sendNotification({\n    operatingCompany,\n    phoneNumber,\n  }: SendNotificationProps): Promise<void>;\n  sendInvoiceDebit({\n    operatingCompany,\n    invoiceUrl,\n    reference,\n    phoneNumber,\n  }: SendInvoiceDebitProps): Promise<void>;\n  sendInstallmentPayment({\n    operatingCompany,\n    phoneNumber,\n    name,\n    contract,\n    amount,\n    barCode,\n  }: SendInstallmentPaymentProps): Promise<void>;\n}\n\ninterface SendInvoiceDebitProps {\n  operatingCompany: string;\n  invoiceUrl: string;\n  reference: string;\n  phoneNumber: string;\n}\n\ninterface SendNotificationProps {\n  operatingCompany: string;\n  phoneNumber: string;\n}\n\ninterface SendInstallmentPaymentProps {\n  operatingCompany: string;\n  phoneNumber: string;\n  name: string;\n  contract: string;\n  amount: number;\n  barCode: string;\n}\n\nconst WhatsappSendingContext = createContext<WhatsappSendingContextData>(\n  {} as WhatsappSendingContextData,\n);\n\nconst WhatsappSendingProvider: React.FC = ({ children }) => {\n  const sendNotification = useCallback(\n    async ({ operatingCompany, phoneNumber }: SendNotificationProps) => {\n      const { id, token } = urlVariations[operatingCompany];\n\n      await yaloApi.post(\n        `/accounts/equatorial/bots/${id}/notifications`,\n        {\n          type: 'entrada-parcelamento',\n          users: [\n            {\n              phone: `+55${phoneNumber}`,\n              params: {\n                nomeCliente: 'teste',\n                contaContrato: 'teste',\n                valorEntrada: 'teste',\n                codBarras: 'teste',\n              },\n            },\n          ],\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${token.noSession}`,\n            'Content-Type': 'application/json',\n          },\n        },\n      );\n    },\n    [],\n  );\n\n  const sendInstallmentPayment = useCallback(\n    async ({\n      operatingCompany,\n      phoneNumber,\n      name,\n      contract,\n      amount,\n      barCode,\n    }: SendInstallmentPaymentProps) => {\n      const { id, token } = urlVariations[operatingCompany];\n\n      await yaloApi.post(\n        `/accounts/equatorial/bots/${id}/notifications`,\n        {\n          type: 'entrada-parcelamento',\n          users: [\n            {\n              phone: `+55${phoneNumber}`,\n              params: {\n                nomeCliente: name,\n                contaContrato: contract,\n                valorEntrada: amount,\n                codBarras: barCode,\n              },\n            },\n          ],\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${token.noSession}`,\n            'Content-Type': 'application/json',\n          },\n        },\n      );\n    },\n    [],\n  );\n\n  const sendInvoiceDebit = useCallback(\n    async ({\n      operatingCompany,\n      invoiceUrl,\n      reference,\n      phoneNumber,\n    }: SendInvoiceDebitProps) => {\n      const { id, token } = urlVariations[operatingCompany];\n\n      await yaloApi.post(\n        `/accounts/equatorial/bots/${id}/notifications`,\n        {\n          type: 'segunda-via',\n          users: [\n            {\n              phone: `+55${phoneNumber}`,\n              params: {\n                document: {\n                  caption: `2ª via de fatura (${reference})`,\n                  link: invoiceUrl,\n                },\n              },\n            },\n          ],\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${token.noSession}`,\n            'Content-Type': 'application/json',\n          },\n        },\n      );\n    },\n    [],\n  );\n\n  return (\n    <WhatsappSendingContext.Provider\n      value={{\n        sendNotification,\n        sendInvoiceDebit,\n        sendInstallmentPayment,\n      }}\n    >\n      {children}\n    </WhatsappSendingContext.Provider>\n  );\n};\n\nfunction useWhatsappSending(): WhatsappSendingContextData {\n  const context = useContext(WhatsappSendingContext);\n\n  if (!context) {\n    throw new Error(\n      'useWhatsappSending must be used within a WhatsappSendingProvider',\n    );\n  }\n\n  return context;\n}\n\nexport { WhatsappSendingProvider, useWhatsappSending };\n",["382","383","384","385","386"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/alert.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/routes/Route.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/services/eqtlBarApi.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/extractResponseData.ts",["387","388","389","390","391","392","393"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/getValidationErrors.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/pages/Dashboard/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Loading/index.tsx",["394"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/ToastContainer/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Input/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/LeftBar/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/ToastContainer/Toast/styles.ts",[],["395","396","397","398","399"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/FindContractModal/index.tsx",["400","401"],"import React from 'react';\r\n\r\nimport { useCustomerService } from '../../hooks/customerService';\r\n\r\nimport Modal from '../Modal';\r\nimport ContractsTable from './ContractsTable';\r\n\r\nimport { ModalContent, OwnerContainer, OwnerLabel, OwnerName } from './styles';\r\n\r\ninterface ModalProps {\r\n  isOpen: boolean;\r\n  setIsOpen: () => void;\r\n}\r\n\r\ninterface Contract {\r\n  contractAccount: string;\r\n  address: string;\r\n}\r\n\r\nconst FindContractModal: React.FC<ModalProps> = ({ isOpen, setIsOpen }) => {\r\n  const { contracts } = useCustomerService();\r\n\r\n  const data: Contract[] = contracts.map(contract => ({\r\n    contractAccount: contract.contractAccount,\r\n    address: `${contract.address.publicArea}, ${contract.address.number}, ${contract.address.neighborhood}, ${contract.address.city} - ${contract.address.uf}, CEP ${contract.address.postalCode}`,\r\n  }));\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={isOpen}\r\n      setIsOpen={setIsOpen}\r\n      customStyles={{\r\n        borderRadius: '8px',\r\n        padding: '48px 0',\r\n        width: 'fit-content',\r\n        height: 'fit-content',\r\n      }}\r\n    >\r\n      <ModalContent>\r\n        <OwnerContainer>\r\n          {/* <OwnerLabel>Nome do titular:</OwnerLabel> */}\r\n          {/* <OwnerName>{contracts && contracts[0].owner}</OwnerName> */}\r\n        </OwnerContainer>\r\n\r\n        <ContractsTable data={data} closeModal={setIsOpen} />\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default FindContractModal;\r\n",["402","403","404","405","406"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/OutlineInput/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/Header/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/CustomRadioGroup/RadioOptions/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/CustomRadioGroup/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ClientData/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Modal/index.tsx",["407"],"import React, { useState, useEffect } from 'react';\r\nimport Rodal from 'rodal';\r\n\r\nimport 'rodal/lib/rodal.css';\r\n\r\ninterface IModalProps {\r\n  children: any;\r\n  isOpen: boolean;\r\n  customStyles?: object;\r\n  setIsOpen: () => void;\r\n}\r\n\r\nconst Modal: React.FC<IModalProps> = ({\r\n  children,\r\n  isOpen,\r\n  setIsOpen,\r\n  customStyles,\r\n}) => {\r\n  const [modalStatus, setModalStatus] = useState(isOpen);\r\n\r\n  useEffect(() => {\r\n    setModalStatus(isOpen);\r\n  }, [isOpen]);\r\n\r\n  return (\r\n    <Rodal\r\n      visible={modalStatus}\r\n      showCloseButton\r\n      closeOnEsc\r\n      onClose={setIsOpen}\r\n      customStyles={\r\n        customStyles || {\r\n          borderRadius: '8px',\r\n          padding: '48px 64px',\r\n          width: '736px',\r\n          height: 'fit-content',\r\n        }\r\n      }\r\n      customMaskStyles={{\r\n        background: 'rgba(0, 0, 0, 0.6)',\r\n      }}\r\n    >\r\n      {children}\r\n    </Rodal>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ContractData/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/Header/TagInfo/styles.ts",[],["408","409","410","411","412"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DebitsConsultationModal/index.tsx",["413"],"import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { Form } from '@unform/web';\nimport { FormHandles } from '@unform/core';\nimport { format } from 'date-fns';\nimport { useLoading } from 'react-use-loading';\nimport * as Yup from 'yup';\nimport Swal from 'sweetalert2';\n\nimport getValidationErrors from '../../../utils/getValidationErrors';\nimport getUnformattedPhone from '../../../utils/getUnformattedPhone';\n\nimport { useCustomerService } from '../../../hooks/customerService';\nimport { useDebitsConsultation } from '../../../hooks/debitsConsultation';\nimport { useWhatsappSending } from '../../../hooks/whatsappSending';\n\nimport Loading from '../../Loading';\nimport Modal from '../../Modal';\nimport InputMask from '../../InputMask';\n\nimport { currencyMask } from '../../../utils/inputMasks';\n\nimport { InstallmentDebit, InvoiceDebit } from '../../../types/Debits';\nimport { ModalContent, SendButton, DebitContainer } from './styles';\n\ninterface ModalProps {\n  isOpen: boolean;\n  setIsOpen: () => void;\n}\n\ninterface SendDebitFormData {\n  phone: string;\n}\n\nconst DebitsConsultationModal: React.FC<ModalProps> = ({\n  isOpen,\n  setIsOpen,\n}) => {\n  const [selectedDebit, setSelectedDebit] = useState<\n    InstallmentDebit | InvoiceDebit | undefined\n  >(undefined);\n\n  const {\n    debits,\n    customer,\n    operatingCompany,\n    registerServicePerformed,\n  } = useCustomerService();\n  const { getInvoiceUrl } = useDebitsConsultation();\n  const { sendInvoiceDebit, sendInstallmentPayment } = useWhatsappSending();\n  const [{ isLoading, message }, { start, stop }] = useLoading();\n\n  const formRef = useRef<FormHandles>(null);\n\n  const selectedDebitReference = useMemo(() => {\n    if (selectedDebit) {\n      if (Object.keys(selectedDebit).includes('overdueInvoiceNumber')) {\n        const invoiceDebit: InvoiceDebit = selectedDebit as InvoiceDebit;\n\n        let monthReference;\n        let yearReference;\n\n        if (operatingCompany === '98' || operatingCompany === '95') {\n          yearReference = Number(\n            invoiceDebit.overdueInvoiceNumber.substr(1, 4),\n          );\n\n          monthReference = Number(\n            invoiceDebit.overdueInvoiceNumber.substr(5, 2),\n          );\n        } else {\n          yearReference = Number(\n            invoiceDebit.overdueInvoiceNumber.substr(8, 4),\n          );\n\n          monthReference = Number(\n            invoiceDebit.overdueInvoiceNumber.substr(12, 2),\n          );\n        }\n\n        const referenceDate = new Date(yearReference, monthReference - 1);\n\n        return format(referenceDate, 'MM/yyyy');\n      }\n\n      return 'Parcelamento';\n    }\n\n    return null;\n  }, [selectedDebit, operatingCompany]);\n\n  const handleSubmit = useCallback(\n    async (data: SendDebitFormData) => {\n      try {\n        start('Enviando fatura ...');\n\n        formRef.current?.setErrors({});\n\n        const schema = Yup.object().shape({\n          phone: Yup.string().required('Telefone obrigatório'),\n        });\n\n        await schema.validate(data, {\n          abortEarly: false,\n        });\n\n        if (selectedDebit) {\n          if (Object.keys(selectedDebit).includes('overdueInvoiceNumber')) {\n            const invoiceUrl = await getInvoiceUrl({\n              invoiceReference: selectedDebit.invoiceReference,\n              operatingCompany,\n            });\n\n            if (invoiceUrl && selectedDebitReference) {\n              await sendInvoiceDebit({\n                invoiceUrl,\n                operatingCompany,\n                reference: selectedDebitReference,\n                phoneNumber: getUnformattedPhone(data.phone),\n              });\n\n              Swal.fire({\n                icon: 'success',\n                title: 'Fatura enviada',\n                html: '<p>Fatura foi enviada com sucesso.</p>',\n                confirmButtonText: `OK`,\n                confirmButtonColor: '#3c1490',\n              });\n            }\n\n            return;\n          }\n\n          if (Object.keys(selectedDebit).includes('billingDocumentNumber')) {\n            await sendInstallmentPayment({\n              operatingCompany,\n              phoneNumber: getUnformattedPhone(data.phone),\n              name: customer.name,\n              amount: selectedDebit.invoiceAmount,\n              barCode: selectedDebit.paymentCode,\n              contract: customer.contractAccount,\n            });\n\n            Swal.fire({\n              icon: 'success',\n              title: 'Código enviado',\n              html: '<p>O código para pagamento foi enviado com sucesso.</p>',\n              confirmButtonText: `OK`,\n              confirmButtonColor: '#3c1490',\n            });\n          }\n        }\n      } catch (err) {\n        if (err instanceof Yup.ValidationError) {\n          const errors = getValidationErrors(err);\n\n          formRef.current?.setErrors(errors);\n          return;\n        }\n\n        Swal.fire({\n          icon: 'error',\n          title: 'Erro no envio',\n          html:\n            '<p>Ocorreu um erro ao enviar a fatura, cheque o número de telefone</p>',\n          confirmButtonText: `OK`,\n          confirmButtonColor: '#3c1490',\n        });\n      } finally {\n        setSelectedDebit(undefined);\n        setIsOpen();\n        stop();\n      }\n    },\n    [\n      selectedDebit,\n      customer,\n      getInvoiceUrl,\n      operatingCompany,\n      start,\n      sendInvoiceDebit,\n      selectedDebitReference,\n      sendInstallmentPayment,\n      stop,\n      setIsOpen,\n    ],\n  );\n\n  const handleClickDebit = useCallback(debit => {\n    setSelectedDebit(debit);\n  }, []);\n\n  useEffect(() => {\n    if (isOpen) {\n      registerServicePerformed({\n        serviceName: 'Consulta de débitos',\n        executionDate: new Date(),\n      });\n    }\n  }, [registerServicePerformed, isOpen]);\n\n  const generateInstallmentRows = useMemo(() => {\n    const installmentRows = debits.installmentDebits.installmentDebitDetails.map(\n      debit => (\n        <tr\n          key={debit.billingDocumentNumber}\n          tabIndex={0}\n          onClick={() => handleClickDebit(debit)}\n        >\n          <td>\n            <span>Parcelamento</span>\n          </td>\n          <td>\n            <h2>{currencyMask(debit.invoiceAmount)}</h2>\n          </td>\n          <td />\n        </tr>\n      ),\n    );\n\n    return installmentRows;\n  }, [debits, handleClickDebit]);\n\n  const generateInvoiceRows = useMemo(() => {\n    const invoiceRows = debits.invoiceDebits.invoiceDebitDetails.map(debit => {\n      let monthReference;\n      let yearReference;\n\n      if (operatingCompany === '98' || operatingCompany === '95') {\n        yearReference = Number(debit.overdueInvoiceNumber.substr(1, 4));\n        monthReference = Number(debit.overdueInvoiceNumber.substr(5, 2));\n\n        if (yearReference < 2016) {\n          yearReference = debit.dueDate.getFullYear();\n          monthReference = debit.dueDate.getMonth() + 1;\n        }\n      } else {\n        yearReference = Number(debit.overdueInvoiceNumber.substr(8, 4));\n\n        monthReference = Number(debit.overdueInvoiceNumber.substr(12, 2));\n      }\n\n      const referenceDate = new Date(yearReference, monthReference - 1);\n\n      return (\n        <tr\n          key={debit.invoiceReference}\n          tabIndex={0}\n          onClick={() => handleClickDebit(debit)}\n        >\n          <td>\n            <span>Referente a</span>\n            <strong>{format(referenceDate, 'MM/yyyy ')}</strong>\n          </td>\n          <td>\n            <h2>{currencyMask(debit.invoiceAmount)}</h2>\n          </td>\n          <td>\n            <span>Vencimento</span>\n            <strong>{format(new Date(debit.dueDate), 'dd/MM/yyyy')}</strong>\n          </td>\n        </tr>\n      );\n    });\n\n    return invoiceRows;\n  }, [debits, handleClickDebit]);\n\n  useEffect(() => {\n    setSelectedDebit(undefined);\n  }, [setIsOpen]);\n\n  return (\n    <Modal isOpen={isOpen} setIsOpen={setIsOpen}>\n      <ModalContent>\n        <h2>Consulta de débitos</h2>\n\n        <div>\n          <table>\n            <tbody>\n              {generateInstallmentRows}\n              {generateInvoiceRows}\n            </tbody>\n          </table>\n        </div>\n\n        <Form\n          ref={formRef}\n          onSubmit={handleSubmit}\n          initialData={{\n            phone: customer.contacts.phones?.cellPhone,\n          }}\n        >\n          {selectedDebit ? (\n            <DebitContainer>\n              <p>Débito selecionado</p>\n\n              <strong>{`Referente a: ${selectedDebitReference}`}</strong>\n\n              <strong>\n                {`Valor: ${currencyMask(selectedDebit.invoiceAmount)}`}\n              </strong>\n            </DebitContainer>\n          ) : (\n            <span>Nenhum débito selecionado</span>\n          )}\n\n          <InputMask\n            name=\"phone\"\n            mask=\"(99) 99999-9999\"\n            type=\"text\"\n            placeholder=\"Telefone do cliente\"\n            autoComplete=\"off\"\n          />\n\n          <SendButton type=\"submit\" disabled={!selectedDebit}>\n            Enviar fatura\n          </SendButton>\n        </Form>\n      </ModalContent>\n\n      {isLoading && (\n        <Loading isOpen={isLoading} message={message} setIsOpen={stop} />\n      )}\n    </Modal>\n  );\n};\n\nexport default DebitsConsultationModal;\n",["414","415","416","417","418"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DebitsConsultationModal/styles.ts",[],["419","420","421","422","423"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/questions/PowerOutageQuestions.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/StepModal/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/StatusIndicator/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/InputMask/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/StatusIndicator/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/powerOutageService.tsx",["424"],"import React, { createContext, useCallback, useContext } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport { useLoading } from 'react-use-loading';\nimport Swal from 'sweetalert2';\n\nimport eqtlBarApi from '../services/eqtlBarApi';\nimport addZeroesToContract from '../utils/addZeroesToContract';\n\nimport Loading from '../components/Loading';\n\nimport { useAuth } from './auth';\n\nimport Installation from '../types/Installation';\nimport ServiceNotes from '../types/ServiceNotes';\nimport { useCustomerService } from './customerService';\n\ninterface PowerOutageServiceContextData {\n  ableToPowerOutage({\n    contractAccount,\n    installation,\n    operatingCompany,\n    protocol,\n    reference,\n    serviceNotes,\n  }: AbleToPowerOutageProps): Promise<boolean>;\n  generatePowerOutageService({\n    type,\n    descriptionText,\n    reference,\n    protocol,\n    operatingCompany,\n    contractAccount,\n  }: GeneratePowerOutageProps): Promise<string | null>;\n}\n\ninterface GeneratePowerOutageProps {\n  type: 'complete' | 'power surge' | 'lack of phase' | 'information note';\n  descriptionText: string;\n  reference: string;\n  protocol: string;\n  operatingCompany: string;\n  contractAccount: string;\n}\n\ninterface AbleToPowerOutageProps {\n  contractAccount: string;\n  installation: Installation;\n  operatingCompany: string;\n  protocol: string;\n  reference: string;\n  serviceNotes: ServiceNotes;\n}\n\nconst PowerOutageServiceContext = createContext<PowerOutageServiceContextData>(\n  {} as PowerOutageServiceContextData,\n);\n\nconst PowerOutageServiceProvider: React.FC = ({ children }) => {\n  const [\n    { isLoading, message },\n    { start: startLoading, stop: stopLoading },\n  ] = useLoading();\n\n  const { user } = useAuth();\n  const { fetchInstallationData } = useCustomerService();\n\n  const generatePowerOutageService = useCallback(\n    async ({\n      type,\n      descriptionText,\n      reference,\n      protocol,\n      operatingCompany,\n      contractAccount,\n    }: GeneratePowerOutageProps): Promise<string | null> => {\n      let path;\n\n      switch (type) {\n        case 'complete':\n          path = '/servico/v1/faltaenergia/completa';\n          break;\n        case 'power surge':\n          path = '/servico/v1/faltaenergia/oscilacao';\n          break;\n        case 'lack of phase':\n          path = '/servico/v1/faltaenergia/faltaFases';\n          break;\n        case 'information note':\n          path = '/servico/v1/faltaenergia/notaInformativa';\n          break;\n        default:\n          throw new Error('Falta de energia com tipo inválido');\n      }\n\n      const response = await eqtlBarApi.post(\n        path,\n        {\n          codigoTransacao: uuid(),\n          data: {\n            contaContrato: contractAccount,\n            protocolo: protocol,\n            textoDescritivo: descriptionText,\n            referencia: reference,\n          },\n        },\n        {\n          params: {\n            empresaOperadora: operatingCompany,\n          },\n        },\n      );\n\n      await fetchInstallationData({\n        contractAccount,\n        operatingCompany,\n      });\n\n      const { codigoSR } = response.data.data;\n\n      return codigoSR;\n    },\n    [fetchInstallationData],\n  );\n\n  const ableToPowerOutage = useCallback(\n    async ({\n      contractAccount,\n      installation,\n      operatingCompany,\n      protocol,\n      reference,\n      serviceNotes,\n    }: AbleToPowerOutageProps) => {\n      const reconnectionNotes = serviceNotes.openServiceNotes.some(\n        note => note.type === 'RL',\n      );\n\n      const suspensionNotes = serviceNotes.openServiceNotes.some(\n        note => note.type === 'SF',\n      );\n\n      const newEnergyConnectionNotes = serviceNotes.openServiceNotes.some(\n        note => note.type === 'LN',\n      );\n\n      const hasPowerCut = !!(\n        installation.cutInProgress ||\n        installation.status === 'Corte em Andamento' ||\n        installation.status === 'Corte executado' ||\n        installation.status === 'Cortada'\n      );\n\n      const hasActiveSuspension = !!(\n        suspensionNotes ||\n        installation.cutInProgress ||\n        installation.status === 'Corte em Andamento' ||\n        installation.status === 'Corte executado'\n      );\n\n      const CCIsDisconnected = !!(\n        installation.status === 'Desligada' ||\n        installation.status === 'Desligada em Andamento' ||\n        installation.status === 'Desliga em Andamento' ||\n        installation.status === 'Desliga em andamento'\n      );\n\n      const hasPowerReconnection = !!(\n        reconnectionNotes || installation.status === 'Religa em Andamento'\n      );\n\n      const hasPowerReactivation = !!(\n        installation.status === 'Reativação em Andamento' ||\n        installation.status === 'Reativa em Andamento'\n      );\n\n      if (\n        hasPowerReconnection ||\n        hasActiveSuspension ||\n        hasPowerCut ||\n        CCIsDisconnected ||\n        hasPowerReactivation ||\n        installation.scheduledShutdown ||\n        installation.powerPhaseOutage ||\n        installation.powerOutageTechnicalEvaluation ||\n        installation.individualPowerOutage ||\n        installation.collectivePowerOutage ||\n        installation.turnOffInProgress ||\n        newEnergyConnectionNotes\n      ) {\n        try {\n          startLoading('Analisando dados do cliente ...');\n\n          let serviceName = '';\n          let alertDescription = '';\n\n          if (hasPowerReconnection) {\n            alertDescription = 'O cliente possui uma RELIGAÇÃO em andamento';\n          }\n\n          if (hasActiveSuspension) {\n            alertDescription = 'O cliente possui uma SUSPENSÃO em andamento';\n          }\n\n          if (newEnergyConnectionNotes) {\n            alertDescription = 'O cliente possui uma LIGAÇÃO NOVA em andamento';\n          }\n\n          if (installation.cutInProgress || hasPowerCut) {\n            serviceName = 'Corte em andamento';\n            alertDescription =\n              'Verifiquei que seu fornecimento de energia está suspenso. Para restabelecer sua energia, preciso que você efetue o pagamento e solicite uma religação.';\n          }\n\n          if (installation.status === 'Religa em Andamento') {\n            serviceName = 'Religa em Andamento';\n            alertDescription =\n              'Verifiquei que você possui uma solicitação de religação em aberto e por isso não é possível solicitar uma falta de energia. Nosso Centro de Operações já foi informado e você será atendido em breve.';\n          }\n\n          if (installation.status === 'Desligada') {\n            serviceName = 'Conta desligada';\n            alertDescription = `Verifiquei que ${contractAccount} está desligada. Para restabelecer sua energia, preciso que você solicite uma reativação.`;\n          }\n\n          if (installation.status === 'Corte executado') {\n            serviceName = 'Corte executado';\n            alertDescription = `Verifiquei que seu fornecimento de energia está suspenso. Para restabelecer sua energia, preciso que você efetue o pagamento e solicite uma religação.`;\n          }\n\n          if (installation.turnOffInProgress) {\n            serviceName = 'Desliga em Andamento';\n            alertDescription = `Verifiquei que ${contractAccount} está desligada. Para restabelecer sua energia, preciso que você solicite uma reativação.`;\n          }\n\n          if (installation.scheduledShutdown) {\n            serviceName = 'Desliga Programado';\n            alertDescription = `Verifiquei que atual ${contractAccount} está em uma área de desligamento programado. Nossa equipe está trabalhando na rede elétrica que atende seu imóvel. Em breve seu fornecimento será restabelecido.`;\n          }\n\n          if (installation.powerPhaseOutage) {\n            serviceName = 'Falta fases';\n            alertDescription =\n              'Verifiquei que você já possui uma solicitação de falta de fase em aberto. Já estamos trabalhando e em breve você será atendido.';\n          }\n\n          if (installation.powerOutageTechnicalEvaluation) {\n            serviceName = 'Oscilacao';\n            alertDescription =\n              'Já abri a sua solicitação de falta energia e nossa equipe já está trabalhando para lhe atender.';\n          }\n\n          if (installation.individualPowerOutage) {\n            serviceName = 'Falta de Energia Individual';\n            alertDescription =\n              'Já abri a sua solicitação de falta energia e nossa equipe já está trabalhando para lhe atender.';\n          }\n\n          if (installation.collectivePowerOutage) {\n            serviceName = 'Falta Energia Coletiva';\n            alertDescription =\n              'Um dos seus vizinhos já informou sobre essa falta de energia. Fique tranquilo, nossa equipe já está trabalhando para te atender, ok?';\n          }\n\n          const codigoSR = await generatePowerOutageService({\n            type: 'information note',\n            descriptionText: `${serviceName} - Gerado pela Tela Ágil - Usuário: ${user}`,\n            reference,\n            contractAccount,\n            operatingCompany,\n            protocol,\n          });\n\n          Swal.fire({\n            icon: 'warning',\n            title: 'Nota informativa',\n            html: codigoSR\n              ? `<p>${alertDescription}<br><br>Código do serviço gerado: <b>${codigoSR}</b></p>`\n              : `<p> ${alertDescription}</p>`,\n            confirmButtonText: `OK`,\n            confirmButtonColor: '#3c1490',\n          });\n        } catch {\n          Swal.fire({\n            icon: 'error',\n            title: 'Falta de energia',\n            html:\n              '<p>Ocorreu um erro ao tentar gerar um serviço de Falta de Energia.',\n            confirmButtonText: `OK`,\n            confirmButtonColor: '#3c1490',\n          });\n        } finally {\n          stopLoading();\n        }\n\n        return false;\n      }\n\n      return true;\n    },\n    [generatePowerOutageService, user, startLoading, stopLoading],\n  );\n\n  return (\n    <PowerOutageServiceContext.Provider\n      value={{\n        ableToPowerOutage,\n        generatePowerOutageService,\n      }}\n    >\n      {children}\n\n      {isLoading && (\n        <Loading isOpen={isLoading} message={message} setIsOpen={stopLoading} />\n      )}\n    </PowerOutageServiceContext.Provider>\n  );\n};\n\nfunction usePowerOutageService(): PowerOutageServiceContextData {\n  const context = useContext(PowerOutageServiceContext);\n\n  if (!context) {\n    throw new Error(\n      'usePowerOutageService must be used within a PowerOutageServiceProvider',\n    );\n  }\n\n  return context;\n}\n\nexport { PowerOutageServiceProvider, usePowerOutageService };\n","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/customerService.tsx",["425"],"import React, { createContext, useCallback, useContext, useState } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport Swal from 'sweetalert2';\n\nimport { useAuth } from './auth';\n\nimport Customer from '../types/Customer';\nimport Installation from '../types/Installation';\nimport Debits from '../types/Debits';\n\nimport {\n  extractResponseData,\n  getInstallationData,\n  getServiceNotes,\n} from '../utils/extractResponseData';\n\nimport ServiceNotes from '../types/ServiceNotes';\nimport eqtlBarApi from '../services/eqtlBarApi';\nimport Address from '../types/Address';\n\ninterface CustomerServiceState {\n  operatingCompany: string;\n  customer: Customer;\n  installation: Installation;\n  debits: Debits;\n  serviceNotes: ServiceNotes;\n  protocol?: string;\n  contracts: Contract[];\n}\n\ninterface GetCustomerData {\n  stateCode: string;\n  contractAccount: string;\n}\n\ninterface StartServiceProps {\n  stateCode: string;\n  contractAccount: string;\n}\n\ninterface CustomerServiceContextData {\n  operatingCompany: string;\n  protocol: string | undefined;\n  customer: Customer;\n  installation: Installation;\n  debits: Debits;\n  serviceNotes: ServiceNotes;\n  contracts: Contract[];\n  serviceStarted: boolean;\n  fetchServiceData(customerData: GetCustomerData): Promise<void>;\n  fetchInstallationData({\n    contractAccount,\n    operatingCompany,\n  }: FetchInstallationDataProps): Promise<void>;\n  startService({\n    stateCode,\n    contractAccount,\n  }: StartServiceProps): Promise<void>;\n  finishService(attendanceTime: string): Promise<void>;\n  registerServicePerformed({\n    serviceName,\n    executionDate,\n  }: ServicePerformed): void;\n  findAllContracts({\n    stateCode,\n    cpf,\n  }: FindAllContractsProps): Promise<Contract[]>;\n}\n\ninterface GenerateProtocolProps {\n  operatingCompany: string;\n  contractAccount: string;\n}\n\ninterface FindAllContractsProps {\n  stateCode: string;\n  cpf: string;\n}\n\ninterface FetchInstallationDataProps {\n  contractAccount: string;\n  operatingCompany: string;\n}\n\ninterface ServicePerformed {\n  serviceName: string;\n  executionDate: Date;\n}\n\ninterface Contract {\n  contractAccount: string;\n  address: Address;\n}\n\nconst CustomerServiceContext = createContext<CustomerServiceContextData>(\n  {} as CustomerServiceContextData,\n);\n\nconst CustomerServiceProvider: React.FC = ({ children }) => {\n  const { user } = useAuth();\n\n  const [serviceStarted, setServiceStarted] = useState(false);\n  const [servicesPerformed, setServicesPerformed] = useState<\n    ServicePerformed[]\n  >([]);\n\n  const [\n    customerServiceData,\n    setCustomerServiceData,\n  ] = useState<CustomerServiceState>(() => {\n    const storagedCustomerServiceData = localStorage.getItem(\n      '@TelaAgil:customerServiceData',\n    );\n\n    const storagedProtocol = localStorage.getItem('@TelaAgil:protocol');\n\n    if (storagedCustomerServiceData) {\n      const {\n        operatingCompany,\n        customer,\n        installation,\n        debits,\n        serviceNotes,\n      } = JSON.parse(storagedCustomerServiceData);\n\n      const customerServiceState: CustomerServiceState = {\n        operatingCompany,\n        customer,\n        installation,\n        debits,\n        serviceNotes,\n        contracts: [],\n      };\n\n      if (storagedProtocol) {\n        customerServiceState.protocol = storagedProtocol;\n      }\n\n      return customerServiceState;\n    }\n\n    return {} as CustomerServiceState;\n  });\n\n  const findAllContracts = useCallback(\n    async ({ stateCode, cpf }: FindAllContractsProps) => {\n      const response = await eqtlBarApi.get('/atendimento/v1/clientes', {\n        params: {\n          cpf,\n          flagDadosCliente: true,\n          empresaOperadora: stateCode,\n          codigoTransacao: uuid(),\n        },\n      });\n\n      const contracts: Contract[] = response.data.data.cliente.map(\n        (contract: any) => ({\n          contractAccount:\n            typeof contract.contaContrato === 'string'\n              ? contract.contaContrato.replace(/^0+/, '')\n              : contract.contaContrato.toString().replace(/^0+/, ''),\n          address: {\n            publicArea: contract.endereco.logradouro,\n            number: contract.endereco.numero,\n            neighborhood: contract.endereco.bairro,\n            city: contract.endereco.cidade,\n            uf: contract.endereco.uf,\n            postalCode: contract.endereco.cep,\n            referencePoint: contract.endereco.pontoReferencia,\n          },\n        }),\n      );\n\n      if (!contracts.length) {\n        throw new Error();\n      } else {\n        setCustomerServiceData({\n          ...customerServiceData,\n          operatingCompany: stateCode,\n          contracts,\n        });\n\n        return contracts;\n      }\n    },\n    [customerServiceData],\n  );\n\n  const fetchServiceData = useCallback(\n    async ({ stateCode, contractAccount }: GetCustomerData) => {\n      const response = await eqtlBarApi.get('/atendimento/v1/clientes', {\n        params: {\n          codigoTransacao: uuid(),\n          contrato: contractAccount,\n          empresaOperadora: stateCode,\n          flagDadosCliente: true,\n          flagStatusInstalacao: true,\n          flagPossuiDebitos: true,\n          flagDadosTecnicos: true,\n          flagNotasAbertas: true,\n          flagNotasEncerradas: true,\n          flagDetalheDebitoCobranca: true,\n          flagDetalheDebitoFatura: true,\n        },\n      });\n\n      const {\n        customer,\n        installation,\n        debits,\n        serviceNotes,\n      } = extractResponseData(response, stateCode);\n\n      localStorage.setItem(\n        '@TelaAgil:customerServiceData',\n        JSON.stringify({\n          operatingCompany: stateCode,\n          customer,\n          installation,\n          debits,\n          serviceNotes,\n          contracts: [],\n        }),\n      );\n\n      setCustomerServiceData({\n        operatingCompany: stateCode,\n        customer,\n        installation,\n        debits,\n        serviceNotes,\n        contracts: [],\n      });\n    },\n    [],\n  );\n\n  const generateProtocol = useCallback(\n    async ({ operatingCompany, contractAccount }: GenerateProtocolProps) => {\n      const response = await eqtlBarApi.get('/atendimento/v1/clientes', {\n        params: {\n          empresaOperadora: operatingCompany,\n          contrato: contractAccount,\n          flagGerarProtocolo: true,\n          codigoTransacao: uuid(),\n        },\n      });\n\n      localStorage.setItem('@TelaAgil:protocol', response.data.data.protocolo);\n\n      setCustomerServiceData(state => ({\n        ...state,\n        protocol: response.data.data.protocolo,\n      }));\n    },\n    [],\n  );\n\n  const fetchInstallationData = useCallback(\n    async ({\n      contractAccount,\n      operatingCompany,\n    }: FetchInstallationDataProps) => {\n      const response = await eqtlBarApi.get('/atendimento/v1/clientes', {\n        params: {\n          codigoTransacao: uuid(),\n          contrato: contractAccount,\n          empresaOperadora: operatingCompany,\n          flagStatusInstalacao: true,\n          flagDadosTecnicos: true,\n          flagNotasAbertas: true,\n          flagNotasEncerradas: true,\n        },\n      });\n\n      const responseInstallationData = response.data.data.instalacao;\n\n      const installationData = getInstallationData(\n        responseInstallationData,\n        operatingCompany,\n      );\n\n      const serviceNotesData = getServiceNotes(response);\n\n      setCustomerServiceData({\n        ...customerServiceData,\n        installation: installationData,\n        serviceNotes: serviceNotesData,\n      });\n\n      localStorage.setItem(\n        '@TelaAgil:customerServiceData',\n        JSON.stringify({\n          ...customerServiceData,\n          installation: installationData,\n          serviceNotes: serviceNotesData,\n        }),\n      );\n    },\n    [customerServiceData],\n  );\n\n  const startService = useCallback(\n    async ({ stateCode, contractAccount }: StartServiceProps) => {\n      const formattedContractAccount = contractAccount.replace(/^0+/, '');\n\n      try {\n        await fetchServiceData({\n          stateCode,\n          contractAccount: formattedContractAccount,\n        });\n\n        await generateProtocol({\n          contractAccount: formattedContractAccount,\n          operatingCompany: stateCode,\n        });\n\n        setServiceStarted(true);\n      } catch {\n        Swal.fire({\n          icon: 'error',\n          title: 'Erro no atendimento',\n          html:\n            '<p>Ocorreu um erro ao iniciar o atendimento, cheque as informações do cliente</p>',\n          confirmButtonText: `OK`,\n          confirmButtonColor: '#3c1490',\n        });\n      }\n    },\n    [fetchServiceData, generateProtocol],\n  );\n\n  const saveAttendanceLog = useCallback(\n    async (attendanceTime: string) => {\n      await eqtlBarApi.post('/logs', {\n        user_id: user.id,\n        username: user.name,\n        contractAccount: customerServiceData.customer.contractAccount,\n        attendanceTime,\n        services: servicesPerformed,\n      });\n    },\n    [user, customerServiceData.customer, servicesPerformed],\n  );\n\n  const finishService = useCallback(\n    async (attendanceTime: string) => {\n      await saveAttendanceLog(attendanceTime);\n\n      localStorage.removeItem('@TelaAgil:protocol');\n      localStorage.removeItem('@TelaAgil:contracts');\n      localStorage.removeItem('@TelaAgil:customerServiceData');\n\n      setCustomerServiceData({} as CustomerServiceContextData);\n\n      setServicesPerformed([]);\n\n      setServiceStarted(false);\n    },\n    [saveAttendanceLog],\n  );\n\n  const registerServicePerformed = useCallback(\n    ({ serviceName, executionDate }: ServicePerformed) => {\n      setServicesPerformed(oldServices => [\n        ...oldServices,\n        { serviceName, executionDate },\n      ]);\n    },\n    [],\n  );\n\n  return (\n    <CustomerServiceContext.Provider\n      value={{\n        operatingCompany: customerServiceData.operatingCompany,\n        protocol: customerServiceData.protocol,\n        customer: customerServiceData.customer,\n        installation: customerServiceData.installation,\n        debits: customerServiceData.debits,\n        serviceNotes: customerServiceData.serviceNotes,\n        contracts: customerServiceData.contracts,\n        serviceStarted,\n        fetchServiceData,\n        fetchInstallationData,\n        startService,\n        finishService,\n        registerServicePerformed,\n        findAllContracts,\n      }}\n    >\n      {children}\n    </CustomerServiceContext.Provider>\n  );\n};\n\nfunction useCustomerService(): CustomerServiceContextData {\n  const context = useContext(CustomerServiceContext);\n\n  if (!context) {\n    throw new Error(\n      'useCustomerService must be used within a CustomerServiceProvider',\n    );\n  }\n\n  return context;\n}\n\nexport { CustomerServiceProvider, useCustomerService };\n","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/styles/global.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/toast.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/powerReconnectionService.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/pages/SignIn/index.tsx",[],["426","427","428","429","430"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/pages/SignIn/styles.ts",[],["431","432","433","434","435"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/AlertModal/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Button/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Button/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/CustomRadioGroup/RadioOptions/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/FindContractModal/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/Header/TagInfo/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/hasSocialTariff.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/FindContractModal/ContractsTable/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/InstallmentPaymentModal/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DueDateChange/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/getUnformattedPhone.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DueDateChange/styles.ts",[],["436","437","438","439","440"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/EmailInvoice/styles.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/StepModal/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/services/authenticationApi.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/services/yaloApi.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/ServiceNotesTable/index.tsx",["441"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/ServiceNotesTable/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/FindContractModal/ContractsTable/index.tsx",["442","443"],"import React, { useCallback } from 'react';\nimport { useLoading } from 'react-use-loading';\n\nimport { Container, RCTable } from './styles';\nimport { useCustomerService } from '../../../hooks/customerService';\nimport { useAlert } from '../../../hooks/alert';\n\nimport Loading from '../../Loading';\n\ninterface Contract {\n  contractAccount: string;\n  address: string;\n}\n\ninterface TableProps {\n  data: Contract[];\n  closeModal(): void;\n}\n\nconst ContractsTable: React.FC<TableProps> = ({ data, closeModal }) => {\n  const { customAlert } = useAlert();\n  const [\n    { isLoading, message },\n    { start: startLoading, stop: stopLoading },\n  ] = useLoading();\n\n  const { startService, operatingCompany } = useCustomerService();\n\n  const columns = [\n    {\n      title: 'Conta contrato',\n      dataIndex: 'contractAccount',\n      key: 'contractAccount',\n    },\n    {\n      title: 'Endereço',\n      dataIndex: 'address',\n      key: 'address',\n    },\n  ];\n\n  const onRowClick = useCallback(\n    async (record, index, event) => {\n      try {\n        startLoading('Iniciando atendimento ...');\n\n        if (record.contractAccount) {\n          await startService({\n            stateCode: operatingCompany,\n            contractAccount: record.contractAccount,\n          });\n        }\n      } catch (err) {\n        customAlert({\n          type: 'error',\n          title: 'Erro no atendimento',\n          description: 'Não foi iniciar o atendimento.',\n          confirmationText: 'OK',\n        });\n      } finally {\n        closeModal();\n        stopLoading();\n      }\n    },\n    [\n      closeModal,\n      customAlert,\n      operatingCompany,\n      startService,\n      startLoading,\n      stopLoading,\n    ],\n  );\n\n  return (\n    <Container>\n      <RCTable\n        columns={columns}\n        data={data}\n        tableLayout=\"auto\"\n        rowKey=\"contractAccount\"\n        onRow={(record, index) => ({\n          onClick: onRowClick.bind(null, record, index),\n        })}\n      />\n\n      {isLoading && (\n        <Loading isOpen={isLoading} message={message} setIsOpen={stopLoading} />\n      )}\n    </Container>\n  );\n};\n\nexport default ContractsTable;\n","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/LeftBar/index.tsx",["444"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/inputMasks.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/ToastContainer/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/ToastContainer/Toast/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/OutlineInputMask/index.tsx",["445","446"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/OutlineInput/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ContractData/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/routes/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/pages/Dashboard/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Loading/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/OutlineInputMask/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/QuickMenu/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/InstallmentPaymentModal/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/InputMask/index.tsx",["447","448"],"import React, { useEffect, useRef, useState, useCallback } from 'react';\r\nimport ReactInputMask, { Props } from 'react-input-mask';\r\nimport { IconBaseProps } from 'react-icons';\r\nimport { FiAlertCircle } from 'react-icons/fi';\r\nimport { useField } from '@unform/core';\r\n\r\nimport { Container, Error } from './styles';\r\n\r\ninterface InputProps extends Props {\r\n  name: string;\r\n  icon?: React.ComponentType<IconBaseProps>;\r\n}\r\n\r\nconst OutlineInputMask: React.FC<InputProps> = ({\r\n  name,\r\n  icon: Icon,\r\n  ...rest\r\n}) => {\r\n  const inputRef = useRef(null);\r\n  const [isFocused, setIsFocused] = useState(false);\r\n  const { fieldName, defaultValue, error, registerField } = useField(name);\r\n\r\n  const handleInputFocus = useCallback(() => {\r\n    setIsFocused(true);\r\n  }, []);\r\n\r\n  const handleInputBlur = useCallback(() => {\r\n    setIsFocused(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    registerField({\r\n      name: fieldName,\r\n      ref: inputRef.current,\r\n      path: 'value',\r\n      setValue(ref: any, value: string) {\r\n        ref.setInputValue(value);\r\n      },\r\n      clearValue(ref: any) {\r\n        ref.setInputValue('');\r\n      },\r\n    });\r\n  }, [fieldName, registerField]);\r\n\r\n  return (\r\n    <Container isFocused={isFocused} isErrored={!!error}>\r\n      {Icon && <Icon size={20} />}\r\n\r\n      <ReactInputMask\r\n        onFocus={handleInputFocus}\r\n        onBlur={handleInputBlur}\r\n        defaultValue={defaultValue}\r\n        ref={inputRef}\r\n        {...rest}\r\n      />\r\n\r\n      {error && (\r\n        <Error title={error}>\r\n          <FiAlertCircle color=\"#ff5353\" size={20} />\r\n        </Error>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default OutlineInputMask;\r\n","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/debitsConsultation.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/timer.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/CustomRadioGroup/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Tooltip/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ClientData/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Tooltip/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/getInstallationSubclassName.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/AlertModal/index.tsx",["449"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/EmailInvoice/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/QuickMenu/index.tsx",["450"],"import React, { useState } from 'react';\n\nimport { BsLightningFill } from 'react-icons/bs';\nimport { FaPlug, FaDollarSign, FaDivide, FaCalendarAlt } from 'react-icons/fa';\nimport { IoDocumentText } from 'react-icons/io5';\nimport { IoMdMail } from 'react-icons/io';\nimport { MdReceipt } from 'react-icons/md';\nimport { useLoading } from 'react-use-loading';\nimport Swal from 'sweetalert2';\n\nimport {\n  Container,\n  Content,\n  MenuItem,\n  MenuItemButton,\n  MenuItemText,\n} from './styles';\n\nimport PowerOutageFlow from '../../../Services/PowerOutageFlow';\nimport DebitsConsultationModal from '../../../Services/DebitsConsultationModal';\nimport InstallmentPaymentModal from '../../../Services/InstallmentPaymentModal';\nimport EmailInvoice from '../../../Services/EmailInvoice';\nimport ExpirationChange from '../../../Services/DueDateChange';\nimport RequestList from '../../../Services/RequestList';\n\nimport Loading from '../../../Loading';\n\nimport { useCustomerService } from '../../../../hooks/customerService';\nimport { usePowerReconnectionService } from '../../../../hooks/powerReconnectionService';\nimport { usePowerOutageService } from '../../../../hooks/powerOutageService';\nimport { useChangeDueDateService } from '../../../../hooks/changeDueDateService';\n\nconst QuickMenu: React.FC = () => {\n  const [outagePowerOpen, setOutagePowerOpen] = useState(false);\n  const [debitsConsultationOpen, setDebitsConsultationOpen] = useState(false);\n  const [installmentPaymentOpen, setInstallmentPaymentOpen] = useState(false);\n  const [emailInvoiceOpen, setEmailInvoiceOpen] = useState(false);\n  const [changeDueDateOpen, setChangeDueDateOpen] = useState(false);\n  const [requestListOpen, setRequestListOpen] = useState(false);\n\n  const {\n    serviceNotes,\n    debits,\n    customer,\n    installation,\n    operatingCompany,\n    protocol,\n  } = useCustomerService();\n  const { ableToPowerOutage } = usePowerOutageService();\n  const {\n    ableToReconnection,\n    prepareForPowerReconnection,\n  } = usePowerReconnectionService();\n\n  const { ableToChangeDueDate } = useChangeDueDateService();\n\n  const [\n    { isLoading, message },\n    { start: startLoading, stop: stopLoading },\n  ] = useLoading();\n\n  async function toggleOutagePower(): Promise<void> {\n    if (\n      await ableToPowerOutage({\n        contractAccount: customer.contractAccount,\n        installation,\n        operatingCompany,\n        protocol: protocol || '00',\n        reference: customer.address.referencePoint\n          ? customer.address.referencePoint\n          : '',\n        serviceNotes,\n      })\n    ) {\n      setOutagePowerOpen(!outagePowerOpen);\n    }\n  }\n\n  async function togglePowerReconnection(): Promise<void> {\n    const responseAbleToReconnection = ableToReconnection({\n      contractAccount: customer.contractAccount,\n      serviceNotes,\n      installation,\n    });\n\n    if (!responseAbleToReconnection.ok) {\n      Swal.fire({\n        icon: 'warning',\n        title: 'Religação',\n        html: `<p>${\n          responseAbleToReconnection.error ||\n          'O cliente não está habilitado para gerar uma religação'\n        }</p>`,\n        confirmButtonText: `OK`,\n        confirmButtonColor: '#3c1490',\n      });\n    } else {\n      await prepareForPowerReconnection({\n        attendanceData: customer,\n        installation,\n        debits,\n        operatingCompany,\n        protocol: protocol || '00',\n      });\n    }\n  }\n\n  function toggleDebitsConsultation(): void {\n    if (\n      debits.installmentDebits.totalAmountInstallmentDebits === 0 &&\n      debits.invoiceDebits.totalAmountInvoiceDebits === 0\n    ) {\n      Swal.fire({\n        icon: 'warning',\n        title: 'Consulta de débitos',\n        html: '<p>O cliente não possui débitos</p>',\n        confirmButtonText: `OK`,\n        confirmButtonColor: '#3c1490',\n      });\n    } else {\n      setDebitsConsultationOpen(!debitsConsultationOpen);\n    }\n  }\n\n  function toggleInstallmentPayment(): void {\n    if (!debits.installmentDebits.installmentDebitDetails.length) {\n      Swal.fire({\n        icon: 'warning',\n        title: 'Parcelamento',\n        html: '<p>O cliente não possui negociações de parcelamento</p>',\n        confirmButtonText: `OK`,\n        confirmButtonColor: '#3c1490',\n      });\n    } else {\n      setInstallmentPaymentOpen(!installmentPaymentOpen);\n    }\n  }\n\n  function toggleEmailInvoice(): void {\n    if (!customer.contacts.email) {\n      Swal.fire({\n        icon: 'warning',\n        title: 'Fatura por e-mail',\n        html: '<p>O cliente não possui um e-mail cadastrado</p>',\n        confirmButtonText: `OK`,\n        confirmButtonColor: '#3c1490',\n      });\n    } else {\n      setEmailInvoiceOpen(!emailInvoiceOpen);\n    }\n  }\n\n  async function toggleChangeDueDate(): Promise<void> {\n    if (!changeDueDateOpen) {\n      startLoading('Verificando datas disponíveis ...');\n\n      const responseAbleToChangeDueDate = await ableToChangeDueDate({\n        contractAccount: customer.contractAccount,\n        stateCode: operatingCompany,\n      });\n\n      stopLoading();\n\n      if (!responseAbleToChangeDueDate.ok) {\n        Swal.fire({\n          icon: 'warning',\n          title: 'Alteração de Data Certa',\n          html: `<p>${\n            responseAbleToChangeDueDate.error ||\n            'O cliente não está habilitado para alteração de Data Certa'\n          }</p>`,\n          confirmButtonText: `OK`,\n          confirmButtonColor: '#3c1490',\n        });\n      } else {\n        setChangeDueDateOpen(!changeDueDateOpen);\n      }\n    } else {\n      setChangeDueDateOpen(!changeDueDateOpen);\n    }\n  }\n\n  function toggleRequestList(): void {\n    if (\n      !serviceNotes.openServiceNotes.length &&\n      !serviceNotes.closedServiceNotes.length\n    ) {\n      Swal.fire({\n        icon: 'warning',\n        title: 'Acompanhamento de protocolos',\n        html: '<p>O cliente não possui notas para serem exibidas.</p>',\n        confirmButtonText: `OK`,\n        confirmButtonColor: '#3c1490',\n      });\n    } else {\n      setRequestListOpen(!requestListOpen);\n    }\n  }\n\n  return (\n    <Container>\n      <h3>Menu rápido</h3>\n\n      <Content>\n        <MenuItem>\n          <MenuItemButton type=\"button\" onClick={toggleOutagePower}>\n            <BsLightningFill size={20} />\n          </MenuItemButton>\n\n          <MenuItemText>Falta de energia</MenuItemText>\n        </MenuItem>\n\n        <MenuItem>\n          <MenuItemButton type=\"button\" onClick={togglePowerReconnection}>\n            <FaPlug size={20} />\n          </MenuItemButton>\n\n          <MenuItemText>Religação</MenuItemText>\n        </MenuItem>\n\n        <MenuItem>\n          <MenuItemButton type=\"button\" onClick={toggleDebitsConsultation}>\n            <IoDocumentText size={20} />\n          </MenuItemButton>\n\n          <MenuItemText>Consulta de débitos</MenuItemText>\n        </MenuItem>\n\n        {/* <MenuItem>\n          <MenuItemButton type=\"button\">\n            <FaDollarSign size={20} />\n          </MenuItemButton>\n\n          <MenuItemText>Baixa Renda</MenuItemText>\n        </MenuItem> */}\n\n        <MenuItem>\n          <MenuItemButton type=\"button\" onClick={toggleInstallmentPayment}>\n            <FaDivide size={20} />\n          </MenuItemButton>\n\n          <MenuItemText>Entrada de parcelamento</MenuItemText>\n        </MenuItem>\n\n        <MenuItem\n          disabled={!(operatingCompany === '98' || operatingCompany === '95')}\n        >\n          <MenuItemButton type=\"button\" onClick={toggleEmailInvoice}>\n            <IoMdMail size={20} />\n          </MenuItemButton>\n\n          <MenuItemText>Fatura por e-mail</MenuItemText>\n        </MenuItem>\n\n        <MenuItem>\n          <MenuItemButton type=\"button\" onClick={toggleChangeDueDate}>\n            <FaCalendarAlt size={20} />\n          </MenuItemButton>\n\n          <MenuItemText>Data certa</MenuItemText>\n        </MenuItem>\n\n        <MenuItem>\n          <MenuItemButton type=\"button\" onClick={toggleRequestList}>\n            <MdReceipt size={20} />\n          </MenuItemButton>\n\n          <MenuItemText>Acompanhamento de protocolos</MenuItemText>\n        </MenuItem>\n      </Content>\n\n      <PowerOutageFlow\n        modalOpen={outagePowerOpen}\n        toggleModal={toggleOutagePower}\n      />\n\n      <DebitsConsultationModal\n        isOpen={debitsConsultationOpen}\n        setIsOpen={toggleDebitsConsultation}\n      />\n      <InstallmentPaymentModal\n        isOpen={installmentPaymentOpen}\n        setIsOpen={toggleInstallmentPayment}\n      />\n\n      <EmailInvoice isOpen={emailInvoiceOpen} setIsOpen={toggleEmailInvoice} />\n\n      <ExpirationChange\n        isOpen={changeDueDateOpen}\n        setIsOpen={toggleChangeDueDate}\n      />\n\n      <RequestList isOpen={requestListOpen} setIsOpen={toggleRequestList} />\n\n      {isLoading && (\n        <Loading isOpen={isLoading} message={message} setIsOpen={stopLoading} />\n      )}\n    </Container>\n  );\n};\n\nexport default QuickMenu;\n","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/index.tsx",["451"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/changeDueDateService.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/App.tsx",[],{"ruleId":"452","severity":1,"message":"453","line":2,"column":16,"nodeType":"454","messageId":"455","endLine":2,"endColumn":20},{"ruleId":"456","replacedBy":"457"},{"ruleId":"458","replacedBy":"459"},{"ruleId":"460","replacedBy":"461"},{"ruleId":"462","replacedBy":"463"},{"ruleId":"464","replacedBy":"465"},{"ruleId":"466","severity":1,"message":"467","line":87,"column":3,"nodeType":"454","messageId":"468","endLine":87,"endColumn":28},{"ruleId":"469","severity":1,"message":"470","line":87,"column":25,"nodeType":"471","messageId":"472","endLine":87,"endColumn":28,"suggestions":"473"},{"ruleId":"469","severity":1,"message":"470","line":152,"column":36,"nodeType":"471","messageId":"472","endLine":152,"endColumn":39,"suggestions":"474"},{"ruleId":"469","severity":1,"message":"470","line":156,"column":13,"nodeType":"471","messageId":"472","endLine":156,"endColumn":16,"suggestions":"475"},{"ruleId":"469","severity":1,"message":"470","line":168,"column":13,"nodeType":"471","messageId":"472","endLine":168,"endColumn":16,"suggestions":"476"},{"ruleId":"469","severity":1,"message":"470","line":204,"column":12,"nodeType":"471","messageId":"472","endLine":204,"endColumn":15,"suggestions":"477"},{"ruleId":"469","severity":1,"message":"470","line":223,"column":12,"nodeType":"471","messageId":"472","endLine":223,"endColumn":15,"suggestions":"478"},{"ruleId":"452","severity":1,"message":"479","line":18,"column":3,"nodeType":"454","messageId":"455","endLine":18,"endColumn":12},{"ruleId":"456","replacedBy":"480"},{"ruleId":"458","replacedBy":"481"},{"ruleId":"460","replacedBy":"482"},{"ruleId":"462","replacedBy":"483"},{"ruleId":"464","replacedBy":"484"},{"ruleId":"452","severity":1,"message":"485","line":8,"column":40,"nodeType":"454","messageId":"455","endLine":8,"endColumn":50},{"ruleId":"452","severity":1,"message":"486","line":8,"column":52,"nodeType":"454","messageId":"455","endLine":8,"endColumn":61},{"ruleId":"456","replacedBy":"487"},{"ruleId":"458","replacedBy":"488"},{"ruleId":"460","replacedBy":"489"},{"ruleId":"462","replacedBy":"490"},{"ruleId":"464","replacedBy":"491"},{"ruleId":"469","severity":1,"message":"470","line":7,"column":13,"nodeType":"471","messageId":"472","endLine":7,"endColumn":16,"suggestions":"492"},{"ruleId":"456","replacedBy":"493"},{"ruleId":"458","replacedBy":"494"},{"ruleId":"460","replacedBy":"495"},{"ruleId":"462","replacedBy":"496"},{"ruleId":"464","replacedBy":"497"},{"ruleId":"498","severity":1,"message":"499","line":272,"column":6,"nodeType":"500","endLine":272,"endColumn":32,"suggestions":"501"},{"ruleId":"456","replacedBy":"502"},{"ruleId":"458","replacedBy":"503"},{"ruleId":"460","replacedBy":"504"},{"ruleId":"462","replacedBy":"505"},{"ruleId":"464","replacedBy":"506"},{"ruleId":"456","replacedBy":"507"},{"ruleId":"458","replacedBy":"508"},{"ruleId":"460","replacedBy":"509"},{"ruleId":"462","replacedBy":"510"},{"ruleId":"464","replacedBy":"511"},{"ruleId":"452","severity":1,"message":"512","line":7,"column":8,"nodeType":"454","messageId":"455","endLine":7,"endColumn":27},{"ruleId":"469","severity":1,"message":"470","line":157,"column":20,"nodeType":"471","messageId":"472","endLine":157,"endColumn":23,"suggestions":"513"},{"ruleId":"456","replacedBy":"514"},{"ruleId":"458","replacedBy":"515"},{"ruleId":"460","replacedBy":"516"},{"ruleId":"462","replacedBy":"517"},{"ruleId":"464","replacedBy":"518"},{"ruleId":"456","replacedBy":"519"},{"ruleId":"458","replacedBy":"520"},{"ruleId":"460","replacedBy":"521"},{"ruleId":"462","replacedBy":"522"},{"ruleId":"464","replacedBy":"523"},{"ruleId":"456","replacedBy":"524"},{"ruleId":"458","replacedBy":"525"},{"ruleId":"460","replacedBy":"526"},{"ruleId":"462","replacedBy":"527"},{"ruleId":"464","replacedBy":"528"},{"ruleId":"452","severity":1,"message":"529","line":55,"column":27,"nodeType":"454","messageId":"455","endLine":55,"endColumn":28},{"ruleId":"452","severity":1,"message":"530","line":43,"column":20,"nodeType":"454","messageId":"455","endLine":43,"endColumn":25},{"ruleId":"452","severity":1,"message":"531","line":43,"column":27,"nodeType":"454","messageId":"455","endLine":43,"endColumn":32},{"ruleId":"452","severity":1,"message":"532","line":32,"column":8,"nodeType":"454","messageId":"455","endLine":32,"endColumn":20},{"ruleId":"469","severity":1,"message":"470","line":37,"column":21,"nodeType":"471","messageId":"472","endLine":37,"endColumn":24,"suggestions":"533"},{"ruleId":"469","severity":1,"message":"470","line":40,"column":23,"nodeType":"471","messageId":"472","endLine":40,"endColumn":26,"suggestions":"534"},{"ruleId":"469","severity":1,"message":"470","line":36,"column":21,"nodeType":"471","messageId":"472","endLine":36,"endColumn":24,"suggestions":"535"},{"ruleId":"469","severity":1,"message":"470","line":39,"column":23,"nodeType":"471","messageId":"472","endLine":39,"endColumn":26,"suggestions":"536"},{"ruleId":"452","severity":1,"message":"537","line":1,"column":41,"nodeType":"454","messageId":"455","endLine":1,"endColumn":47},{"ruleId":"452","severity":1,"message":"538","line":4,"column":18,"nodeType":"454","messageId":"455","endLine":4,"endColumn":30},{"ruleId":"452","severity":1,"message":"539","line":16,"column":21,"nodeType":"454","messageId":"455","endLine":16,"endColumn":33},"@typescript-eslint/no-unused-vars","'uuid' is defined but never used.","Identifier","unusedVar","lines-around-directive",["540"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"@typescript-eslint/explicit-module-boundary-types","Argument 'responseInstallation' should be typed with a non-any type.","anyTypedArg","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["541","542"],["543","544"],["545","546"],["547","548"],["549","550"],["551","552"],"'setIsOpen' is defined but never used.",["540"],[],[],[],[],"'OwnerLabel' is defined but never used.","'OwnerName' is defined but never used.",["540"],[],[],[],[],["553","554"],["540"],[],[],[],[],"react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'operatingCompany'. Either include it or remove the dependency array.","ArrayExpression",["555"],["540"],[],[],[],[],["540"],[],[],[],[],"'addZeroesToContract' is defined but never used.",["556","557"],["540"],[],[],[],[],["540"],[],[],[],[],["540"],[],[],[],[],"'i' is defined but never used.","'index' is defined but never used.","'event' is defined but never used.","'OutlineInput' is defined but never used.",["558","559"],["560","561"],["562","563"],["564","565"],"'useRef' is defined but never used.","'FaDollarSign' is defined but never used.","'setQuestions' is assigned a value but never used.","padding-line-between-statements",{"messageId":"566","fix":"567","desc":"568"},{"messageId":"569","fix":"570","desc":"571"},{"messageId":"566","fix":"572","desc":"568"},{"messageId":"569","fix":"573","desc":"571"},{"messageId":"566","fix":"574","desc":"568"},{"messageId":"569","fix":"575","desc":"571"},{"messageId":"566","fix":"576","desc":"568"},{"messageId":"569","fix":"577","desc":"571"},{"messageId":"566","fix":"578","desc":"568"},{"messageId":"569","fix":"579","desc":"571"},{"messageId":"566","fix":"580","desc":"568"},{"messageId":"569","fix":"581","desc":"571"},{"messageId":"566","fix":"582","desc":"568"},{"messageId":"569","fix":"583","desc":"571"},{"desc":"584","fix":"585"},{"messageId":"566","fix":"586","desc":"568"},{"messageId":"569","fix":"587","desc":"571"},{"messageId":"566","fix":"588","desc":"568"},{"messageId":"569","fix":"589","desc":"571"},{"messageId":"566","fix":"590","desc":"568"},{"messageId":"569","fix":"591","desc":"571"},{"messageId":"566","fix":"592","desc":"568"},{"messageId":"569","fix":"593","desc":"571"},{"messageId":"566","fix":"594","desc":"568"},{"messageId":"569","fix":"595","desc":"571"},"suggestUnknown",{"range":"596","text":"597"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"596","text":"598"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"599","text":"597"},{"range":"599","text":"598"},{"range":"600","text":"597"},{"range":"600","text":"598"},{"range":"601","text":"597"},{"range":"601","text":"598"},{"range":"602","text":"597"},{"range":"602","text":"598"},{"range":"603","text":"597"},{"range":"603","text":"598"},{"range":"604","text":"597"},{"range":"604","text":"598"},"Update the dependencies array to be: [debits.invoiceDebits.invoiceDebitDetails, handleClickDebit, operatingCompany]",{"range":"605","text":"606"},{"range":"607","text":"597"},{"range":"607","text":"598"},{"range":"608","text":"597"},{"range":"608","text":"598"},{"range":"609","text":"597"},{"range":"609","text":"598"},{"range":"610","text":"597"},{"range":"610","text":"598"},{"range":"611","text":"597"},{"range":"611","text":"598"},[2846,2849],"unknown","never",[4530,4533],[4726,4729],[5147,5150],[6217,6220],[6861,6864],[153,156],[7700,7726],"[debits.invoiceDebits.invoiceDebitDetails, handleClickDebit, operatingCompany]",[3796,3799],[1011,1014],[1101,1104],[998,1001],[1088,1091]]