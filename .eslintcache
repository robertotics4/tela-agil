[{"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/index.tsx":"1","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/styles/global.ts":"2","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/auth.tsx":"3","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/debitsConsultation.tsx":"4","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/powerOutageService.tsx":"5","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/services/authenticationApi.ts":"6","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/extractResponseData.ts":"7","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/inputMasks.ts":"8","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/ToastContainer/index.tsx":"9","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Loading/index.tsx":"10","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/index.tsx":"11","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/ToastContainer/Toast/index.tsx":"12","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Input/styles.ts":"13","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/index.tsx":"14","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/CustomRadioGroup/index.tsx":"15","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/OutlineInput/index.tsx":"16","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/Header/styles.ts":"17","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/CustomRadioGroup/RadioOptions/styles.ts":"18","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Tooltip/index.tsx":"19","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ContractData/index.tsx":"20","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Tooltip/styles.ts":"21","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/Header/TagInfo/styles.ts":"22","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ClientData/styles.ts":"23","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/index.tsx":"24","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/whatsappSending.tsx":"25","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/alert.tsx":"26","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/pages/SignIn/index.tsx":"27","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/AlertModal/styles.ts":"28","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/LeftBar/index.tsx":"29","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/styles.ts":"30","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/CustomRadioGroup/styles.ts":"31","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/QuickMenu/index.tsx":"32","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/InstallmentPaymentModal/index.tsx":"33","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/index.tsx":"34","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/getUnformattedPhone.ts":"35","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DebitsConsultationModal/styles.ts":"36","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DueDateChange/styles.ts":"37","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/EmailInvoice/styles.tsx":"38","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Modal/index.tsx":"39","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/ServiceNotesTable/index.tsx":"40","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/ServiceNotesTable/styles.ts":"41","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/App.tsx":"42","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/toast.tsx":"43","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/customerService.tsx":"44","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/getValidationErrors.ts":"45","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/AlertModal/index.tsx":"46","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/styles.ts":"47","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/LeftBar/styles.ts":"48","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/OutlineInputMask/index.tsx":"49","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/OutlineInput/styles.ts":"50","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DebitsConsultationModal/index.tsx":"51","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/questions/PowerOutageQuestions.ts":"52","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/StatusIndicator/index.tsx":"53","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/InputMask/styles.ts":"54","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/StatusIndicator/styles.ts":"55","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/index.tsx":"56","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/styles.ts":"57","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/StepModal/index.tsx":"58","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/StepModal/styles.ts":"59","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/EmailInvoice/index.tsx":"60","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/InstallmentPaymentModal/styles.ts":"61","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DueDateChange/index.tsx":"62","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/InputMask/index.tsx":"63","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerReconnectionFlow/DebitsValidationModal/styles.ts":"64","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerReconnectionFlow/DebitsValidationModal/index.tsx":"65","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/routes/Route.tsx":"66","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/pages/Dashboard/index.tsx":"67","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/ToastContainer/styles.ts":"68","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Input/index.tsx":"69","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Loading/styles.ts":"70","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/Header/index.tsx":"71","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/Header/TagInfo/index.tsx":"72","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ContractData/styles.ts":"73","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerReconnectionFlow/index.tsx":"74","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/ToastContainer/Toast/styles.ts":"75","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/powerReconnectionService.tsx":"76","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/routes/index.tsx":"77","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/timer.tsx":"78","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/getInstallationSubclassName.ts":"79","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/pages/SignIn/styles.ts":"80","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/OutlineInputMask/styles.ts":"81","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ClientData/index.tsx":"82","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Button/styles.ts":"83","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/pages/Dashboard/styles.ts":"84","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Button/index.tsx":"85","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/CustomRadioGroup/RadioOptions/index.tsx":"86","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/QuickMenu/styles.ts":"87","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/services/yaloApi.ts":"88","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/services/eqtlBarApi.ts":"89"},{"size":479,"mtime":1614860182232,"results":"90","hashOfConfig":"91"},{"size":534,"mtime":1614860182232,"results":"92","hashOfConfig":"91"},{"size":2120,"mtime":1614860182232,"results":"93","hashOfConfig":"91"},{"size":1527,"mtime":1614860182232,"results":"94","hashOfConfig":"91"},{"size":3464,"mtime":1614978136381,"results":"95","hashOfConfig":"91"},{"size":292,"mtime":1614860182232,"results":"96","hashOfConfig":"91"},{"size":7656,"mtime":1614860182232,"results":"97","hashOfConfig":"91"},{"size":1732,"mtime":1614860182232,"results":"98","hashOfConfig":"91"},{"size":785,"mtime":1614860182232,"results":"99","hashOfConfig":"91"},{"size":1081,"mtime":1614860182228,"results":"100","hashOfConfig":"91"},{"size":296,"mtime":1614860182228,"results":"101","hashOfConfig":"91"},{"size":1180,"mtime":1614860182232,"results":"102","hashOfConfig":"91"},{"size":1273,"mtime":1614860182228,"results":"103","hashOfConfig":"91"},{"size":419,"mtime":1614860182228,"results":"104","hashOfConfig":"91"},{"size":366,"mtime":1614860182228,"results":"105","hashOfConfig":"91"},{"size":1655,"mtime":1614860182228,"results":"106","hashOfConfig":"91"},{"size":980,"mtime":1614860182228,"results":"107","hashOfConfig":"91"},{"size":363,"mtime":1614860182228,"results":"108","hashOfConfig":"91"},{"size":343,"mtime":1614860182232,"results":"109","hashOfConfig":"91"},{"size":1460,"mtime":1614860182228,"results":"110","hashOfConfig":"91"},{"size":743,"mtime":1614860182232,"results":"111","hashOfConfig":"91"},{"size":572,"mtime":1614860182228,"results":"112","hashOfConfig":"91"},{"size":807,"mtime":1614860182228,"results":"113","hashOfConfig":"91"},{"size":1183,"mtime":1614898393797,"results":"114","hashOfConfig":"91"},{"size":7004,"mtime":1614860182232,"results":"115","hashOfConfig":"91"},{"size":1393,"mtime":1614899292880,"results":"116","hashOfConfig":"91"},{"size":3082,"mtime":1614860182232,"results":"117","hashOfConfig":"91"},{"size":844,"mtime":1614883272890,"results":"118","hashOfConfig":"91"},{"size":5157,"mtime":1615220194612,"results":"119","hashOfConfig":"91"},{"size":422,"mtime":1614860182228,"results":"120","hashOfConfig":"91"},{"size":186,"mtime":1614860182228,"results":"121","hashOfConfig":"91"},{"size":5912,"mtime":1614968345770,"results":"122","hashOfConfig":"91"},{"size":5684,"mtime":1614860182228,"results":"123","hashOfConfig":"91"},{"size":3133,"mtime":1614887046023,"results":"124","hashOfConfig":"91"},{"size":262,"mtime":1614860182232,"results":"125","hashOfConfig":"91"},{"size":2871,"mtime":1615209771089,"results":"126","hashOfConfig":"91"},{"size":1222,"mtime":1614860182228,"results":"127","hashOfConfig":"91"},{"size":751,"mtime":1614860182228,"results":"128","hashOfConfig":"91"},{"size":893,"mtime":1614860182228,"results":"129","hashOfConfig":"91"},{"size":1803,"mtime":1614886338316,"results":"130","hashOfConfig":"91"},{"size":1200,"mtime":1614886650378,"results":"131","hashOfConfig":"91"},{"size":352,"mtime":1615227940211,"results":"132","hashOfConfig":"91"},{"size":1483,"mtime":1614860182232,"results":"133","hashOfConfig":"91"},{"size":7097,"mtime":1615231436434,"results":"134","hashOfConfig":"91"},{"size":357,"mtime":1614860182232,"results":"135","hashOfConfig":"91"},{"size":1668,"mtime":1614899414604,"results":"136","hashOfConfig":"91"},{"size":135,"mtime":1614860182228,"results":"137","hashOfConfig":"91"},{"size":2177,"mtime":1614860182228,"results":"138","hashOfConfig":"91"},{"size":1671,"mtime":1614860182228,"results":"139","hashOfConfig":"91"},{"size":1448,"mtime":1614860182228,"results":"140","hashOfConfig":"91"},{"size":8234,"mtime":1614979212186,"results":"141","hashOfConfig":"91"},{"size":3327,"mtime":1614860182228,"results":"142","hashOfConfig":"91"},{"size":353,"mtime":1614860182228,"results":"143","hashOfConfig":"91"},{"size":1138,"mtime":1614860182228,"results":"144","hashOfConfig":"91"},{"size":629,"mtime":1614860182228,"results":"145","hashOfConfig":"91"},{"size":1200,"mtime":1614860182228,"results":"146","hashOfConfig":"91"},{"size":275,"mtime":1614886631698,"results":"147","hashOfConfig":"91"},{"size":4464,"mtime":1614968587718,"results":"148","hashOfConfig":"91"},{"size":852,"mtime":1614860182228,"results":"149","hashOfConfig":"91"},{"size":3601,"mtime":1614860182228,"results":"150","hashOfConfig":"91"},{"size":2490,"mtime":1614860182228,"results":"151","hashOfConfig":"91"},{"size":5255,"mtime":1614860182228,"results":"152","hashOfConfig":"91"},{"size":1609,"mtime":1614860182228,"results":"153","hashOfConfig":"91"},{"size":852,"mtime":1614889628241,"results":"154","hashOfConfig":"91"},{"size":4514,"mtime":1614968759808,"results":"155","hashOfConfig":"91"},{"size":802,"mtime":1614860182232,"results":"156","hashOfConfig":"91"},{"size":615,"mtime":1614860182232,"results":"157","hashOfConfig":"91"},{"size":162,"mtime":1614860182232,"results":"158","hashOfConfig":"91"},{"size":1557,"mtime":1614860182228,"results":"159","hashOfConfig":"91"},{"size":234,"mtime":1614860182228,"results":"160","hashOfConfig":"91"},{"size":1447,"mtime":1614860182228,"results":"161","hashOfConfig":"91"},{"size":414,"mtime":1614860182228,"results":"162","hashOfConfig":"91"},{"size":705,"mtime":1614860182228,"results":"163","hashOfConfig":"91"},{"size":2786,"mtime":1614894518449,"results":"164","hashOfConfig":"91"},{"size":1170,"mtime":1614860182232,"results":"165","hashOfConfig":"91"},{"size":1204,"mtime":1614965895057,"results":"166","hashOfConfig":"91"},{"size":379,"mtime":1614860182232,"results":"167","hashOfConfig":"91"},{"size":1265,"mtime":1614860182232,"results":"168","hashOfConfig":"91"},{"size":2199,"mtime":1614860182232,"results":"169","hashOfConfig":"91"},{"size":758,"mtime":1614860182232,"results":"170","hashOfConfig":"91"},{"size":1271,"mtime":1614860182228,"results":"171","hashOfConfig":"91"},{"size":3318,"mtime":1614860182228,"results":"172","hashOfConfig":"91"},{"size":377,"mtime":1614860182228,"results":"173","hashOfConfig":"91"},{"size":266,"mtime":1614860182232,"results":"174","hashOfConfig":"91"},{"size":316,"mtime":1614860182228,"results":"175","hashOfConfig":"91"},{"size":1765,"mtime":1614860182228,"results":"176","hashOfConfig":"91"},{"size":1125,"mtime":1614860182228,"results":"177","hashOfConfig":"91"},{"size":255,"mtime":1614860182232,"results":"178","hashOfConfig":"91"},{"size":266,"mtime":1614860182232,"results":"179","hashOfConfig":"91"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},"11dd9mg",{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"185"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"185"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"231"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"204"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"231"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"204"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"210"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"185"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"277"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"231"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"296"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"231"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"231"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"307"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"204"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"231"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"326"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"204"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"326"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"231"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"326"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352","usedDeprecatedRules":"191"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"185"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"277"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/index.tsx",[],["384","385","386","387","388"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/styles/global.ts",[],["389","390","391","392","393"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/auth.tsx",[],["394","395","396","397","398"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/debitsConsultation.tsx",[],["399","400","401","402","403"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/powerOutageService.tsx",[],["404","405","406","407","408"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/services/authenticationApi.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/extractResponseData.ts",["409","410","411","412","413","414"],"import { AxiosResponse } from 'axios';\nimport { parseISO } from 'date-fns';\n\nimport Customer from '../types/Customer';\nimport Installation from '../types/Installation';\nimport Debits, { InvoiceDebit, InstallmentDebit } from '../types/Debits';\nimport ServiceNotes, { OpenNote, ClosedNote } from '../types/ServiceNotes';\n\nimport { phoneMask } from './inputMasks';\n\nimport getInstallationSubclassName from './getInstallationSubclassName';\n\ninterface ExtractedData {\n  customer: Customer;\n  installation: Installation;\n  debits: Debits;\n  serviceNotes: ServiceNotes;\n}\n\ninterface ResponsePhone {\n  tipoTelefone: string;\n  numeroTelefone: string;\n}\n\nfunction getCustomerData(response: AxiosResponse, stateCode: string): Customer {\n  const responseCustomer = response.data.data.cliente[0];\n\n  const customer: Customer = {\n    contractAccount: responseCustomer.contaContrato,\n    name: responseCustomer.nome,\n    surname: responseCustomer.sobrenome,\n    motherName: responseCustomer.nomeMae,\n    dayOfBirth: parseISO(responseCustomer.dataNascimento),\n    rg: responseCustomer.numeroRg,\n    cpf: responseCustomer.numeroCpf,\n    contacts: {\n      email: responseCustomer.contatos.email,\n    },\n    address: {\n      publicArea: responseCustomer.endereco.logradouro,\n      number: responseCustomer.endereco.numero,\n      neighborhood: responseCustomer.endereco.bairro,\n      city: responseCustomer.endereco.cidade,\n      uf: responseCustomer.endereco.uf,\n      postalCode: responseCustomer.endereco.cep,\n    },\n    phaseNumber: Number(responseCustomer.numeroFases),\n    bp: responseCustomer.bp,\n    installationNumber: responseCustomer.numeroInstalacao,\n  };\n\n  if (stateCode === '82' || stateCode === '86') {\n    customer.contractAccount = responseCustomer.contaContrato.toString();\n\n    const landline = responseCustomer.contatos.telefones\n      .filter(\n        (telefone: ResponsePhone) =>\n          telefone.numeroTelefone && telefone.tipoTelefone === 'R',\n      )\n      .map((telefone: ResponsePhone) => phoneMask(telefone.numeroTelefone));\n\n    const cellPhone = responseCustomer.contatos.telefones\n      .filter(\n        (telefone: ResponsePhone) =>\n          telefone.numeroTelefone && telefone.tipoTelefone === 'C',\n      )\n      .map((telefone: ResponsePhone) => phoneMask(telefone.numeroTelefone));\n\n    customer.contacts = {\n      phones: {\n        landline,\n        cellPhone,\n      },\n      email: responseCustomer.contatos.email,\n    };\n\n    customer.installationNumber = responseCustomer.numeroInstalacao.toString();\n\n    customer.address.complement = responseCustomer.endereco.complemento;\n  }\n\n  return customer;\n}\n\nfunction getInstallationData(\n  responseInstallation: any,\n  stateCode: string,\n): Installation {\n  const {\n    status,\n    corteAndamento,\n    desligaAndamento,\n    faltaEnergiaIndividual,\n    faltaEnergiaColetiva,\n    desligamentoProgramado,\n    faltaFases,\n    faltaEnergiaAvaliacaoTecnica,\n  } = responseInstallation;\n\n  const {\n    classe,\n    subclasse,\n    tarifa,\n    grupoTensao,\n    tipoPagamento,\n    fase,\n    localidade,\n    bomPagador,\n  } = responseInstallation.dadosTecnicos;\n\n  const {\n    latitude,\n    longitude,\n  } = responseInstallation.dadosTecnicos.coordenadaGeografica;\n\n  const installation: Installation = {\n    status,\n    cutInProgress: true && corteAndamento === 'S',\n    turnOffInProgress: true && desligaAndamento === 'S',\n    individualPowerOutage: true && faltaEnergiaIndividual === 'S',\n    collectivePowerOutage: true && faltaEnergiaColetiva === 'S',\n    scheduledShutdown: true && desligamentoProgramado === 'S',\n    powerPhaseOutage: true && faltaFases === 'S',\n    powerOutageTechnicalEvaluation:\n      true && faltaEnergiaAvaliacaoTecnica === 'S',\n    technicalData: {\n      class: classe,\n      subclass: subclasse,\n      tariff: tarifa,\n      tensionGroup: grupoTensao,\n      geographicCoordinates: {\n        latitude,\n        longitude,\n      },\n      paymentType: tipoPagamento,\n      phase: Number(fase),\n      locality: localidade,\n      goodPayer: true && bomPagador === 'S',\n    },\n  };\n\n  if (stateCode === '98' || stateCode === '95') {\n    installation.technicalData.subclass = getInstallationSubclassName(\n      installation.technicalData.subclass,\n    );\n  }\n\n  return installation;\n}\n\nfunction getDebits(responseDebits: any, stateCode: string): Debits {\n  const { debitosFatura, debitosParcelamento } = responseDebits;\n\n  const invoiceDebits: InvoiceDebit[] = debitosFatura.detalhesDebitoFatura.map(\n    (debit: any) => {\n      return {\n        overdueInvoiceNumber: debit.numeroFaturaVencida,\n        dueDate: parseISO(debit.dataVencimento),\n        invoiceAmount: Number(debit.valorFatura),\n        invoiceReference: debit.referenciaFatura,\n        paymentCode: debit.codigoPagamento,\n      };\n    },\n  );\n\n  const installmentDebits: InstallmentDebit[] = debitosParcelamento.detalhesDebitoParcelamento.map(\n    (debit: any) => {\n      const parsedDebit: InstallmentDebit = {\n        billingDocumentNumber: debit.numeroDocumentoCobranca,\n        invoiceAmount: Number(debit.valorFatura.toString().trim()),\n        invoiceReference: '',\n        paymentCode: debit.codigoPagamento,\n      };\n\n      if (stateCode === '82' || stateCode === '86') {\n        parsedDebit.invoiceReference = debit.referenciaFatura;\n      }\n\n      return parsedDebit;\n    },\n  );\n\n  const debits: Debits = {\n    invoiceDebits: {\n      invoiceDebitDetails: invoiceDebits,\n      totalAmountInvoiceDebits: debitosFatura.valorTotalDebitoFatura,\n    },\n    installmentDebits: {\n      installmentDebitDetails: installmentDebits,\n      totalAmountInstallmentDebits:\n        debitosParcelamento.valorTotalDebitoParcelamento,\n    },\n  };\n\n  return debits;\n}\n\nfunction getServiceNotes(response: AxiosResponse): ServiceNotes {\n  const responseNotes = response.data.data.notas;\n\n  const mappedOpenServiceNotes: OpenNote[] = responseNotes.notasAbertas.map(\n    (note: any) => {\n      const openServiceNote: OpenNote = {\n        type: note.tipoNota,\n        typeDescription: note.descricaoTipoNota,\n        codeGroup: note.grupoCode,\n        codeGroupDescription: note.descricaoGrupoCode,\n        code: note.code,\n        codeDescription: note.descricaoCode,\n        openingDate: parseISO(note.dataAbertura),\n        status: note.status,\n        rejectionCode: note.codigoRejeicao,\n        rejectionCodeDescription: note.descricaoCodigoRejeicao,\n      };\n\n      return openServiceNote;\n    },\n  );\n\n  const mappedClosedServiceNotes: ClosedNote[] = responseNotes.notasEncerradas.map(\n    (note: any) => {\n      const openServiceNote: ClosedNote = {\n        type: note.tipoNota,\n        typeDescription: note.descricaoNota,\n        codeGroup: note.grupoCode,\n        codeGroupDescription: note.descricaoGrupoCode,\n        code: note.code,\n        codeDescription: note.descricaoCode,\n        openingDate: parseISO(note.dataAbertura),\n        conclusionDate: parseISO(note.dataConclusao),\n      };\n\n      return openServiceNote;\n    },\n  );\n\n  const serviceNotes: ServiceNotes = {\n    openServiceNotes: mappedOpenServiceNotes,\n    closedServiceNotes: mappedClosedServiceNotes,\n  };\n\n  return serviceNotes;\n}\n\nfunction extractResponseData(\n  response: AxiosResponse,\n  stateCode: string,\n): ExtractedData {\n  const { data: responseData } = response.data;\n\n  const customer = getCustomerData(response, stateCode);\n  const installation = getInstallationData(responseData.instalacao, stateCode);\n  const debits = getDebits(responseData.debitos, stateCode);\n  const serviceNotes = getServiceNotes(response);\n\n  return {\n    customer,\n    installation,\n    debits,\n    serviceNotes,\n  };\n}\n\nexport default extractResponseData;\n","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/inputMasks.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/ToastContainer/index.tsx",[],["415","416","417","418","419"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Loading/index.tsx",["420"],"import React, { useState, useEffect } from 'react';\nimport Rodal from 'rodal';\nimport Spinner from 'react-spinkit';\n\nimport 'rodal/lib/rodal.css';\n\nimport { Content } from './styles';\n\ninterface LoadingModalProps {\n  isOpen: boolean;\n  message?: string;\n  setIsOpen: () => void;\n}\n\nconst LoadingModal: React.FC<LoadingModalProps> = ({\n  isOpen,\n  message,\n  setIsOpen,\n}) => {\n  const [modalStatus, setModalStatus] = useState(isOpen);\n\n  useEffect(() => {\n    setModalStatus(isOpen);\n  }, [isOpen]);\n\n  return (\n    <Rodal\n      visible={modalStatus}\n      showCloseButton={false}\n      customStyles={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        background: 'transparent',\n        border: 'none',\n        boxShadow: 'none',\n        width: 'fit-content',\n      }}\n      customMaskStyles={{\n        background: 'rgba(0, 0, 0, 0.6)',\n      }}\n    >\n      <Content>\n        <Spinner name=\"ball-pulse-sync\" fadeIn=\"none\" color=\"#fff\" />\n        <h2>{message}</h2>\n      </Content>\n    </Rodal>\n  );\n};\n\nexport default LoadingModal;\n","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/index.tsx",[],["421","422","423","424","425"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/ToastContainer/Toast/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Input/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/CustomRadioGroup/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/OutlineInput/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/Header/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/CustomRadioGroup/RadioOptions/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Tooltip/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ContractData/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Tooltip/styles.ts",[],["426","427","428","429","430"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/Header/TagInfo/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ClientData/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/whatsappSending.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/alert.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/pages/SignIn/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/AlertModal/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/LeftBar/index.tsx",["431"],"import React, { useCallback, useEffect, useMemo, useRef } from 'react';\nimport { FiPower } from 'react-icons/fi';\nimport { FormHandles } from '@unform/core';\nimport { Form } from '@unform/web';\nimport * as Yup from 'yup';\nimport { useLoading } from 'react-use-loading';\nimport { format } from 'date-fns';\nimport { useStopwatch } from 'react-timer-hook';\n\nimport getValidationErrors from '../../utils/getValidationErrors';\n\nimport {\n  Container,\n  Logo,\n  WelcomeText,\n  Username,\n  UserMenu,\n  LogoutButton,\n  LogoutButtonText,\n  ServiceForm,\n  StartServiceButton,\n  FinishServiceButton,\n  Cronometro,\n} from './styles';\n\nimport OutlineInput from '../OutlineInput';\nimport OutlineInputMask from '../OutlineInputMask';\nimport CustomRadioGroup from '../CustomRadioGroup';\nimport RadioOptions from '../CustomRadioGroup/RadioOptions';\nimport Loading from '../Loading';\n\nimport logoWhiteImg from '../../assets/logo-white.svg';\n\nimport { useAuth } from '../../hooks/auth';\nimport { useCustomerService } from '../../hooks/customerService';\n\ninterface StartServiceFormData {\n  state: string;\n  contract: string;\n  cpf: string;\n}\n\nconst LeftBar: React.FC = () => {\n  const { user, signOut } = useAuth();\n  const [{ isLoading, message }, { start, stop }] = useLoading();\n\n  const {\n    start: startTimer,\n    reset: resetTimer,\n    isRunning,\n    hours,\n    seconds,\n    minutes,\n  } = useStopwatch({\n    autoStart: false,\n  });\n\n  const {\n    startService,\n    customer,\n    finishService,\n    serviceStarted,\n  } = useCustomerService();\n\n  const formRef = useRef<FormHandles>(null);\n\n  const handleSubmit = useCallback(\n    async (data: StartServiceFormData) => {\n      try {\n        start('Localizando cliente ...');\n\n        formRef.current?.setErrors({});\n\n        const schema = Yup.object().shape({\n          contract: Yup.string().when('cpf', {\n            is: (val: string) => !val.length,\n            then: Yup.string().required('Conta contrato obrigatória'),\n            otherwise: Yup.string(),\n          }),\n          cpf: Yup.string(),\n        });\n\n        await schema.validate(data, {\n          abortEarly: false,\n        });\n\n        await startService({\n          stateCode: data.state[0],\n          contract: data.contract,\n          cpf: data.cpf.replaceAll('-', '').replaceAll('.', ''),\n        });\n      } catch (err) {\n        if (err instanceof Yup.ValidationError) {\n          const errors = getValidationErrors(err);\n\n          formRef.current?.setErrors(errors);\n        }\n      } finally {\n        stop();\n      }\n    },\n    [startService, start, stop],\n  );\n\n  const formattedTime = useMemo(() => {\n    return format(new Date(0, 0, 0, hours, minutes, seconds), 'mm:ss');\n  }, [hours, minutes, seconds]);\n  const handleFinishService = useCallback(() => {\n    finishService(formattedTime);\n  }, [finishService, formattedTime]);\n\n  useEffect(() => {\n    if (serviceStarted && !isRunning) {\n      startTimer();\n    }\n  }, [serviceStarted, startTimer, isRunning]);\n\n  return (\n    <Container>\n      <UserMenu>\n        <Logo src={logoWhiteImg} alt=\"Equatorial Energia\" />\n\n        <WelcomeText>\n          Bem vindo,\n          <Username>{user.name}</Username>\n        </WelcomeText>\n\n        <LogoutButton onClick={signOut}>\n          <FiPower />\n          <LogoutButtonText>Sair</LogoutButtonText>\n        </LogoutButton>\n      </UserMenu>\n\n      <ServiceForm>\n        <Form\n          ref={formRef}\n          onSubmit={handleSubmit}\n          initialData={{ state: '82' }}\n        >\n          <CustomRadioGroup fieldLabel=\"Estado\">\n            <RadioOptions\n              name=\"state\"\n              options={[\n                { id: 'radio1', value: '82', label: 'Alagoas' },\n                { id: 'radio2', value: '98', label: 'Maranhão' },\n                { id: 'radio3', value: '95', label: 'Pará' },\n                { id: 'radio4', value: '86', label: 'Piauí' },\n              ]}\n              disabled={serviceStarted}\n            />\n          </CustomRadioGroup>\n\n          <OutlineInput\n            name=\"contract\"\n            type=\"text\"\n            placeholder=\"Código único ou conta contrato\"\n            autoComplete=\"off\"\n            disabled={serviceStarted}\n          />\n\n          <OutlineInputMask\n            name=\"cpf\"\n            mask=\"999.999.999-99\"\n            type=\"text\"\n            placeholder=\"CPF ou CNPJ\"\n            autoComplete=\"off\"\n            disabled={serviceStarted}\n          />\n\n          {serviceStarted && customer ? (\n            <FinishServiceButton type=\"button\" onClick={handleFinishService}>\n              Encerrar atendimento\n            </FinishServiceButton>\n          ) : (\n            <StartServiceButton type=\"submit\">\n              Iniciar atendimento\n            </StartServiceButton>\n          )}\n\n          {serviceStarted && customer && (\n            <Cronometro>\n              <span>Tempo de atendimento:</span>\n              <h1>{formattedTime}</h1>\n            </Cronometro>\n          )}\n        </Form>\n      </ServiceForm>\n\n      {isLoading && (\n        <Loading isOpen={isLoading} message={message} setIsOpen={stop} />\n      )}\n    </Container>\n  );\n};\n\nexport default LeftBar;\n","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/CustomRadioGroup/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/QuickMenu/index.tsx",["432"],"import React, { useState } from 'react';\n\nimport { BsLightningFill } from 'react-icons/bs';\nimport { FaPlug, FaDollarSign, FaDivide, FaCalendarAlt } from 'react-icons/fa';\nimport { IoDocumentText } from 'react-icons/io5';\nimport { IoMdMail } from 'react-icons/io';\nimport { MdReceipt } from 'react-icons/md';\n\nimport { Container, Content } from './styles';\n\nimport PowerOutageFlow from '../../../Services/PowerOutageFlow';\nimport PowerReconnectionFlow from '../../../Services/PowerReconnectionFlow';\nimport DebitsConsultationModal from '../../../Services/DebitsConsultationModal';\nimport InstallmentPaymentModal from '../../../Services/InstallmentPaymentModal';\nimport EmailInvoice from '../../../Services/EmailInvoice';\nimport ExpirationChange from '../../../Services/DueDateChange';\nimport RequestList from '../../../Services/RequestList';\n\nimport { useCustomerService } from '../../../../hooks/customerService';\nimport { useAlert } from '../../../../hooks/alert';\nimport { usePowerReconnectionService } from '../../../../hooks/powerReconnectionService';\nimport { usePowerOutageService } from '../../../../hooks/powerOutageService';\n\nconst QuickMenu: React.FC = () => {\n  const [outagePowerOpen, setOutagePowerOpen] = useState(false);\n  const [powerReconnectionOpen, setPowerReconnectionOpen] = useState(false);\n  const [debitsConsultationOpen, setDebitsConsultationOpen] = useState(false);\n  const [installmentPaymentOpen, setInstallmentPaymentOpen] = useState(false);\n  const [emailInvoiceOpen, setEmailInvoiceOpen] = useState(false);\n  const [expirationChangeOpen, setExpirationChangeOpen] = useState(false);\n  const [requestListOpen, setRequestListOpen] = useState(false);\n\n  const { customAlert } = useAlert();\n  const { serviceNotes } = useCustomerService();\n  const { ableToPowerOutage } = usePowerOutageService();\n  const { ableToReconnection } = usePowerReconnectionService();\n\n  console.log(ableToPowerOutage());\n\n  function toggleOutagePower(): void {\n    if (!ableToPowerOutage()) {\n      customAlert({\n        type: 'warning',\n        title: 'Falta de energia',\n        description:\n          'O cliente não está habilitado para o serviço de falta de energia.',\n        confirmationText: 'OK',\n      });\n    } else {\n      setOutagePowerOpen(!outagePowerOpen);\n    }\n  }\n\n  function togglePowerReconnection(): void {\n    if (!ableToReconnection()) {\n      customAlert({\n        type: 'warning',\n        title: 'Religação',\n        description:\n          'O cliente não está habilitado para o serviço de religação.',\n        confirmationText: 'OK',\n      });\n    } else {\n      setPowerReconnectionOpen(!powerReconnectionOpen);\n    }\n  }\n\n  function toggleDebitsConsultation(): void {\n    setDebitsConsultationOpen(!debitsConsultationOpen);\n  }\n\n  function toggleInstallmentPayment(): void {\n    setInstallmentPaymentOpen(!installmentPaymentOpen);\n  }\n\n  function toggleEmailInvoice(): void {\n    setEmailInvoiceOpen(!emailInvoiceOpen);\n  }\n\n  function toggleExpirationChange(): void {\n    setExpirationChangeOpen(!expirationChangeOpen);\n  }\n\n  function toggleRequestList(): void {\n    if (\n      !serviceNotes.openServiceNotes.length &&\n      !serviceNotes.closedServiceNotes.length\n    ) {\n      customAlert({\n        type: 'info',\n        title: 'Acompanhamento de protocolos',\n        description: 'O cliente não possui notas para serem exibidas.',\n        confirmationText: 'OK',\n      });\n    } else {\n      setRequestListOpen(!requestListOpen);\n    }\n  }\n\n  return (\n    <Container>\n      <h3>Menu rápido</h3>\n\n      <Content>\n        <div>\n          <button type=\"button\" onClick={toggleOutagePower}>\n            <BsLightningFill size={20} />\n          </button>\n\n          <span>Falta de energia</span>\n        </div>\n\n        <div>\n          <button type=\"button\" onClick={togglePowerReconnection}>\n            <FaPlug size={20} />\n          </button>\n\n          <span>Religação</span>\n        </div>\n\n        <div>\n          <button type=\"button\" onClick={toggleDebitsConsultation}>\n            <IoDocumentText size={20} />\n          </button>\n\n          <span>Consulta de débitos</span>\n        </div>\n\n        <div>\n          <button type=\"button\">\n            <FaDollarSign size={20} />\n          </button>\n\n          <span>Baixa Renda</span>\n        </div>\n\n        <div>\n          <button type=\"button\" onClick={toggleInstallmentPayment}>\n            <FaDivide size={20} />\n          </button>\n\n          <span>Entrada de parcelamento</span>\n        </div>\n\n        <div>\n          <button type=\"button\" onClick={toggleEmailInvoice}>\n            <IoMdMail size={20} />\n          </button>\n\n          <span>Fatura por e-mail</span>\n        </div>\n\n        <div>\n          <button type=\"button\" onClick={toggleExpirationChange}>\n            <FaCalendarAlt size={20} />\n          </button>\n\n          <span>Data certa</span>\n        </div>\n\n        <div>\n          <button type=\"button\" onClick={toggleRequestList}>\n            <MdReceipt size={20} />\n          </button>\n\n          <span>Acompanhamento de protocolos</span>\n        </div>\n      </Content>\n\n      <PowerOutageFlow\n        modalOpen={outagePowerOpen}\n        toggleModal={toggleOutagePower}\n      />\n\n      <PowerReconnectionFlow\n        modalOpen={powerReconnectionOpen}\n        toggleModal={togglePowerReconnection}\n      />\n\n      <DebitsConsultationModal\n        isOpen={debitsConsultationOpen}\n        setIsOpen={toggleDebitsConsultation}\n      />\n      <InstallmentPaymentModal\n        isOpen={installmentPaymentOpen}\n        setIsOpen={toggleInstallmentPayment}\n      />\n\n      <EmailInvoice isOpen={emailInvoiceOpen} setIsOpen={toggleEmailInvoice} />\n\n      <ExpirationChange\n        isOpen={expirationChangeOpen}\n        setIsOpen={toggleExpirationChange}\n      />\n\n      <RequestList isOpen={requestListOpen} setIsOpen={toggleRequestList} />\n    </Container>\n  );\n};\n\nexport default QuickMenu;\n","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/InstallmentPaymentModal/index.tsx",["433"],"import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { Form } from '@unform/web';\nimport { FormHandles } from '@unform/core';\nimport { useLoading } from 'react-use-loading';\nimport * as Yup from 'yup';\n\nimport getValidationErrors from '../../../utils/getValidationErrors';\nimport getUnformattedPhone from '../../../utils/getUnformattedPhone';\n\nimport { useCustomerService } from '../../../hooks/customerService';\nimport { useToast } from '../../../hooks/toast';\nimport { useWhatsappSending } from '../../../hooks/whatsappSending';\nimport { useAlert } from '../../../hooks/alert';\n\nimport Loading from '../../Loading';\nimport Modal from '../../Modal';\nimport InputMask from '../../InputMask';\n\nimport { currencyMask } from '../../../utils/inputMasks';\n\nimport { ModalContent, SendButton, CodeBarContent } from './styles';\n\nimport { InstallmentDebit } from '../../../types/Debits';\n\ninterface ModalProps {\n  isOpen: boolean;\n  setIsOpen: () => void;\n}\n\ninterface SendDebitFormData {\n  phone: string;\n}\n\nconst InstallmentPaymentModal: React.FC<ModalProps> = ({\n  isOpen,\n  setIsOpen,\n}) => {\n  const [selectedInstallmentDebit, setSelectedInstallmentDebit] = useState<\n    InstallmentDebit | undefined\n  >(undefined);\n\n  const [codeBarValue, setCodeBarValue] = useState<string | undefined>(\n    undefined,\n  );\n\n  const { debits, customer, operatingCompany } = useCustomerService();\n  const { customAlert } = useAlert();\n  const { sendInstallmentPayment } = useWhatsappSending();\n  const [{ isLoading, message }, { start, stop }] = useLoading();\n\n  const formRef = useRef<FormHandles>(null);\n\n  const handleSubmit = useCallback(\n    async (data: SendDebitFormData) => {\n      try {\n        start('Enviando fatura ...');\n\n        formRef.current?.setErrors({});\n\n        const schema = Yup.object().shape({\n          phone: Yup.string().required('Telefone obrigatório'),\n        });\n\n        await schema.validate(data, {\n          abortEarly: false,\n        });\n\n        if (selectedInstallmentDebit) {\n          await sendInstallmentPayment({\n            operatingCompany,\n            phoneNumber: getUnformattedPhone(data.phone),\n            name: customer.name,\n            amount: selectedInstallmentDebit.invoiceAmount,\n            barCode: selectedInstallmentDebit.paymentCode,\n            contract: customer.contractAccount,\n          });\n\n          customAlert({\n            type: 'success',\n            title: 'Código enviado',\n            description: 'O código para pagamento foi enviado com sucesso.',\n            confirmationText: 'OK',\n          });\n        }\n      } catch (err) {\n        if (err instanceof Yup.ValidationError) {\n          const errors = getValidationErrors(err);\n\n          formRef.current?.setErrors(errors);\n          return;\n        }\n\n        customAlert({\n          type: 'error',\n          title: 'Erro no envio',\n          description:\n            'Ocorreu um erro ao enviar o código, cheque o número de telefone',\n          confirmationText: 'OK',\n        });\n      } finally {\n        setSelectedInstallmentDebit(undefined);\n        setIsOpen();\n        stop();\n      }\n    },\n    [\n      customAlert,\n      selectedInstallmentDebit,\n      customer,\n      operatingCompany,\n      start,\n      sendInstallmentPayment,\n      stop,\n      setIsOpen,\n    ],\n  );\n\n  const handleClickInstallmentDebit = useCallback((debit: InstallmentDebit) => {\n    setSelectedInstallmentDebit(debit);\n    setCodeBarValue(debit.paymentCode);\n  }, []);\n\n  const generateInstallmentRows = useMemo(() => {\n    const installmentRows = debits.installmentDebits.installmentDebitDetails.map(\n      debit => (\n        <tr\n          key={debit.billingDocumentNumber}\n          tabIndex={0}\n          onClick={() => handleClickInstallmentDebit(debit)}\n        >\n          <td>\n            <span>Nº do documento</span>\n            <strong>{debit.billingDocumentNumber}</strong>\n          </td>\n          <td>\n            <h2>{currencyMask(debit.invoiceAmount)}</h2>\n          </td>\n        </tr>\n      ),\n    );\n\n    return installmentRows;\n  }, [debits, handleClickInstallmentDebit]);\n\n  useEffect(() => {\n    setCodeBarValue(undefined);\n    setSelectedInstallmentDebit(undefined);\n  }, [setIsOpen]);\n\n  return (\n    <Modal isOpen={isOpen} setIsOpen={setIsOpen}>\n      {debits.installmentDebits.installmentDebitDetails.length ? (\n        <ModalContent>\n          <h2>Entrada de parcelamento</h2>\n\n          <div>\n            <table>\n              <tbody>{generateInstallmentRows}</tbody>\n            </table>\n          </div>\n\n          <Form\n            ref={formRef}\n            onSubmit={handleSubmit}\n            initialData={{\n              phone: customer.contacts.phones?.cellPhone,\n            }}\n          >\n            {codeBarValue ? (\n              <CodeBarContent>\n                <span>Código para pagamento</span>\n                <strong>{codeBarValue}</strong>\n              </CodeBarContent>\n            ) : (\n              <span>Nenhum documento selecionado</span>\n            )}\n\n            <InputMask\n              name=\"phone\"\n              mask=\"(99) 99999-9999\"\n              type=\"text\"\n              placeholder=\"Telefone do cliente\"\n              autoComplete=\"off\"\n            />\n\n            <SendButton type=\"submit\" disabled={!selectedInstallmentDebit}>\n              Enviar código\n            </SendButton>\n          </Form>\n        </ModalContent>\n      ) : (\n        <p>O cliente não possui negociações.</p>\n      )}\n\n      {isLoading && (\n        <Loading isOpen={isLoading} message={message} setIsOpen={stop} />\n      )}\n    </Modal>\n  );\n};\n\nexport default InstallmentPaymentModal;\n","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/getUnformattedPhone.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DebitsConsultationModal/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DueDateChange/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/EmailInvoice/styles.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Modal/index.tsx",["434"],"import React, { useState, useEffect } from 'react';\nimport Rodal from 'rodal';\n\nimport 'rodal/lib/rodal.css';\n\ninterface IModalProps {\n  children: any;\n  isOpen: boolean;\n  customStyles?: object;\n  setIsOpen: () => void;\n}\n\nconst Modal: React.FC<IModalProps> = ({\n  children,\n  isOpen,\n  setIsOpen,\n  customStyles,\n}) => {\n  const [modalStatus, setModalStatus] = useState(isOpen);\n\n  useEffect(() => {\n    setModalStatus(isOpen);\n  }, [isOpen]);\n\n  return (\n    <Rodal\n      visible={modalStatus}\n      showCloseButton\n      closeOnEsc\n      onClose={setIsOpen}\n      customStyles={\n        customStyles || {\n          borderRadius: '8px',\n          padding: '48px 64px',\n          width: '736px',\n          height: 'fit-content',\n        }\n      }\n      customMaskStyles={{\n        background: 'rgba(0, 0, 0, 0.6)',\n      }}\n    >\n      {children}\n    </Rodal>\n  );\n};\n\nexport default Modal;\n","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/ServiceNotesTable/index.tsx",["435"],"import React from 'react';\nimport { useTable, Column } from 'react-table';\n\nimport {\n  Container,\n  TableContainer,\n  TableHeadContainer,\n  TableColumnsTitleContainer,\n  TableColumnTitle,\n  TableRow,\n  TableBody,\n  TableDataCell,\n} from './styles';\n\ninterface Note {\n  protocol: string;\n  service: string;\n  openingDate: string;\n  conclusionDate: string | undefined;\n  status: string;\n}\n\ninterface ServiceNotesTableProps {\n  columns: Column<Note>[];\n  data: Note[];\n}\n\nconst ServiceNotesTable: React.FC<ServiceNotesTableProps> = ({\n  columns,\n  data,\n}) => {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({ columns, data });\n\n  return (\n    <Container>\n      <TableContainer {...getTableProps()}>\n        <TableHeadContainer>\n          {headerGroups.map(headerGroup => (\n            <TableColumnsTitleContainer {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <TableColumnTitle {...column.getHeaderProps()}>\n                  {column.render('Header')}\n                </TableColumnTitle>\n              ))}\n            </TableColumnsTitleContainer>\n          ))}\n        </TableHeadContainer>\n        <TableBody {...getTableBodyProps()}>\n          {rows.map((row, i) => {\n            prepareRow(row);\n            return (\n              <TableRow {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return (\n                    <TableDataCell {...cell.getCellProps()}>\n                      {cell.render('Cell')}\n                    </TableDataCell>\n                  );\n                })}\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </TableContainer>\n    </Container>\n  );\n};\n\nexport default ServiceNotesTable;\n","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/ServiceNotesTable/styles.ts",[],["436","437","438","439","440"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/App.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/toast.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/customerService.tsx",["441"],"import React, { createContext, useCallback, useContext, useState } from 'react';\nimport { v4 as uuid } from 'uuid';\n\nimport { useAlert } from './alert';\n\nimport Customer from '../types/Customer';\nimport Installation from '../types/Installation';\nimport Debits from '../types/Debits';\n\nimport extractResponseData from '../utils/extractResponseData';\nimport ServiceNotes from '../types/ServiceNotes';\nimport eqtlBarApi from '../services/eqtlBarApi';\nimport { useAuth } from './auth';\n\ninterface CustomerServiceState {\n  operatingCompany: string;\n  customer: Customer;\n  installation: Installation;\n  debits: Debits;\n  serviceNotes: ServiceNotes;\n  protocol?: string;\n}\n\ninterface GetCustomerData {\n  stateCode: string;\n  contract?: string;\n  cpf?: string;\n}\n\ninterface StartServiceProps {\n  stateCode: string;\n  contract: string;\n}\n\ninterface CustomerServiceContextData {\n  operatingCompany: string;\n  protocol: string | undefined;\n  customer: Customer;\n  installation: Installation;\n  debits: Debits;\n  serviceNotes: ServiceNotes;\n  serviceStarted: boolean;\n  getCustomer(customerData: GetCustomerData): Promise<void>;\n  startService({ stateCode, contract, cpf }: GetCustomerData): Promise<void>;\n  finishService(attendanceTime: string): void;\n}\n\ninterface GenerateProtocolProps {\n  operatingCompany: string;\n  contract: string;\n}\n\nconst CustomerServiceContext = createContext<CustomerServiceContextData>(\n  {} as CustomerServiceContextData,\n);\n\nconst CustomerServiceProvider: React.FC = ({ children }) => {\n  const { customAlert } = useAlert();\n  const { user } = useAuth();\n\n  const [serviceStarted, setServiceStarted] = useState(false);\n\n  const [\n    customerServiceData,\n    setCustomerServiceData,\n  ] = useState<CustomerServiceState>(() => {\n    const storagedCustomerServiceData = localStorage.getItem(\n      '@TelaAgil:customerServiceData',\n    );\n\n    const storagedProtocol = localStorage.getItem('@TelaAgil:protocol');\n\n    if (storagedCustomerServiceData) {\n      const {\n        operatingCompany,\n        customer,\n        installation,\n        debits,\n        serviceNotes,\n      } = JSON.parse(storagedCustomerServiceData);\n\n      const customerServiceState: CustomerServiceState = {\n        operatingCompany,\n        customer,\n        installation,\n        debits,\n        serviceNotes,\n      };\n\n      if (storagedProtocol) {\n        customerServiceState.protocol = storagedProtocol;\n      }\n\n      return customerServiceState;\n    }\n\n    return {} as CustomerServiceState;\n  });\n\n  const getCustomer = useCallback(\n    async ({ stateCode, contract, cpf }: GetCustomerData) => {\n      let url;\n\n      if (cpf && contract) {\n        customAlert({\n          type: 'error',\n          title: 'Erro no formulário',\n          description:\n            'Utilize apenas um dos campos (Conta contrato ou CPF / CNPJ)',\n          confirmationText: 'OK',\n        });\n\n        return;\n      }\n\n      if (cpf) {\n        url = `/atendimento/v1/clientes?cpf=${cpf}&flagDadosCliente=true&flagStatusInstalacao=true&flagPossuiDebitos=true&flagDadosTecnicos=false&empresaOperadora=${stateCode}&flagNotasAbertas=true&flagNotasEncerradas=true&flagDetalheDebitoCobranca=true&flagDetalheDebitoFatura=true&codigoTransacao=123`;\n      } else {\n        url = `/atendimento/v1/clientes?contrato=${contract}&flagDadosCliente=true&flagStatusInstalacao=true&flagPossuiDebitos=true&flagDadosTecnicos=true&empresaOperadora=${stateCode}&flagNotasAbertas=true&flagNotasEncerradas=true&flagDetalheDebitoCobranca=true&flagDetalheDebitoFatura=true&codigoTransacao=123`;\n      }\n\n      const response = await eqtlBarApi.get(url);\n\n      const {\n        customer,\n        installation,\n        debits,\n        serviceNotes,\n      } = extractResponseData(response, stateCode);\n\n      localStorage.setItem(\n        '@TelaAgil:customerServiceData',\n        JSON.stringify({\n          operatingCompany: stateCode,\n          customer,\n          installation,\n          debits,\n          serviceNotes,\n        }),\n      );\n\n      setCustomerServiceData({\n        operatingCompany: stateCode,\n        customer,\n        installation,\n        debits,\n        serviceNotes,\n      });\n    },\n    [customAlert],\n  );\n\n  const generateProtocol = useCallback(\n    async ({ operatingCompany, contract }: GenerateProtocolProps) => {\n      const response = await eqtlBarApi.get('/atendimento/v1/clientes', {\n        params: {\n          empresaOperadora: operatingCompany,\n          contrato: contract,\n          flagGerarProtocolo: true,\n          codigoTransacao: uuid(),\n        },\n      });\n\n      localStorage.setItem('@TelaAgil:protocol', response.data.data.protocolo);\n\n      setCustomerServiceData(state => ({\n        ...state,\n        protocol: response.data.data.protocolo,\n      }));\n    },\n    [],\n  );\n\n  const startService = useCallback(\n    async ({ stateCode, contract }: StartServiceProps) => {\n      try {\n        await getCustomer({\n          stateCode,\n          contract,\n        });\n\n        await generateProtocol({\n          contract,\n          operatingCompany: stateCode,\n        });\n\n        setServiceStarted(true);\n      } catch {\n        customAlert({\n          type: 'error',\n          title: 'Erro no atendimento',\n          description:\n            'Ocorreu um erro ao iniciar o atendimento, cheque as informações do cliente',\n          confirmationText: 'OK',\n        });\n      }\n    },\n    [getCustomer, generateProtocol, customAlert],\n  );\n\n  const saveAttendanceLog = useCallback(\n    async (attendanceTime: string) => {\n      try {\n        await eqtlBarApi.post('/logs', {\n          user_id: user.id,\n          username: user.name,\n          contractAccount: customerServiceData.customer.contractAccount,\n          attendanceTime,\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    },\n    [user, customerServiceData.customer],\n  );\n\n  const finishService = useCallback(\n    async (attendanceTime: string) => {\n      await saveAttendanceLog(attendanceTime);\n\n      localStorage.removeItem('@TelaAgil:protocol');\n      localStorage.removeItem('@TelaAgil:customerServiceData');\n\n      setCustomerServiceData({} as CustomerServiceContextData);\n\n      setServiceStarted(false);\n    },\n    [saveAttendanceLog],\n  );\n\n  return (\n    <CustomerServiceContext.Provider\n      value={{\n        operatingCompany: customerServiceData.operatingCompany,\n        protocol: customerServiceData.protocol,\n        customer: customerServiceData.customer,\n        installation: customerServiceData.installation,\n        debits: customerServiceData.debits,\n        serviceNotes: customerServiceData.serviceNotes,\n        serviceStarted,\n        getCustomer,\n        startService,\n        finishService,\n      }}\n    >\n      {children}\n    </CustomerServiceContext.Provider>\n  );\n};\n\nfunction useCustomerService(): CustomerServiceContextData {\n  const context = useContext(CustomerServiceContext);\n\n  if (!context) {\n    throw new Error(\n      'useCustomerService must be used within a CustomerServiceProvider',\n    );\n  }\n\n  return context;\n}\n\nexport { CustomerServiceProvider, useCustomerService };\n","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/getValidationErrors.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/AlertModal/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/LeftBar/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/OutlineInputMask/index.tsx",["442","443"],"import React, { useEffect, useRef, useState, useCallback } from 'react';\nimport ReactInputMask, { Props } from 'react-input-mask';\nimport { IconBaseProps } from 'react-icons';\nimport { FiAlertCircle } from 'react-icons/fi';\nimport { useField } from '@unform/core';\n\nimport { Container, Error } from './styles';\n\ninterface InputProps extends Props {\n  name: string;\n  icon?: React.ComponentType<IconBaseProps>;\n}\n\nconst OutlineInputMask: React.FC<InputProps> = ({\n  name,\n  icon: Icon,\n  disabled,\n  ...rest\n}) => {\n  const inputRef = useRef(null);\n  const [isFocused, setIsFocused] = useState(false);\n  const { fieldName, defaultValue, error, registerField } = useField(name);\n\n  const handleInputFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n\n  const handleInputBlur = useCallback(() => {\n    setIsFocused(false);\n  }, []);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value',\n      setValue(ref: any, value: string) {\n        ref.setInputValue(value);\n      },\n      clearValue(ref: any) {\n        ref.setInputValue('');\n      },\n    });\n  }, [fieldName, registerField]);\n\n  return (\n    <Container isFocused={isFocused} isErrored={!!error} isDisabled={disabled}>\n      {Icon && <Icon size={20} />}\n\n      <ReactInputMask\n        onFocus={handleInputFocus}\n        onBlur={handleInputBlur}\n        defaultValue={defaultValue}\n        disabled={disabled}\n        ref={inputRef}\n        {...rest}\n      />\n\n      {error && (\n        <Error title={error}>\n          <FiAlertCircle color=\"#ff5353\" size={20} />\n        </Error>\n      )}\n    </Container>\n  );\n};\n\nexport default OutlineInputMask;\n",["444","445","446","447","448"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/OutlineInput/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DebitsConsultationModal/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/questions/PowerOutageQuestions.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/StatusIndicator/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/InputMask/styles.ts",[],["449","450","451","452","453"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/StatusIndicator/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/index.tsx",["454"],"import React, { useCallback, useState } from 'react';\n\nimport StepModal, { Question } from './StepModal';\n\nimport powerOutageQuestions from './questions/PowerOutageQuestions';\n\ninterface FlowComponentProps {\n  modalOpen: boolean;\n  toggleModal(): void;\n}\n\nconst PowerOutageFlow: React.FC<FlowComponentProps> = ({\n  modalOpen,\n  toggleModal,\n}) => {\n  const [questions, setQuestions] = useState<Question[]>(powerOutageQuestions);\n  const [currentQuestion, setCurrentQuestion] = useState(questions[0]);\n\n  const handleSetCurrentQuestion = useCallback(\n    (nextQuestionId: string) => {\n      const nextQuestion: Question | undefined = questions.find(\n        question => question.id === nextQuestionId,\n      );\n\n      if (nextQuestion) {\n        setCurrentQuestion(nextQuestion);\n      }\n    },\n    [questions],\n  );\n\n  const handleClearFlow = useCallback(() => {\n    setCurrentQuestion(questions[0]);\n  }, [questions]);\n\n  return (\n    <StepModal\n      isOpen={modalOpen}\n      setIsOpen={toggleModal}\n      title=\"Falta de energia\"\n      question={currentQuestion}\n      setCurrentQuestion={handleSetCurrentQuestion}\n      clearFlow={handleClearFlow}\n    />\n  );\n};\n\nexport default PowerOutageFlow;\n","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/StepModal/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/StepModal/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/EmailInvoice/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/InstallmentPaymentModal/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DueDateChange/index.tsx",["455"],"import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { v4 as uuid } from 'uuid';\n\nimport { useLoading } from 'react-use-loading';\n\nimport eqtlBarApi from '../../../services/eqtlBarApi';\n\nimport Loading from '../../Loading';\nimport Modal from '../../Modal';\n\nimport {\n  ModalContent,\n  SelectDate,\n  ConfirmButton,\n  SelectContainer,\n} from './styles';\n\nimport { useCustomerService } from '../../../hooks/customerService';\nimport { useAlert } from '../../../hooks/alert';\n\ninterface ModalProps {\n  isOpen: boolean;\n  setIsOpen: () => void;\n}\n\ninterface ValidDate {\n  description: string;\n  code: string;\n}\n\ninterface ResponseValidDate {\n  descricaoDt: string;\n  codigoDt: string;\n}\n\ninterface GetDueDateListProps {\n  contract: string;\n  stateCode: string;\n}\n\ninterface SetDueDateProps {\n  contract: string;\n  stateCode: string;\n  requestedDate: string;\n}\n\ninterface OptionProps {\n  value: string;\n  label: string;\n}\n\nconst DueDateChange: React.FC<ModalProps> = ({ isOpen, setIsOpen }) => {\n  const [{ isLoading, message }, { start, stop }] = useLoading();\n\n  const { customer, operatingCompany } = useCustomerService();\n  const { customAlert } = useAlert();\n\n  const [validDates, setValidDates] = useState<ValidDate[]>([]);\n  const [selectOptions, setSelectOptions] = useState<OptionProps[]>([]);\n  const [selectedDate, setSelectedDate] = useState<OptionProps | undefined>(\n    undefined,\n  );\n\n  const getDueDateList = useCallback(\n    async ({ contract, stateCode }: GetDueDateListProps) => {\n      const response = await eqtlBarApi.get('/servico/v1/dataCerta', {\n        params: {\n          contaContrato: contract,\n          empresaOperadora: stateCode,\n          flagConsultar: true,\n          codigoTransacao: uuid(),\n          canalAtendimento: 'S',\n        },\n      });\n\n      return response.data.data.listaDataCerta;\n    },\n    [],\n  );\n\n  const setDueDate = useCallback(\n    async ({ contract, stateCode, requestedDate }: SetDueDateProps) => {\n      const response = await eqtlBarApi.get('/servico/v1/dataCerta', {\n        params: {\n          contaContrato: contract,\n          empresaOperadora: stateCode,\n          flagAlterar: true,\n          dataSolicitada: requestedDate,\n          codigoTransacao: uuid(),\n          canalAtendimento: 'S',\n        },\n      });\n\n      if (response.data.data.mensagem !== 'Data Certa Incluida com Sucesso!') {\n        throw new Error(response.data.data.mensagem);\n      }\n    },\n    [],\n  );\n\n  const handleChangeSelect = useCallback((value: OptionProps) => {\n    setSelectedDate(value);\n  }, []);\n\n  const handleClickSetDueDate = useCallback(async () => {\n    try {\n      start('Ativando serviço ...');\n\n      if (selectedDate) {\n        await setDueDate({\n          contract: customer.contractAccount,\n          stateCode: operatingCompany,\n          requestedDate: selectedDate.value,\n        });\n\n        customAlert({\n          type: 'success',\n          title: 'Sucesso na alteração',\n          description: 'Data certa alterada com sucesso.',\n          confirmationText: 'OK',\n        });\n      }\n    } catch (err) {\n      customAlert({\n        type: 'error',\n        title: 'Erro na alteração',\n        description: err.message,\n        confirmationText: 'OK',\n      });\n    } finally {\n      setIsOpen();\n      stop();\n    }\n  }, [\n    customAlert,\n    selectedDate,\n    setDueDate,\n    setIsOpen,\n    start,\n    stop,\n    customer,\n    operatingCompany,\n  ]);\n\n  useEffect(() => {\n    getDueDateList({\n      contract: customer.contractAccount,\n      stateCode: operatingCompany,\n    }).then(data => {\n      setValidDates(\n        data.map((date: ResponseValidDate) => {\n          const validDate: ValidDate = {\n            description: date.descricaoDt,\n            code: date.codigoDt,\n          };\n\n          return validDate;\n        }),\n      );\n    });\n  }, [customer, getDueDateList, operatingCompany]);\n\n  useEffect(() => {\n    setSelectOptions(\n      validDates.map(date => {\n        const option: OptionProps = {\n          value: date.description,\n          label: date.code,\n        };\n\n        return option;\n      }),\n    );\n  }, [validDates]);\n\n  useEffect(() => {\n    setSelectedDate(undefined);\n  }, [setIsOpen]);\n\n  return (\n    <Modal isOpen={isOpen} setIsOpen={setIsOpen}>\n      {validDates.length ? (\n        <ModalContent>\n          <h2>Data certa</h2>\n\n          <h1>\n            Escolha a melhor data para você receber suas próximas faturas:\n          </h1>\n\n          <SelectContainer>\n            <SelectDate\n              name=\"dueDate\"\n              options={[...selectOptions]}\n              maxMenuHeight={144}\n              placeholder=\"Selecione\"\n              onChange={(value: OptionProps) => handleChangeSelect(value)}\n            />\n\n            <ConfirmButton\n              type=\"button\"\n              onClick={handleClickSetDueDate}\n              disabled={!selectedDate}\n            >\n              Cadastrar\n            </ConfirmButton>\n          </SelectContainer>\n        </ModalContent>\n      ) : (\n        <p>Data certa não habilitada para o cliente</p>\n      )}\n\n      {isLoading && (\n        <Loading isOpen={isLoading} message={message} setIsOpen={stop} />\n      )}\n    </Modal>\n  );\n};\n\nexport default DueDateChange;\n",["456","457","458","459","460"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/InputMask/index.tsx",["461","462"],"import React, { useEffect, useRef, useState, useCallback } from 'react';\nimport ReactInputMask, { Props } from 'react-input-mask';\nimport { IconBaseProps } from 'react-icons';\nimport { FiAlertCircle } from 'react-icons/fi';\nimport { useField } from '@unform/core';\n\nimport { Container, Error } from './styles';\n\ninterface InputProps extends Props {\n  name: string;\n  icon?: React.ComponentType<IconBaseProps>;\n}\n\nconst OutlineInputMask: React.FC<InputProps> = ({\n  name,\n  icon: Icon,\n  ...rest\n}) => {\n  const inputRef = useRef(null);\n  const [isFocused, setIsFocused] = useState(false);\n  const { fieldName, defaultValue, error, registerField } = useField(name);\n\n  const handleInputFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n\n  const handleInputBlur = useCallback(() => {\n    setIsFocused(false);\n  }, []);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value',\n      setValue(ref: any, value: string) {\n        ref.setInputValue(value);\n      },\n      clearValue(ref: any) {\n        ref.setInputValue('');\n      },\n    });\n  }, [fieldName, registerField]);\n\n  return (\n    <Container isFocused={isFocused} isErrored={!!error}>\n      {Icon && <Icon size={20} />}\n\n      <ReactInputMask\n        onFocus={handleInputFocus}\n        onBlur={handleInputBlur}\n        defaultValue={defaultValue}\n        ref={inputRef}\n        {...rest}\n      />\n\n      {error && (\n        <Error title={error}>\n          <FiAlertCircle color=\"#ff5353\" size={20} />\n        </Error>\n      )}\n    </Container>\n  );\n};\n\nexport default OutlineInputMask;\n","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerReconnectionFlow/DebitsValidationModal/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerReconnectionFlow/DebitsValidationModal/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/routes/Route.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/pages/Dashboard/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/ToastContainer/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Input/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Loading/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/Header/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/Header/TagInfo/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ContractData/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerReconnectionFlow/index.tsx",["463"],"import React, { useCallback, useState } from 'react';\n\nimport DebitsValidationModal, { Question } from './DebitsValidationModal';\n\nimport { currencyMask } from '../../../utils/inputMasks';\n\nimport { useCustomerService } from '../../../hooks/customerService';\n\ninterface FlowComponentProps {\n  modalOpen: boolean;\n  toggleModal(): void;\n}\n\nconst PowerReconnectionFlow: React.FC<FlowComponentProps> = ({\n  modalOpen,\n  toggleModal,\n}) => {\n  const { debits } = useCustomerService();\n\n  const powerReconnectionQuestions: Question[] = [\n    {\n      id: 'f1-q1',\n      title: `Você possui ${\n        debits.invoiceDebits.invoiceDebitDetails.length\n      } faturas com um débito de ${currencyMask(\n        debits.invoiceDebits.totalAmountInvoiceDebits,\n      )}. Estão pagas?`,\n      options: [\n        {\n          answer: 'Sim',\n          action: 'valida-religa-urgencia',\n        },\n        {\n          answer: 'Não',\n          nextQuestionId: 'resposta-efetue-pagamento',\n        },\n      ],\n    },\n    {\n      id: 'f1-q2',\n      title: `Você possui débitos de parcelamento com entrada de ${currencyMask(\n        debits.installmentDebits.totalAmountInstallmentDebits,\n      )}. Estão pagos?`,\n      options: [\n        {\n          answer: 'Sim',\n          action: 'valida-religa-urgencia',\n        },\n        {\n          answer: 'Não',\n          nextQuestionId: 'resposta-efetue-pagamento',\n        },\n      ],\n    },\n    {\n      id: 'resposta-efetue-pagamento',\n      title: 'Efetue o pagamento e retorne para solicitar a religação.',\n      options: [\n        {\n          answer: 'Sair',\n        },\n      ],\n    },\n  ];\n\n  const [questions, setQuestions] = useState<Question[]>(\n    powerReconnectionQuestions,\n  );\n  const [currentQuestion, setCurrentQuestion] = useState(\n    debits.invoiceDebits.totalAmountInvoiceDebits > 0\n      ? questions[0]\n      : questions[1],\n  );\n\n  const handleSetCurrentQuestion = useCallback(\n    (nextQuestionId: string) => {\n      const nextQuestion: Question | undefined = questions.find(\n        question => question.id === nextQuestionId,\n      );\n\n      if (nextQuestion) {\n        setCurrentQuestion(nextQuestion);\n      }\n    },\n    [questions],\n  );\n\n  const handleClearFlow = useCallback(() => {\n    setCurrentQuestion(questions[0]);\n  }, [questions]);\n\n  return (\n    <>\n      {debits.invoiceDebits.totalAmountInvoiceDebits > 0 ||\n      debits.installmentDebits.totalAmountInstallmentDebits > 0 ? (\n        <DebitsValidationModal\n          isOpen={modalOpen}\n          setIsOpen={toggleModal}\n          title=\"Religação\"\n          question={currentQuestion}\n          setCurrentQuestion={handleSetCurrentQuestion}\n          clearFlow={handleClearFlow}\n        />\n      ) : null}\n    </>\n  );\n};\n\nexport default PowerReconnectionFlow;\n","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/ToastContainer/Toast/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/powerReconnectionService.tsx",["464"],"import React, { createContext, useCallback, useContext } from 'react';\n\nimport eqtlBarApi from '../services/eqtlBarApi';\n\ninterface PowerReconnectionContextData {\n  ableToReconnection(): boolean;\n  suitableForEmergencyReconnection(): boolean;\n}\n\nconst PowerReconnectionServiceContext = createContext<PowerReconnectionContextData>(\n  {} as PowerReconnectionContextData,\n);\n\nconst PowerReconnectionProvider: React.FC = ({ children }) => {\n  const ableToReconnection = useCallback(() => {\n    return false; // HARD CODDED\n  }, []);\n\n  const suitableForEmergencyReconnection = useCallback(() => {\n    return false; // HARD CODDED\n  }, []);\n\n  return (\n    <PowerReconnectionServiceContext.Provider\n      value={{ ableToReconnection, suitableForEmergencyReconnection }}\n    >\n      {children}\n    </PowerReconnectionServiceContext.Provider>\n  );\n};\n\nfunction usePowerReconnectionService(): PowerReconnectionContextData {\n  const context = useContext(PowerReconnectionServiceContext);\n\n  if (!context) {\n    throw new Error(\n      'usePowerReconnectionService must be used within a PowerReconnectionProvider',\n    );\n  }\n\n  return context;\n}\n\nexport { PowerReconnectionProvider, usePowerReconnectionService };\n","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/routes/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/timer.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/getInstallationSubclassName.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/pages/SignIn/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/OutlineInputMask/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ClientData/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Button/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/pages/Dashboard/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Button/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/CustomRadioGroup/RadioOptions/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/QuickMenu/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/services/yaloApi.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/services/eqtlBarApi.ts",[],{"ruleId":"465","replacedBy":"466"},{"ruleId":"467","replacedBy":"468"},{"ruleId":"469","replacedBy":"470"},{"ruleId":"471","replacedBy":"472"},{"ruleId":"473","replacedBy":"474"},{"ruleId":"465","replacedBy":"475"},{"ruleId":"467","replacedBy":"476"},{"ruleId":"469","replacedBy":"477"},{"ruleId":"471","replacedBy":"478"},{"ruleId":"473","replacedBy":"479"},{"ruleId":"465","replacedBy":"480"},{"ruleId":"467","replacedBy":"481"},{"ruleId":"469","replacedBy":"482"},{"ruleId":"471","replacedBy":"483"},{"ruleId":"473","replacedBy":"484"},{"ruleId":"465","replacedBy":"485"},{"ruleId":"467","replacedBy":"486"},{"ruleId":"469","replacedBy":"487"},{"ruleId":"471","replacedBy":"488"},{"ruleId":"473","replacedBy":"489"},{"ruleId":"465","replacedBy":"490"},{"ruleId":"467","replacedBy":"491"},{"ruleId":"469","replacedBy":"492"},{"ruleId":"471","replacedBy":"493"},{"ruleId":"473","replacedBy":"494"},{"ruleId":"495","severity":1,"message":"496","line":86,"column":25,"nodeType":"497","messageId":"498","endLine":86,"endColumn":28,"suggestions":"499"},{"ruleId":"495","severity":1,"message":"496","line":151,"column":36,"nodeType":"497","messageId":"498","endLine":151,"endColumn":39,"suggestions":"500"},{"ruleId":"495","severity":1,"message":"496","line":155,"column":13,"nodeType":"497","messageId":"498","endLine":155,"endColumn":16,"suggestions":"501"},{"ruleId":"495","severity":1,"message":"496","line":167,"column":13,"nodeType":"497","messageId":"498","endLine":167,"endColumn":16,"suggestions":"502"},{"ruleId":"495","severity":1,"message":"496","line":202,"column":12,"nodeType":"497","messageId":"498","endLine":202,"endColumn":15,"suggestions":"503"},{"ruleId":"495","severity":1,"message":"496","line":221,"column":12,"nodeType":"497","messageId":"498","endLine":221,"endColumn":15,"suggestions":"504"},{"ruleId":"465","replacedBy":"505"},{"ruleId":"467","replacedBy":"506"},{"ruleId":"469","replacedBy":"507"},{"ruleId":"471","replacedBy":"508"},{"ruleId":"473","replacedBy":"509"},{"ruleId":"510","severity":1,"message":"511","line":18,"column":3,"nodeType":"512","messageId":"513","endLine":18,"endColumn":12},{"ruleId":"465","replacedBy":"514"},{"ruleId":"467","replacedBy":"515"},{"ruleId":"469","replacedBy":"516"},{"ruleId":"471","replacedBy":"517"},{"ruleId":"473","replacedBy":"518"},{"ruleId":"465","replacedBy":"519"},{"ruleId":"467","replacedBy":"520"},{"ruleId":"469","replacedBy":"521"},{"ruleId":"471","replacedBy":"522"},{"ruleId":"473","replacedBy":"523"},{"ruleId":"510","severity":1,"message":"524","line":49,"column":12,"nodeType":"512","messageId":"513","endLine":49,"endColumn":22},{"ruleId":"525","severity":1,"message":"526","line":38,"column":3,"nodeType":"527","messageId":"528","endLine":38,"endColumn":14},{"ruleId":"510","severity":1,"message":"529","line":17,"column":10,"nodeType":"512","messageId":"513","endLine":17,"endColumn":18},{"ruleId":"495","severity":1,"message":"496","line":7,"column":13,"nodeType":"497","messageId":"498","endLine":7,"endColumn":16,"suggestions":"530"},{"ruleId":"510","severity":1,"message":"531","line":55,"column":27,"nodeType":"512","messageId":"513","endLine":55,"endColumn":28},{"ruleId":"465","replacedBy":"532"},{"ruleId":"467","replacedBy":"533"},{"ruleId":"469","replacedBy":"534"},{"ruleId":"471","replacedBy":"535"},{"ruleId":"473","replacedBy":"536"},{"ruleId":"525","severity":1,"message":"526","line":211,"column":9,"nodeType":"527","messageId":"528","endLine":211,"endColumn":20},{"ruleId":"495","severity":1,"message":"496","line":37,"column":21,"nodeType":"497","messageId":"498","endLine":37,"endColumn":24,"suggestions":"537"},{"ruleId":"495","severity":1,"message":"496","line":40,"column":23,"nodeType":"497","messageId":"498","endLine":40,"endColumn":26,"suggestions":"538"},{"ruleId":"465","replacedBy":"539"},{"ruleId":"467","replacedBy":"540"},{"ruleId":"469","replacedBy":"541"},{"ruleId":"471","replacedBy":"542"},{"ruleId":"473","replacedBy":"543"},{"ruleId":"465","replacedBy":"544"},{"ruleId":"467","replacedBy":"545"},{"ruleId":"469","replacedBy":"546"},{"ruleId":"471","replacedBy":"547"},{"ruleId":"473","replacedBy":"548"},{"ruleId":"510","severity":1,"message":"549","line":16,"column":21,"nodeType":"512","messageId":"513","endLine":16,"endColumn":33},{"ruleId":"510","severity":1,"message":"550","line":1,"column":41,"nodeType":"512","messageId":"513","endLine":1,"endColumn":47},{"ruleId":"465","replacedBy":"551"},{"ruleId":"467","replacedBy":"552"},{"ruleId":"469","replacedBy":"553"},{"ruleId":"471","replacedBy":"554"},{"ruleId":"473","replacedBy":"555"},{"ruleId":"495","severity":1,"message":"496","line":36,"column":21,"nodeType":"497","messageId":"498","endLine":36,"endColumn":24,"suggestions":"556"},{"ruleId":"495","severity":1,"message":"496","line":39,"column":23,"nodeType":"497","messageId":"498","endLine":39,"endColumn":26,"suggestions":"557"},{"ruleId":"510","severity":1,"message":"549","line":66,"column":21,"nodeType":"512","messageId":"513","endLine":66,"endColumn":33},{"ruleId":"510","severity":1,"message":"558","line":3,"column":8,"nodeType":"512","messageId":"513","endLine":3,"endColumn":18},"lines-around-directive",["559"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],["559"],[],[],[],[],["559"],[],[],[],[],["559"],[],[],[],[],["559"],[],[],[],[],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["560","561"],["562","563"],["564","565"],["566","567"],["568","569"],["570","571"],["559"],[],[],[],[],"@typescript-eslint/no-unused-vars","'setIsOpen' is defined but never used.","Identifier","unusedVar",["559"],[],[],[],[],["559"],[],[],[],[],"'resetTimer' is assigned a value but never used.","no-console","Unexpected console statement.","MemberExpression","unexpected","'useToast' is defined but never used.",["572","573"],"'i' is defined but never used.",["559"],[],[],[],[],["574","575"],["576","577"],["559"],[],[],[],[],["559"],[],[],[],[],"'setQuestions' is assigned a value but never used.","'useRef' is defined but never used.",["559"],[],[],[],[],["578","579"],["580","581"],"'eqtlBarApi' is defined but never used.","padding-line-between-statements",{"messageId":"582","fix":"583","desc":"584"},{"messageId":"585","fix":"586","desc":"587"},{"messageId":"582","fix":"588","desc":"584"},{"messageId":"585","fix":"589","desc":"587"},{"messageId":"582","fix":"590","desc":"584"},{"messageId":"585","fix":"591","desc":"587"},{"messageId":"582","fix":"592","desc":"584"},{"messageId":"585","fix":"593","desc":"587"},{"messageId":"582","fix":"594","desc":"584"},{"messageId":"585","fix":"595","desc":"587"},{"messageId":"582","fix":"596","desc":"584"},{"messageId":"585","fix":"597","desc":"587"},{"messageId":"582","fix":"598","desc":"584"},{"messageId":"585","fix":"599","desc":"587"},{"messageId":"582","fix":"600","desc":"584"},{"messageId":"585","fix":"601","desc":"587"},{"messageId":"582","fix":"602","desc":"584"},{"messageId":"585","fix":"603","desc":"587"},{"messageId":"582","fix":"604","desc":"584"},{"messageId":"585","fix":"605","desc":"587"},{"messageId":"582","fix":"606","desc":"584"},{"messageId":"585","fix":"607","desc":"587"},"suggestUnknown",{"range":"608","text":"609"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"608","text":"610"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"611","text":"609"},{"range":"611","text":"610"},{"range":"612","text":"609"},{"range":"612","text":"610"},{"range":"613","text":"609"},{"range":"613","text":"610"},{"range":"614","text":"609"},{"range":"614","text":"610"},{"range":"615","text":"609"},{"range":"615","text":"610"},{"range":"616","text":"609"},{"range":"616","text":"610"},{"range":"617","text":"609"},{"range":"617","text":"610"},{"range":"618","text":"609"},{"range":"618","text":"610"},{"range":"619","text":"609"},{"range":"619","text":"610"},{"range":"620","text":"609"},{"range":"620","text":"610"},[2678,2681],"unknown","never",[4297,4300],[4489,4492],[4898,4901],[5907,5910],[6532,6535],[147,150],[975,978],[1062,1065],[963,966],[1050,1053]]