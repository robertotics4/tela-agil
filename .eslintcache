[{"E:\\www-hm\\eqtl-tela-agil\\src\\hooks\\toast.tsx":"1","E:\\www-hm\\eqtl-tela-agil\\src\\components\\AlertModal\\index.tsx":"2","E:\\www-hm\\eqtl-tela-agil\\src\\components\\Loading\\styles.ts":"3","E:\\www-hm\\eqtl-tela-agil\\src\\components\\FindContractModal\\styles.ts":"4","E:\\www-hm\\eqtl-tela-agil\\src\\components\\Main\\ServicesContent\\ClientData\\index.tsx":"5","E:\\www-hm\\eqtl-tela-agil\\src\\hooks\\whatsappSending.tsx":"6","E:\\www-hm\\eqtl-tela-agil\\src\\services\\authenticationApi.ts":"7","E:\\www-hm\\eqtl-tela-agil\\src\\components\\Loading\\index.tsx":"8","E:\\www-hm\\eqtl-tela-agil\\src\\components\\LeftBar\\index.tsx":"9","E:\\www-hm\\eqtl-tela-agil\\src\\components\\FindContractModal\\ContractsTable\\styles.ts":"10","E:\\www-hm\\eqtl-tela-agil\\src\\components\\OutlineInputRegex\\styles.ts":"11","E:\\www-hm\\eqtl-tela-agil\\src\\hooks\\monitoringOfProtocols.tsx":"12","E:\\www-hm\\eqtl-tela-agil\\src\\hooks\\customerService.tsx":"13","E:\\www-hm\\eqtl-tela-agil\\src\\utils\\getInstallationSubclassName.ts":"14","E:\\www-hm\\eqtl-tela-agil\\src\\components\\Button\\index.tsx":"15","E:\\www-hm\\eqtl-tela-agil\\src\\components\\FindContractModal\\index.tsx":"16","E:\\www-hm\\eqtl-tela-agil\\src\\components\\FindContractModal\\ContractsTable\\index.tsx":"17","E:\\www-hm\\eqtl-tela-agil\\src\\pages\\SignIn\\styles.ts":"18","E:\\www-hm\\eqtl-tela-agil\\src\\hooks\\auth.tsx":"19","E:\\www-hm\\eqtl-tela-agil\\src\\components\\Main\\Header\\TagInfo\\styles.ts":"20","E:\\www-hm\\eqtl-tela-agil\\src\\components\\Main\\index.tsx":"21","E:\\www-hm\\eqtl-tela-agil\\src\\pages\\Dashboard\\index.tsx":"22","E:\\www-hm\\eqtl-tela-agil\\src\\components\\Main\\Header\\index.tsx":"23","E:\\www-hm\\eqtl-tela-agil\\src\\components\\Main\\ServicesContent\\ContractData\\styles.ts":"24","E:\\www-hm\\eqtl-tela-agil\\src\\index.tsx":"25","E:\\www-hm\\eqtl-tela-agil\\src\\hooks\\debitsConsultation.tsx":"26","E:\\www-hm\\eqtl-tela-agil\\src\\utils\\inputMasks.ts":"27","E:\\www-hm\\eqtl-tela-agil\\src\\components\\LeftBar\\styles.ts":"28","E:\\www-hm\\eqtl-tela-agil\\src\\components\\CustomRadioGroup\\RadioOptions\\styles.ts":"29","E:\\www-hm\\eqtl-tela-agil\\src\\components\\Main\\ServicesContent\\ContractData\\index.tsx":"30","E:\\www-hm\\eqtl-tela-agil\\src\\utils\\addZeroesToNumber.ts":"31","E:\\www-hm\\eqtl-tela-agil\\src\\components\\Modal\\index.tsx":"32","E:\\www-hm\\eqtl-tela-agil\\src\\components\\Main\\ServicesContent\\styles.ts":"33","E:\\www-hm\\eqtl-tela-agil\\src\\components\\Main\\Header\\TagInfo\\index.tsx":"34","E:\\www-hm\\eqtl-tela-agil\\src\\hooks\\changeDueDateService.tsx":"35","E:\\www-hm\\eqtl-tela-agil\\src\\components\\Main\\styles.ts":"36","E:\\www-hm\\eqtl-tela-agil\\src\\components\\Main\\ServicesContent\\ClientData\\styles.ts":"37","E:\\www-hm\\eqtl-tela-agil\\src\\components\\Input\\styles.ts":"38","E:\\www-hm\\eqtl-tela-agil\\src\\components\\CustomRadioGroup\\index.tsx":"39","E:\\www-hm\\eqtl-tela-agil\\src\\App.tsx":"40","E:\\www-hm\\eqtl-tela-agil\\src\\utils\\hasSocialTariff.ts":"41","E:\\www-hm\\eqtl-tela-agil\\src\\utils\\getValidationErrors.ts":"42","E:\\www-hm\\eqtl-tela-agil\\src\\components\\Main\\ServicesContent\\index.tsx":"43","E:\\www-hm\\eqtl-tela-agil\\src\\components\\Services\\DueDateChange\\styles.ts":"44","E:\\www-hm\\eqtl-tela-agil\\src\\components\\Services\\MonitoringOfProtocols\\ProtocolsTable\\index.tsx":"45","E:\\www-hm\\eqtl-tela-agil\\src\\hooks\\index.tsx":"46","E:\\www-hm\\eqtl-tela-agil\\src\\components\\Button\\styles.ts":"47","E:\\www-hm\\eqtl-tela-agil\\src\\components\\OutlineInputRegex\\masks.ts":"48","E:\\www-hm\\eqtl-tela-agil\\src\\components\\Services\\DebitsConsultationModal\\index.tsx":"49","E:\\www-hm\\eqtl-tela-agil\\src\\routes\\index.tsx":"50","E:\\www-hm\\eqtl-tela-agil\\src\\components\\Input\\index.tsx":"51","E:\\www-hm\\eqtl-tela-agil\\src\\components\\Tooltip\\index.tsx":"52","E:\\www-hm\\eqtl-tela-agil\\src\\components\\Main\\ServicesContent\\QuickMenu\\index.tsx":"53","E:\\www-hm\\eqtl-tela-agil\\src\\components\\InputMask\\styles.ts":"54","E:\\www-hm\\eqtl-tela-agil\\src\\components\\AlertModal\\styles.ts":"55","E:\\www-hm\\eqtl-tela-agil\\src\\components\\Services\\MonitoringOfProtocols\\styles.ts":"56","E:\\www-hm\\eqtl-tela-agil\\src\\components\\Services\\PowerOutageFlow\\questions\\PowerOutageQuestions.ts":"57","E:\\www-hm\\eqtl-tela-agil\\src\\components\\Services\\ServiceNotesList\\ServiceNotesTable\\styles.ts":"58","E:\\www-hm\\eqtl-tela-agil\\src\\utils\\extractResponseData.ts":"59","E:\\www-hm\\eqtl-tela-agil\\src\\components\\Services\\InstallmentPaymentModal\\styles.ts":"60","E:\\www-hm\\eqtl-tela-agil\\src\\components\\Services\\PowerOutageFlow\\StepModal\\styles.ts":"61","E:\\www-hm\\eqtl-tela-agil\\src\\pages\\SignIn\\index.tsx":"62","E:\\www-hm\\eqtl-tela-agil\\src\\components\\StatusIndicator\\styles.ts":"63","E:\\www-hm\\eqtl-tela-agil\\src\\components\\Services\\PowerOutageFlow\\StepModal\\index.tsx":"64","E:\\www-hm\\eqtl-tela-agil\\src\\components\\Main\\ServicesContent\\QuickMenu\\styles.ts":"65","E:\\www-hm\\eqtl-tela-agil\\src\\components\\Services\\PowerOutageFlow\\index.tsx":"66"},{"size":1546,"mtime":1641922236969,"results":"67","hashOfConfig":"68"},{"size":2485,"mtime":1641922236673,"results":"69","hashOfConfig":"68"},{"size":248,"mtime":1641922236766,"results":"70","hashOfConfig":"68"},{"size":461,"mtime":1641922236751,"results":"71","hashOfConfig":"68"},{"size":3594,"mtime":1641922236798,"results":"72","hashOfConfig":"68"},{"size":7269,"mtime":1641922236969,"results":"73","hashOfConfig":"68"},{"size":313,"mtime":1641999536813,"results":"74","hashOfConfig":"68"},{"size":1132,"mtime":1641922236766,"results":"75","hashOfConfig":"68"},{"size":7796,"mtime":1641922236766,"results":"76","hashOfConfig":"68"},{"size":1318,"mtime":1641922236735,"results":"77","hashOfConfig":"68"},{"size":1548,"mtime":1641922236860,"results":"78","hashOfConfig":"68"},{"size":3515,"mtime":1641922236954,"results":"79","hashOfConfig":"68"},{"size":11285,"mtime":1641999536813,"results":"80","hashOfConfig":"68"},{"size":2298,"mtime":1641999536813,"results":"81","hashOfConfig":"68"},{"size":329,"mtime":1641922236688,"results":"82","hashOfConfig":"68"},{"size":1450,"mtime":1641922236751,"results":"83","hashOfConfig":"68"},{"size":2226,"mtime":1641922236735,"results":"84","hashOfConfig":"68"},{"size":801,"mtime":1641922236985,"results":"85","hashOfConfig":"68"},{"size":2517,"mtime":1641922236938,"results":"86","hashOfConfig":"68"},{"size":611,"mtime":1641922236782,"results":"87","hashOfConfig":"68"},{"size":313,"mtime":1641922236829,"results":"88","hashOfConfig":"68"},{"size":643,"mtime":1641922236969,"results":"89","hashOfConfig":"68"},{"size":2429,"mtime":1641922236782,"results":"90","hashOfConfig":"68"},{"size":750,"mtime":1641922236813,"results":"91","hashOfConfig":"68"},{"size":495,"mtime":1641922236969,"results":"92","hashOfConfig":"68"},{"size":1589,"mtime":1641922236954,"results":"93","hashOfConfig":"68"},{"size":1803,"mtime":1641922237047,"results":"94","hashOfConfig":"68"},{"size":2319,"mtime":1641922236766,"results":"95","hashOfConfig":"68"},{"size":386,"mtime":1641922236720,"results":"96","hashOfConfig":"68"},{"size":1699,"mtime":1642099206382,"results":"97","hashOfConfig":"68"},{"size":323,"mtime":1641922237032,"results":"98","hashOfConfig":"68"},{"size":941,"mtime":1641922236829,"results":"99","hashOfConfig":"68"},{"size":444,"mtime":1641922236829,"results":"100","hashOfConfig":"68"},{"size":434,"mtime":1641922236782,"results":"101","hashOfConfig":"68"},{"size":4075,"mtime":1641922236938,"results":"102","hashOfConfig":"68"},{"size":142,"mtime":1641922236829,"results":"103","hashOfConfig":"68"},{"size":860,"mtime":1641922236798,"results":"104","hashOfConfig":"68"},{"size":1362,"mtime":1641922236751,"results":"105","hashOfConfig":"68"},{"size":388,"mtime":1641922236735,"results":"106","hashOfConfig":"68"},{"size":352,"mtime":1642016159448,"results":"107","hashOfConfig":"68"},{"size":484,"mtime":1641922237047,"results":"108","hashOfConfig":"68"},{"size":374,"mtime":1641922237032,"results":"109","hashOfConfig":"68"},{"size":419,"mtime":1642078711032,"results":"110","hashOfConfig":"68"},{"size":1294,"mtime":1641922236876,"results":"111","hashOfConfig":"68"},{"size":1774,"mtime":1641922236891,"results":"112","hashOfConfig":"68"},{"size":1624,"mtime":1641922236954,"results":"113","hashOfConfig":"68"},{"size":396,"mtime":1641922236720,"results":"114","hashOfConfig":"68"},{"size":1021,"mtime":1641922236844,"results":"115","hashOfConfig":"68"},{"size":9544,"mtime":1641922236860,"results":"116","hashOfConfig":"68"},{"size":455,"mtime":1642016125155,"results":"117","hashOfConfig":"68"},{"size":1620,"mtime":1641922236751,"results":"118","hashOfConfig":"68"},{"size":364,"mtime":1641922236938,"results":"119","hashOfConfig":"68"},{"size":11067,"mtime":1642081437567,"results":"120","hashOfConfig":"68"},{"size":1217,"mtime":1641922236766,"results":"121","hashOfConfig":"68"},{"size":1441,"mtime":1641922236688,"results":"122","hashOfConfig":"68"},{"size":290,"mtime":1641922236891,"results":"123","hashOfConfig":"68"},{"size":3474,"mtime":1641922236907,"results":"124","hashOfConfig":"68"},{"size":1273,"mtime":1641922236907,"results":"125","hashOfConfig":"68"},{"size":7797,"mtime":1642079721902,"results":"126","hashOfConfig":"68"},{"size":2634,"mtime":1641922236876,"results":"127","hashOfConfig":"68"},{"size":903,"mtime":1641922236891,"results":"128","hashOfConfig":"68"},{"size":3082,"mtime":1642016143074,"results":"129","hashOfConfig":"68"},{"size":664,"mtime":1641922236922,"results":"130","hashOfConfig":"68"},{"size":5269,"mtime":1641922236891,"results":"131","hashOfConfig":"68"},{"size":1422,"mtime":1641922236813,"results":"132","hashOfConfig":"68"},{"size":1248,"mtime":1641922236907,"results":"133","hashOfConfig":"68"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},"i8kjhn",{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"159"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"163"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"146"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"175"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"155"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"235"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"235"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"235"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"235"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"235"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"258","messages":"259","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"270","messages":"271","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\www-hm\\eqtl-tela-agil\\src\\hooks\\toast.tsx",[],["286","287","288","289","290"],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\AlertModal\\index.tsx",["291"],"import React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport Rodal from 'rodal';\r\nimport { FiCheck, FiAlertTriangle, FiXCircle } from 'react-icons/fi';\r\nimport { GoInfo } from 'react-icons/go';\r\n\r\nimport 'rodal/lib/rodal.css';\r\n\r\nimport { AlertMessage } from '../../hooks/alert';\r\n\r\nimport {\r\n  AlertContent,\r\n  AlertTitle,\r\n  AlertDescription,\r\n  ButtonsContainer,\r\n  ConfirmationButton,\r\n  ConfirmationButtonText,\r\n  CancelButton,\r\n  CancelButtonText,\r\n} from './styles';\r\n\r\ninterface AlertProps {\r\n  message: AlertMessage;\r\n  isOpen: boolean;\r\n  setIsOpen: () => void;\r\n}\r\n\r\nconst icons = {\r\n  info: <GoInfo size={80} color=\"#0DC9F0\" />,\r\n  error: <FiXCircle size={80} color=\"#eb5757\" />,\r\n  success: <FiCheck size={80} color=\"#04d361\" />,\r\n  warning: <FiAlertTriangle size={80} color=\"#FFC105\" />,\r\n};\r\n\r\nconst AlertModal: React.FC<AlertProps> = ({ message, isOpen, setIsOpen }) => {\r\n  const [alertStatus, setAlertStatus] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setAlertStatus(isOpen);\r\n  }, [isOpen]);\r\n\r\n  const handleConfirmationClick = useCallback(async () => {\r\n    if (message.confirmationAction) {\r\n      message.confirmationAction();\r\n    }\r\n\r\n    setIsOpen();\r\n  }, [setIsOpen, message]);\r\n\r\n  const handleCancelClick = useCallback(() => {\r\n    if (message.cancelAction) {\r\n      message.cancelAction();\r\n    }\r\n\r\n    setIsOpen();\r\n  }, [setIsOpen, message]);\r\n\r\n  return (\r\n    <Rodal\r\n      visible={alertStatus}\r\n      showCloseButton={false}\r\n      customStyles={{\r\n        borderRadius: '8px',\r\n        padding: '48px 64px',\r\n        width: '480px',\r\n        height: 'fit-content',\r\n      }}\r\n      customMaskStyles={{\r\n        background: 'rgba(0, 0, 0, 0.6)',\r\n      }}\r\n    >\r\n      <AlertContent>\r\n        {icons[message.type || 'info']}\r\n\r\n        <AlertTitle>{message.title}</AlertTitle>\r\n        <AlertDescription>{message.description}</AlertDescription>\r\n\r\n        <ButtonsContainer>\r\n          {message.cancelButtonText && (\r\n            <CancelButton onClick={handleCancelClick}>\r\n              <CancelButtonText>{message.cancelButtonText}</CancelButtonText>\r\n            </CancelButton>\r\n          )}\r\n\r\n          <ConfirmationButton onClick={handleConfirmationClick}>\r\n            <ConfirmationButtonText>\r\n              {message.confirmationText}\r\n            </ConfirmationButtonText>\r\n          </ConfirmationButton>\r\n        </ButtonsContainer>\r\n      </AlertContent>\r\n    </Rodal>\r\n  );\r\n};\r\n\r\nexport default AlertModal;\r\n",["292","293","294","295","296"],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\Loading\\styles.ts",[],["297","298","299","300","301"],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\FindContractModal\\styles.ts",[],["302","303","304","305","306"],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\Main\\ServicesContent\\ClientData\\index.tsx",[],["307","308","309","310","311"],"E:\\www-hm\\eqtl-tela-agil\\src\\hooks\\whatsappSending.tsx",[],["312","313","314","315","316"],"E:\\www-hm\\eqtl-tela-agil\\src\\services\\authenticationApi.ts",[],["317","318","319","320","321"],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\Loading\\index.tsx",["322"],"import React, { useState, useEffect } from 'react';\r\nimport Rodal from 'rodal';\r\nimport Spinner from 'react-spinkit';\r\n\r\nimport 'rodal/lib/rodal.css';\r\n\r\nimport { Content } from './styles';\r\n\r\ninterface LoadingModalProps {\r\n  isOpen: boolean;\r\n  message?: string;\r\n  setIsOpen: () => void;\r\n}\r\n\r\nconst LoadingModal: React.FC<LoadingModalProps> = ({\r\n  isOpen,\r\n  message,\r\n  setIsOpen,\r\n}) => {\r\n  const [modalStatus, setModalStatus] = useState(isOpen);\r\n\r\n  useEffect(() => {\r\n    setModalStatus(isOpen);\r\n  }, [isOpen]);\r\n\r\n  return (\r\n    <Rodal\r\n      visible={modalStatus}\r\n      showCloseButton={false}\r\n      customStyles={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        background: 'transparent',\r\n        border: 'none',\r\n        boxShadow: 'none',\r\n        width: 'fit-content',\r\n      }}\r\n      customMaskStyles={{\r\n        background: 'rgba(0, 0, 0, 0.6)',\r\n      }}\r\n    >\r\n      <Content>\r\n        <Spinner name=\"ball-pulse-sync\" fadeIn=\"none\" color=\"#fff\" />\r\n        <h2>{message}</h2>\r\n      </Content>\r\n    </Rodal>\r\n  );\r\n};\r\n\r\nexport default LoadingModal;\r\n",["323","324","325","326","327"],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\LeftBar\\index.tsx",["328","329"],"import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from 'react';\r\nimport { FiPower } from 'react-icons/fi';\r\nimport { FormHandles } from '@unform/core';\r\nimport { Form } from '@unform/web';\r\nimport { format } from 'date-fns';\r\nimport * as Yup from 'yup';\r\nimport { useLoading } from 'react-use-loading';\r\nimport { useStopwatch } from 'react-timer-hook';\r\n\r\nimport getValidationErrors from '../../utils/getValidationErrors';\r\n\r\nimport {\r\n  Container,\r\n  Logo,\r\n  WelcomeText,\r\n  Username,\r\n  UserMenu,\r\n  LogoutButton,\r\n  LogoutButtonText,\r\n  ServiceForm,\r\n  StartServiceButton,\r\n  FinishServiceButton,\r\n  Cronometro,\r\n} from './styles';\r\n\r\nimport OutlineInput from '../OutlineInput';\r\nimport OutlineInputRegex from '../OutlineInputRegex';\r\nimport OutlineInputMask from '../OutlineInputMask';\r\nimport CustomRadioGroup from '../CustomRadioGroup';\r\nimport RadioOptions from '../CustomRadioGroup/RadioOptions';\r\nimport Loading from '../Loading';\r\nimport FindContractModal from '../FindContractModal';\r\n\r\nimport logoWhiteImg from '../../assets/logo-white.svg';\r\n\r\nimport { useAuth } from '../../hooks/auth';\r\nimport { useCustomerService } from '../../hooks/customerService';\r\nimport { useToast } from '../../hooks/toast';\r\nimport { useAlert } from '../../hooks/alert';\r\n\r\ninterface StartServiceFormData {\r\n  state: string;\r\n  contract: string;\r\n  cpf: string;\r\n}\r\n\r\nconst LeftBar: React.FC = () => {\r\n  const { user, signOut } = useAuth();\r\n  const { addToast } = useToast();\r\n  const { customAlert } = useAlert();\r\n  const [{ isLoading, message }, { start, stop }] = useLoading();\r\n\r\n  const {\r\n    start: startTimer,\r\n    reset: resetTimer,\r\n    isRunning,\r\n    hours,\r\n    seconds,\r\n    minutes,\r\n  } = useStopwatch({\r\n    autoStart: false,\r\n  });\r\n\r\n  const {\r\n    startService,\r\n    customer,\r\n    finishService,\r\n    serviceStarted,\r\n    findAllContracts,\r\n    contracts,\r\n  } = useCustomerService();\r\n\r\n  const [openModalFindContract, setOpenModalFindContract] = useState(false);\r\n\r\n  const formRef = useRef<FormHandles>(null);\r\n\r\n  const toggleModalFindContract = useCallback(() => {\r\n    setOpenModalFindContract(!openModalFindContract);\r\n  }, [openModalFindContract]);\r\n\r\n  const handleSubmit = useCallback(\r\n    async (data: StartServiceFormData) => {\r\n      try {\r\n        start('Localizando cliente ...');\r\n\r\n        formRef.current?.setErrors({});\r\n\r\n        const schema = Yup.object().shape({\r\n          contract: Yup.string().when('cpf', {\r\n            is: (val: string) => !val.length,\r\n            then: Yup.string().required('Conta contrato obrigatória'),\r\n            otherwise: Yup.string(),\r\n          }),\r\n          cpf: Yup.string(),\r\n        });\r\n\r\n        await schema.validate(data, {\r\n          abortEarly: false,\r\n        });\r\n\r\n        if (data.contract && data.cpf) {\r\n          customAlert({\r\n            type: 'error',\r\n            title: 'Erro no formulário',\r\n            description:\r\n              'Utilize apenas um dos campos (Conta contrato ou CPF / CNPJ)',\r\n            confirmationText: 'OK',\r\n          });\r\n\r\n          return;\r\n        }\r\n\r\n        if (!data.contract && data.cpf) {\r\n          const unformattedCpf = data.cpf.replace(/\\D/gim, '');\r\n\r\n          const responseContracts = await findAllContracts({\r\n            stateCode: data.state[0],\r\n            cpf: unformattedCpf,\r\n          });\r\n\r\n          if (responseContracts.length > 1) {\r\n            toggleModalFindContract();\r\n            return;\r\n          }\r\n\r\n          await startService({\r\n            stateCode: data.state[0],\r\n            contractAccount: responseContracts[0].contractAccount,\r\n          });\r\n\r\n          return;\r\n        }\r\n\r\n        const unformattedContract = data.contract.replace(/\\D/gim, '');\r\n\r\n        await startService({\r\n          stateCode: data.state[0],\r\n          contractAccount: unformattedContract,\r\n        });\r\n      } catch (err) {\r\n        if (err instanceof Yup.ValidationError) {\r\n          const errors = getValidationErrors(err);\r\n\r\n          formRef.current?.setErrors(errors);\r\n          return;\r\n        }\r\n\r\n        customAlert({\r\n          type: 'error',\r\n          title: 'Erro no atendimento',\r\n          description:\r\n            'Não foi possível localizar o cliente, cheque as informações',\r\n          confirmationText: 'OK',\r\n        });\r\n      } finally {\r\n        stop();\r\n      }\r\n    },\r\n    [\r\n      startService,\r\n      start,\r\n      stop,\r\n      customAlert,\r\n      findAllContracts,\r\n      toggleModalFindContract,\r\n    ],\r\n  );\r\n\r\n  const formattedTime = useMemo(() => {\r\n    return format(new Date(0, 0, 0, hours, minutes, seconds), 'mm:ss');\r\n  }, [hours, minutes, seconds]);\r\n\r\n  const handleFinishService = useCallback(async () => {\r\n    try {\r\n      start('Finalizando atendimento ...');\r\n\r\n      await finishService(formattedTime);\r\n    } catch {\r\n      addToast({\r\n        type: 'error',\r\n        title: 'Registro de logs',\r\n        description: 'Ocorreu um erro ao salvar o log do atendimento.',\r\n      });\r\n    } finally {\r\n      stop();\r\n    }\r\n  }, [finishService, formattedTime, addToast, start, stop]);\r\n\r\n  useEffect(() => {\r\n    if (serviceStarted && !isRunning) {\r\n      startTimer();\r\n    }\r\n\r\n    if (!serviceStarted) {\r\n      resetTimer();\r\n    }\r\n  }, [serviceStarted, startTimer, isRunning, resetTimer]);\r\n\r\n  return (\r\n    <Container>\r\n      <UserMenu>\r\n        <Logo src={logoWhiteImg} alt=\"Equatorial Energia\" />\r\n\r\n        <WelcomeText>\r\n          Bem vindo,\r\n          <Username>{user.name}</Username>\r\n        </WelcomeText>\r\n\r\n        <LogoutButton onClick={signOut}>\r\n          <FiPower />\r\n          <LogoutButtonText>Sair</LogoutButtonText>\r\n        </LogoutButton>\r\n      </UserMenu>\r\n\r\n      <ServiceForm>\r\n        <Form\r\n          ref={formRef}\r\n          onSubmit={handleSubmit}\r\n          initialData={{ state: '82' }}\r\n        >\r\n          <CustomRadioGroup fieldLabel=\"Estado\">\r\n            <RadioOptions\r\n              name=\"state\"\r\n              options={[\r\n                { id: 'radio1', value: '82', label: 'Alagoas' },\r\n                { id: 'radio2', value: '98', label: 'Maranhão' },\r\n                { id: 'radio3', value: '95', label: 'Pará' },\r\n                { id: 'radio4', value: '86', label: 'Piauí' },\r\n              ]}\r\n              disabled={serviceStarted}\r\n            />\r\n          </CustomRadioGroup>\r\n\r\n          <OutlineInputRegex\r\n            name=\"contract\"\r\n            type=\"text\"\r\n            mask=\"contractAccount\"\r\n            placeholder=\"Código único ou conta contrato\"\r\n            autoComplete=\"off\"\r\n            disabled={serviceStarted}\r\n          />\r\n\r\n          <OutlineInputRegex\r\n            name=\"cpf\"\r\n            type=\"text\"\r\n            mask=\"cpfCnpj\"\r\n            placeholder=\"CPF ou CNPJ\"\r\n            autoComplete=\"off\"\r\n            disabled={serviceStarted}\r\n          />\r\n\r\n          {serviceStarted && customer ? (\r\n            <FinishServiceButton type=\"button\" onClick={handleFinishService}>\r\n              Encerrar atendimento\r\n            </FinishServiceButton>\r\n          ) : (\r\n            <StartServiceButton type=\"submit\">\r\n              Iniciar atendimento\r\n            </StartServiceButton>\r\n          )}\r\n\r\n          {serviceStarted && customer && (\r\n            <Cronometro>\r\n              <span>Tempo de atendimento:</span>\r\n              <h1>{formattedTime}</h1>\r\n            </Cronometro>\r\n          )}\r\n        </Form>\r\n      </ServiceForm>\r\n\r\n      {contracts && (\r\n        <FindContractModal\r\n          isOpen={openModalFindContract}\r\n          setIsOpen={toggleModalFindContract}\r\n        />\r\n      )}\r\n\r\n      {isLoading && (\r\n        <Loading isOpen={isLoading} message={message} setIsOpen={stop} />\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default LeftBar;\r\n",["330","331","332","333","334"],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\FindContractModal\\ContractsTable\\styles.ts",[],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\OutlineInputRegex\\styles.ts",[],"E:\\www-hm\\eqtl-tela-agil\\src\\hooks\\monitoringOfProtocols.tsx",[],"E:\\www-hm\\eqtl-tela-agil\\src\\hooks\\customerService.tsx",["335","336","337","338"],"import React, { createContext, useCallback, useContext, useState } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport Swal from 'sweetalert2';\r\n\r\nimport { useAuth } from './auth';\r\n\r\nimport Customer from '../types/Customer';\r\nimport Installation from '../types/Installation';\r\nimport Debits from '../types/Debits';\r\n\r\nimport {\r\n  extractResponseData,\r\n  getInstallationData,\r\n  getServiceNotes,\r\n} from '../utils/extractResponseData';\r\n\r\nimport ServiceNotes from '../types/ServiceNotes';\r\nimport eqtlBarApi from '../services/eqtlBarApi';\r\nimport Address from '../types/Address';\r\n\r\ninterface CustomerServiceState {\r\n  operatingCompany: string;\r\n  customer: Customer;\r\n  installation: Installation;\r\n  debits: Debits;\r\n  serviceNotes: ServiceNotes;\r\n  protocol?: string;\r\n  contracts: Contract[];\r\n}\r\n\r\ninterface GetCustomerData {\r\n  stateCode: string;\r\n  contractAccount: string;\r\n}\r\n\r\ninterface StartServiceProps {\r\n  stateCode: string;\r\n  contractAccount: string;\r\n}\r\n\r\ninterface CustomerServiceContextData {\r\n  operatingCompany: string;\r\n  protocol: string | undefined;\r\n  customer: Customer;\r\n  installation: Installation;\r\n  debits: Debits;\r\n  serviceNotes: ServiceNotes;\r\n  contracts: Contract[];\r\n  serviceStarted: boolean;\r\n  fetchServiceData(customerData: GetCustomerData): Promise<void>;\r\n  fetchInstallationData({\r\n    contractAccount,\r\n    operatingCompany,\r\n  }: FetchInstallationDataProps): Promise<void>;\r\n  startService({\r\n    stateCode,\r\n    contractAccount,\r\n  }: StartServiceProps): Promise<void>;\r\n  finishService(attendanceTime: string): Promise<void>;\r\n  registerServicePerformed({\r\n    serviceName,\r\n    executionDate,\r\n  }: ServicePerformed): void;\r\n  findAllContracts({\r\n    stateCode,\r\n    cpf,\r\n  }: FindAllContractsProps): Promise<Contract[]>;\r\n  generateProtocol({\r\n    operatingCompany,\r\n    contractAccount,\r\n  }: GenerateProtocolProps): Promise<void>;\r\n}\r\n\r\ninterface GenerateProtocolProps {\r\n  operatingCompany: string;\r\n  contractAccount: string;\r\n}\r\n\r\ninterface FindAllContractsProps {\r\n  stateCode: string;\r\n  cpf: string;\r\n}\r\n\r\ninterface FetchInstallationDataProps {\r\n  contractAccount: string;\r\n  operatingCompany: string;\r\n}\r\n\r\ninterface ServicePerformed {\r\n  serviceName: string;\r\n  executionDate: Date;\r\n}\r\n\r\ninterface Contract {\r\n  contractAccount: string;\r\n  address: Address;\r\n}\r\n\r\nconst CustomerServiceContext = createContext<CustomerServiceContextData>(\r\n  {} as CustomerServiceContextData,\r\n);\r\n\r\nconst CustomerServiceProvider: React.FC = ({ children }) => {\r\n  const { user } = useAuth();\r\n\r\n  const [serviceStarted, setServiceStarted] = useState(false);\r\n  const [servicesPerformed, setServicesPerformed] = useState<\r\n    ServicePerformed[]\r\n  >([]);\r\n\r\n  const [\r\n    customerServiceData,\r\n    setCustomerServiceData,\r\n  ] = useState<CustomerServiceState>(() => {\r\n    const storagedCustomerServiceData = localStorage.getItem(\r\n      '@TelaAgil:customerServiceData',\r\n    );\r\n\r\n    const storagedProtocol = localStorage.getItem('@TelaAgil:protocol');\r\n\r\n    if (storagedCustomerServiceData) {\r\n      const {\r\n        operatingCompany,\r\n        customer,\r\n        installation,\r\n        debits,\r\n        serviceNotes,\r\n      } = JSON.parse(storagedCustomerServiceData);\r\n\r\n      const customerServiceState: CustomerServiceState = {\r\n        operatingCompany,\r\n        customer,\r\n        installation,\r\n        debits,\r\n        serviceNotes,\r\n        contracts: [],\r\n      };\r\n\r\n      if (storagedProtocol) {\r\n        customerServiceState.protocol = storagedProtocol;\r\n      }\r\n\r\n      return customerServiceState;\r\n    }\r\n\r\n    return {} as CustomerServiceState;\r\n  });\r\n\r\n  const findAllContracts = useCallback(\r\n    async ({ stateCode, cpf }: FindAllContractsProps) => {\r\n      const response = await eqtlBarApi.get('/atendimento/v1/clientes', {\r\n        params: {\r\n          cpf,\r\n          flagDadosCliente: true,\r\n          empresaOperadora: stateCode,\r\n          codigoTransacao: uuid(),\r\n        },\r\n      });\r\n\r\n      const contracts: Contract[] = response.data.data.cliente.map(\r\n        (contract: any) => ({\r\n          contractAccount:\r\n            typeof contract.contaContrato === 'string'\r\n              ? contract.contaContrato.replace(/^0+/, '')\r\n              : contract.contaContrato.toString().replace(/^0+/, ''),\r\n          address: {\r\n            publicArea: contract.endereco.logradouro,\r\n            number: contract.endereco.numero,\r\n            neighborhood: contract.endereco.bairro,\r\n            city: contract.endereco.cidade,\r\n            uf: contract.endereco.uf,\r\n            postalCode: contract.endereco.cep,\r\n            referencePoint: contract.endereco.pontoReferencia,\r\n          },\r\n        }),\r\n      );\r\n\r\n      if (!contracts.length) {\r\n        throw new Error();\r\n      } else {\r\n        setCustomerServiceData({\r\n          ...customerServiceData,\r\n          operatingCompany: stateCode,\r\n          contracts,\r\n        });\r\n\r\n        return contracts;\r\n      }\r\n    },\r\n    [customerServiceData],\r\n  );\r\n\r\n  const fetchServiceData = useCallback(\r\n    async ({ stateCode, contractAccount }: GetCustomerData) => {\r\n      const response = await eqtlBarApi.get('/atendimento/v1/clientes', {\r\n        params: {\r\n          codigoTransacao: uuid(),\r\n          contrato: contractAccount,\r\n          empresaOperadora: stateCode,\r\n          flagDadosCliente: true,\r\n          flagStatusInstalacao: true,\r\n          flagPossuiDebitos: true,\r\n          flagDadosTecnicos: true,\r\n          flagNotasAbertas: true,\r\n          flagNotasEncerradas: true,\r\n          flagDetalheDebitoCobranca: true,\r\n          flagDetalheDebitoFatura: true,\r\n        },\r\n      });\r\n\r\n      console.log(response.data);\r\n\r\n      const {\r\n        customer,\r\n        installation,\r\n        debits,\r\n        serviceNotes,\r\n      } = extractResponseData(response, stateCode);\r\n\r\n      console.log({\r\n        customer,\r\n        installation,\r\n        debits,\r\n        serviceNotes,\r\n      });\r\n\r\n      localStorage.setItem(\r\n        '@TelaAgil:customerServiceData',\r\n        JSON.stringify({\r\n          operatingCompany: stateCode,\r\n          customer,\r\n          installation,\r\n          debits,\r\n          serviceNotes,\r\n          contracts: [],\r\n        }),\r\n      );\r\n\r\n      setCustomerServiceData({\r\n        operatingCompany: stateCode,\r\n        customer,\r\n        installation,\r\n        debits,\r\n        serviceNotes,\r\n        contracts: [],\r\n      });\r\n    },\r\n    [],\r\n  );\r\n\r\n  const generateProtocol = useCallback(\r\n    async ({ operatingCompany, contractAccount }: GenerateProtocolProps) => {\r\n      const response = await eqtlBarApi.get('/atendimento/v1/clientes', {\r\n        params: {\r\n          empresaOperadora: operatingCompany,\r\n          contrato: contractAccount,\r\n          flagGerarProtocolo: true,\r\n          codigoTransacao: uuid(),\r\n        },\r\n      });\r\n\r\n      localStorage.setItem('@TelaAgil:protocol', response.data.data.protocolo);\r\n\r\n      setCustomerServiceData(state => ({\r\n        ...state,\r\n        protocol: response.data.data.protocolo,\r\n      }));\r\n    },\r\n    [],\r\n  );\r\n\r\n  const fetchInstallationData = useCallback(\r\n    async ({\r\n      contractAccount,\r\n      operatingCompany,\r\n    }: FetchInstallationDataProps) => {\r\n      const response = await eqtlBarApi.get('/atendimento/v1/clientes', {\r\n        params: {\r\n          codigoTransacao: uuid(),\r\n          contrato: contractAccount,\r\n          empresaOperadora: operatingCompany,\r\n          flagStatusInstalacao: true,\r\n          flagDadosTecnicos: true,\r\n          flagNotasAbertas: true,\r\n          flagNotasEncerradas: true,\r\n        },\r\n      });\r\n\r\n      const responseInstallationData = response.data.data.instalacao;\r\n\r\n      const installationData = getInstallationData(\r\n        responseInstallationData,\r\n        operatingCompany,\r\n      );\r\n\r\n      const serviceNotesData = getServiceNotes(response);\r\n\r\n      setCustomerServiceData({\r\n        ...customerServiceData,\r\n        installation: installationData,\r\n        serviceNotes: serviceNotesData,\r\n      });\r\n\r\n      localStorage.setItem(\r\n        '@TelaAgil:customerServiceData',\r\n        JSON.stringify({\r\n          ...customerServiceData,\r\n          installation: installationData,\r\n          serviceNotes: serviceNotesData,\r\n        }),\r\n      );\r\n    },\r\n    [customerServiceData],\r\n  );\r\n\r\n  const startService = useCallback(\r\n    async ({ stateCode, contractAccount }: StartServiceProps) => {\r\n      const formattedContractAccount = contractAccount.replace(/^0+/, '');\r\n\r\n      try {\r\n        await fetchServiceData({\r\n          stateCode,\r\n          contractAccount: formattedContractAccount,\r\n        });\r\n\r\n        setServiceStarted(true);\r\n      } catch (err) {\r\n        console.log(err);\r\n        Swal.fire({\r\n          icon: 'error',\r\n          title: 'Erro no atendimento',\r\n          html:\r\n            '<p>Ocorreu um erro ao iniciar o atendimento, cheque as informações do cliente</p>',\r\n          confirmButtonText: `OK`,\r\n          confirmButtonColor: '#3c1490',\r\n        });\r\n      }\r\n    },\r\n    [fetchServiceData],\r\n  );\r\n\r\n  const saveAttendanceLog = useCallback(\r\n    async (attendanceTime: string) => {\r\n      await eqtlBarApi.post('/logs', {\r\n        user_id: user.id,\r\n        username: user.name,\r\n        contractAccount: customerServiceData.customer.contractAccount,\r\n        attendanceTime,\r\n        services: servicesPerformed,\r\n      });\r\n    },\r\n    [user, customerServiceData.customer, servicesPerformed],\r\n  );\r\n\r\n  const finishService = useCallback(\r\n    async (attendanceTime: string) => {\r\n      await saveAttendanceLog(attendanceTime);\r\n\r\n      localStorage.removeItem('@TelaAgil:protocol');\r\n      localStorage.removeItem('@TelaAgil:contracts');\r\n      localStorage.removeItem('@TelaAgil:customerServiceData');\r\n\r\n      setCustomerServiceData({} as CustomerServiceContextData);\r\n\r\n      setServicesPerformed([]);\r\n\r\n      setServiceStarted(false);\r\n    },\r\n    [saveAttendanceLog],\r\n  );\r\n\r\n  const registerServicePerformed = useCallback(\r\n    ({ serviceName, executionDate }: ServicePerformed) => {\r\n      setServicesPerformed(oldServices => [\r\n        ...oldServices,\r\n        { serviceName, executionDate },\r\n      ]);\r\n    },\r\n    [],\r\n  );\r\n\r\n  return (\r\n    <CustomerServiceContext.Provider\r\n      value={{\r\n        operatingCompany: customerServiceData.operatingCompany,\r\n        protocol: customerServiceData.protocol,\r\n        customer: customerServiceData.customer,\r\n        installation: customerServiceData.installation,\r\n        debits: customerServiceData.debits,\r\n        serviceNotes: customerServiceData.serviceNotes,\r\n        contracts: customerServiceData.contracts,\r\n        serviceStarted,\r\n        fetchServiceData,\r\n        fetchInstallationData,\r\n        startService,\r\n        finishService,\r\n        registerServicePerformed,\r\n        findAllContracts,\r\n        generateProtocol,\r\n      }}\r\n    >\r\n      {children}\r\n    </CustomerServiceContext.Provider>\r\n  );\r\n};\r\n\r\nfunction useCustomerService(): CustomerServiceContextData {\r\n  const context = useContext(CustomerServiceContext);\r\n\r\n  if (!context) {\r\n    throw new Error(\r\n      'useCustomerService must be used within a CustomerServiceProvider',\r\n    );\r\n  }\r\n\r\n  return context;\r\n}\r\n\r\nexport { CustomerServiceProvider, useCustomerService };\r\n","E:\\www-hm\\eqtl-tela-agil\\src\\utils\\getInstallationSubclassName.ts",[],["339","340","341","342","343"],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\Button\\index.tsx",[],["344","345","346","347","348"],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\FindContractModal\\index.tsx",["349","350"],"import React from 'react';\r\n\r\nimport { useCustomerService } from '../../hooks/customerService';\r\n\r\nimport Modal from '../Modal';\r\nimport ContractsTable from './ContractsTable';\r\n\r\nimport { ModalContent, OwnerContainer, OwnerLabel, OwnerName } from './styles';\r\n\r\ninterface ModalProps {\r\n  isOpen: boolean;\r\n  setIsOpen: () => void;\r\n}\r\n\r\ninterface Contract {\r\n  contractAccount: string;\r\n  address: string;\r\n}\r\n\r\nconst FindContractModal: React.FC<ModalProps> = ({ isOpen, setIsOpen }) => {\r\n  const { contracts } = useCustomerService();\r\n\r\n  const data: Contract[] = contracts.map(contract => ({\r\n    contractAccount: contract.contractAccount,\r\n    address: `${contract.address.publicArea}, ${contract.address.number}, ${contract.address.neighborhood}, ${contract.address.city} - ${contract.address.uf}, CEP ${contract.address.postalCode}`,\r\n  }));\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={isOpen}\r\n      setIsOpen={setIsOpen}\r\n      customStyles={{\r\n        borderRadius: '8px',\r\n        padding: '48px 0',\r\n        width: 'fit-content',\r\n        height: 'fit-content',\r\n      }}\r\n    >\r\n      <ModalContent>\r\n        <OwnerContainer>\r\n          {/* <OwnerLabel>Nome do titular:</OwnerLabel> */}\r\n          {/* <OwnerName>{contracts && contracts[0].owner}</OwnerName> */}\r\n        </OwnerContainer>\r\n\r\n        <ContractsTable data={data} closeModal={setIsOpen} />\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default FindContractModal;\r\n","E:\\www-hm\\eqtl-tela-agil\\src\\components\\FindContractModal\\ContractsTable\\index.tsx",["351","352"],"import React, { useCallback } from 'react';\r\nimport { useLoading } from 'react-use-loading';\r\n\r\nimport { Container, RCTable } from './styles';\r\nimport { useCustomerService } from '../../../hooks/customerService';\r\nimport { useAlert } from '../../../hooks/alert';\r\n\r\nimport Loading from '../../Loading';\r\n\r\ninterface Contract {\r\n  contractAccount: string;\r\n  address: string;\r\n}\r\n\r\ninterface TableProps {\r\n  data: Contract[];\r\n  closeModal(): void;\r\n}\r\n\r\nconst ContractsTable: React.FC<TableProps> = ({ data, closeModal }) => {\r\n  const { customAlert } = useAlert();\r\n  const [\r\n    { isLoading, message },\r\n    { start: startLoading, stop: stopLoading },\r\n  ] = useLoading();\r\n\r\n  const { startService, operatingCompany } = useCustomerService();\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Conta contrato',\r\n      dataIndex: 'contractAccount',\r\n      key: 'contractAccount',\r\n    },\r\n    {\r\n      title: 'Endereço',\r\n      dataIndex: 'address',\r\n      key: 'address',\r\n    },\r\n  ];\r\n\r\n  const onRowClick = useCallback(\r\n    async (record, index, event) => {\r\n      try {\r\n        startLoading('Iniciando atendimento ...');\r\n\r\n        if (record.contractAccount) {\r\n          await startService({\r\n            stateCode: operatingCompany,\r\n            contractAccount: record.contractAccount,\r\n          });\r\n        }\r\n      } catch (err) {\r\n        customAlert({\r\n          type: 'error',\r\n          title: 'Erro no atendimento',\r\n          description: 'Não foi iniciar o atendimento.',\r\n          confirmationText: 'OK',\r\n        });\r\n      } finally {\r\n        closeModal();\r\n        stopLoading();\r\n      }\r\n    },\r\n    [\r\n      closeModal,\r\n      customAlert,\r\n      operatingCompany,\r\n      startService,\r\n      startLoading,\r\n      stopLoading,\r\n    ],\r\n  );\r\n\r\n  return (\r\n    <Container>\r\n      <RCTable\r\n        columns={columns}\r\n        data={data}\r\n        tableLayout=\"auto\"\r\n        rowKey=\"contractAccount\"\r\n        onRow={(record, index) => ({\r\n          onClick: onRowClick.bind(null, record, index),\r\n        })}\r\n      />\r\n\r\n      {isLoading && (\r\n        <Loading isOpen={isLoading} message={message} setIsOpen={stopLoading} />\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ContractsTable;\r\n","E:\\www-hm\\eqtl-tela-agil\\src\\pages\\SignIn\\styles.ts",[],"E:\\www-hm\\eqtl-tela-agil\\src\\hooks\\auth.tsx",[],["353","354","355","356","357"],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\Main\\Header\\TagInfo\\styles.ts",[],["358","359","360","361","362"],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\Main\\index.tsx",[],"E:\\www-hm\\eqtl-tela-agil\\src\\pages\\Dashboard\\index.tsx",[],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\Main\\Header\\index.tsx",[],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\Main\\ServicesContent\\ContractData\\styles.ts",[],"E:\\www-hm\\eqtl-tela-agil\\src\\index.tsx",[],"E:\\www-hm\\eqtl-tela-agil\\src\\hooks\\debitsConsultation.tsx",[],"E:\\www-hm\\eqtl-tela-agil\\src\\utils\\inputMasks.ts",[],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\LeftBar\\styles.ts",[],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\CustomRadioGroup\\RadioOptions\\styles.ts",[],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\Main\\ServicesContent\\ContractData\\index.tsx",[],"E:\\www-hm\\eqtl-tela-agil\\src\\utils\\addZeroesToNumber.ts",[],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\Modal\\index.tsx",["363"],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\Main\\ServicesContent\\styles.ts",[],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\Main\\Header\\TagInfo\\index.tsx",[],"E:\\www-hm\\eqtl-tela-agil\\src\\hooks\\changeDueDateService.tsx",[],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\Main\\styles.ts",[],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\Main\\ServicesContent\\ClientData\\styles.ts",[],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\Input\\styles.ts",[],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\CustomRadioGroup\\index.tsx",[],"E:\\www-hm\\eqtl-tela-agil\\src\\App.tsx",[],"E:\\www-hm\\eqtl-tela-agil\\src\\utils\\hasSocialTariff.ts",[],["364","365","366","367","368"],"E:\\www-hm\\eqtl-tela-agil\\src\\utils\\getValidationErrors.ts",[],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\Main\\ServicesContent\\index.tsx",[],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\Services\\DueDateChange\\styles.ts",[],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\Services\\MonitoringOfProtocols\\ProtocolsTable\\index.tsx",["369"],"E:\\www-hm\\eqtl-tela-agil\\src\\hooks\\index.tsx",[],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\Button\\styles.ts",[],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\OutlineInputRegex\\masks.ts",[],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\Services\\DebitsConsultationModal\\index.tsx",["370"],"E:\\www-hm\\eqtl-tela-agil\\src\\routes\\index.tsx",[],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\Input\\index.tsx",[],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\Tooltip\\index.tsx",[],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\Main\\ServicesContent\\QuickMenu\\index.tsx",["371","372","373"],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\InputMask\\styles.ts",[],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\AlertModal\\styles.ts",[],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\Services\\MonitoringOfProtocols\\styles.ts",[],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\Services\\PowerOutageFlow\\questions\\PowerOutageQuestions.ts",[],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\Services\\ServiceNotesList\\ServiceNotesTable\\styles.ts",[],"E:\\www-hm\\eqtl-tela-agil\\src\\utils\\extractResponseData.ts",["374","375","376","377","378","379","380"],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\Services\\InstallmentPaymentModal\\styles.ts",[],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\Services\\PowerOutageFlow\\StepModal\\styles.ts",[],"E:\\www-hm\\eqtl-tela-agil\\src\\pages\\SignIn\\index.tsx",[],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\StatusIndicator\\styles.ts",[],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\Services\\PowerOutageFlow\\StepModal\\index.tsx",[],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\Main\\ServicesContent\\QuickMenu\\styles.ts",[],"E:\\www-hm\\eqtl-tela-agil\\src\\components\\Services\\PowerOutageFlow\\index.tsx",["381"],{"ruleId":"382","replacedBy":"383"},{"ruleId":"384","replacedBy":"385"},{"ruleId":"386","replacedBy":"387"},{"ruleId":"388","replacedBy":"389"},{"ruleId":"390","replacedBy":"391"},{"ruleId":"392","severity":1,"message":"393","line":1,"column":41,"nodeType":"394","messageId":"395","endLine":1,"endColumn":47},{"ruleId":"382","replacedBy":"396"},{"ruleId":"384","replacedBy":"397"},{"ruleId":"386","replacedBy":"398"},{"ruleId":"388","replacedBy":"399"},{"ruleId":"390","replacedBy":"400"},{"ruleId":"382","replacedBy":"401"},{"ruleId":"384","replacedBy":"402"},{"ruleId":"386","replacedBy":"403"},{"ruleId":"388","replacedBy":"404"},{"ruleId":"390","replacedBy":"405"},{"ruleId":"382","replacedBy":"406"},{"ruleId":"384","replacedBy":"407"},{"ruleId":"386","replacedBy":"408"},{"ruleId":"388","replacedBy":"409"},{"ruleId":"390","replacedBy":"410"},{"ruleId":"382","replacedBy":"411"},{"ruleId":"384","replacedBy":"412"},{"ruleId":"386","replacedBy":"413"},{"ruleId":"388","replacedBy":"414"},{"ruleId":"390","replacedBy":"415"},{"ruleId":"382","replacedBy":"416"},{"ruleId":"384","replacedBy":"417"},{"ruleId":"386","replacedBy":"418"},{"ruleId":"388","replacedBy":"419"},{"ruleId":"390","replacedBy":"420"},{"ruleId":"382","replacedBy":"421"},{"ruleId":"384","replacedBy":"422"},{"ruleId":"386","replacedBy":"423"},{"ruleId":"388","replacedBy":"424"},{"ruleId":"390","replacedBy":"425"},{"ruleId":"392","severity":1,"message":"426","line":18,"column":3,"nodeType":"394","messageId":"395","endLine":18,"endColumn":12},{"ruleId":"382","replacedBy":"427"},{"ruleId":"384","replacedBy":"428"},{"ruleId":"386","replacedBy":"429"},{"ruleId":"388","replacedBy":"430"},{"ruleId":"390","replacedBy":"431"},{"ruleId":"392","severity":1,"message":"432","line":32,"column":8,"nodeType":"394","messageId":"395","endLine":32,"endColumn":20},{"ruleId":"392","severity":1,"message":"433","line":34,"column":8,"nodeType":"394","messageId":"395","endLine":34,"endColumn":24},{"ruleId":"382","replacedBy":"434"},{"ruleId":"384","replacedBy":"435"},{"ruleId":"386","replacedBy":"436"},{"ruleId":"388","replacedBy":"437"},{"ruleId":"390","replacedBy":"438"},{"ruleId":"439","severity":1,"message":"440","line":161,"column":20,"nodeType":"441","messageId":"442","endLine":161,"endColumn":23,"suggestions":"443"},{"ruleId":"444","severity":1,"message":"445","line":211,"column":7,"nodeType":"446","messageId":"447","endLine":211,"endColumn":18},{"ruleId":"444","severity":1,"message":"445","line":220,"column":7,"nodeType":"446","messageId":"447","endLine":220,"endColumn":18},{"ruleId":"444","severity":1,"message":"445","line":328,"column":9,"nodeType":"446","messageId":"447","endLine":328,"endColumn":20},{"ruleId":"382","replacedBy":"448"},{"ruleId":"384","replacedBy":"449"},{"ruleId":"386","replacedBy":"450"},{"ruleId":"388","replacedBy":"451"},{"ruleId":"390","replacedBy":"452"},{"ruleId":"382","replacedBy":"453"},{"ruleId":"384","replacedBy":"454"},{"ruleId":"386","replacedBy":"455"},{"ruleId":"388","replacedBy":"456"},{"ruleId":"390","replacedBy":"457"},{"ruleId":"392","severity":1,"message":"458","line":8,"column":40,"nodeType":"394","messageId":"395","endLine":8,"endColumn":50},{"ruleId":"392","severity":1,"message":"459","line":8,"column":52,"nodeType":"394","messageId":"395","endLine":8,"endColumn":61},{"ruleId":"392","severity":1,"message":"460","line":43,"column":20,"nodeType":"394","messageId":"395","endLine":43,"endColumn":25},{"ruleId":"392","severity":1,"message":"461","line":43,"column":27,"nodeType":"394","messageId":"395","endLine":43,"endColumn":32},{"ruleId":"382","replacedBy":"462"},{"ruleId":"384","replacedBy":"463"},{"ruleId":"386","replacedBy":"464"},{"ruleId":"388","replacedBy":"465"},{"ruleId":"390","replacedBy":"466"},{"ruleId":"382","replacedBy":"467"},{"ruleId":"384","replacedBy":"468"},{"ruleId":"386","replacedBy":"469"},{"ruleId":"388","replacedBy":"470"},{"ruleId":"390","replacedBy":"471"},{"ruleId":"439","severity":1,"message":"440","line":7,"column":13,"nodeType":"441","messageId":"442","endLine":7,"endColumn":16,"suggestions":"472"},{"ruleId":"382","replacedBy":"473"},{"ruleId":"384","replacedBy":"474"},{"ruleId":"386","replacedBy":"475"},{"ruleId":"388","replacedBy":"476"},{"ruleId":"390","replacedBy":"477"},{"ruleId":"392","severity":1,"message":"478","line":46,"column":27,"nodeType":"394","messageId":"395","endLine":46,"endColumn":28},{"ruleId":"479","severity":1,"message":"480","line":272,"column":6,"nodeType":"481","endLine":272,"endColumn":32,"suggestions":"482"},{"ruleId":"392","severity":1,"message":"483","line":6,"column":3,"nodeType":"394","messageId":"395","endLine":6,"endColumn":15},{"ruleId":"392","severity":1,"message":"484","line":68,"column":11,"nodeType":"394","messageId":"395","endLine":68,"endColumn":20},{"ruleId":"439","severity":1,"message":"440","line":234,"column":21,"nodeType":"441","messageId":"442","endLine":234,"endColumn":24,"suggestions":"485"},{"ruleId":"486","severity":1,"message":"487","line":87,"column":3,"nodeType":"394","messageId":"488","endLine":87,"endColumn":28},{"ruleId":"439","severity":1,"message":"440","line":87,"column":25,"nodeType":"441","messageId":"442","endLine":87,"endColumn":28,"suggestions":"489"},{"ruleId":"439","severity":1,"message":"440","line":152,"column":36,"nodeType":"441","messageId":"442","endLine":152,"endColumn":39,"suggestions":"490"},{"ruleId":"439","severity":1,"message":"440","line":156,"column":13,"nodeType":"441","messageId":"442","endLine":156,"endColumn":16,"suggestions":"491"},{"ruleId":"439","severity":1,"message":"440","line":168,"column":13,"nodeType":"441","messageId":"442","endLine":168,"endColumn":16,"suggestions":"492"},{"ruleId":"439","severity":1,"message":"440","line":204,"column":12,"nodeType":"441","messageId":"442","endLine":204,"endColumn":15,"suggestions":"493"},{"ruleId":"439","severity":1,"message":"440","line":223,"column":12,"nodeType":"441","messageId":"442","endLine":223,"endColumn":15,"suggestions":"494"},{"ruleId":"392","severity":1,"message":"495","line":16,"column":21,"nodeType":"394","messageId":"395","endLine":16,"endColumn":33},"lines-around-directive",["496"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"@typescript-eslint/no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar",["496"],[],[],[],[],["496"],[],[],[],[],["496"],[],[],[],[],["496"],[],[],[],[],["496"],[],[],[],[],["496"],[],[],[],[],"'setIsOpen' is defined but never used.",["496"],[],[],[],[],"'OutlineInput' is defined but never used.","'OutlineInputMask' is defined but never used.",["496"],[],[],[],[],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["497","498"],"no-console","Unexpected console statement.","MemberExpression","unexpected",["496"],[],[],[],[],["496"],[],[],[],[],"'OwnerLabel' is defined but never used.","'OwnerName' is defined but never used.","'index' is defined but never used.","'event' is defined but never used.",["496"],[],[],[],[],["496"],[],[],[],[],["499","500"],["496"],[],[],[],[],"'i' is defined but never used.","react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'operatingCompany'. Either include it or remove the dependency array.","ArrayExpression",["501"],"'FaDollarSign' is defined but never used.","'protocols' is assigned a value but never used.",["502","503"],"@typescript-eslint/explicit-module-boundary-types","Argument 'responseInstallation' should be typed with a non-any type.","anyTypedArg",["504","505"],["506","507"],["508","509"],["510","511"],["512","513"],["514","515"],"'setQuestions' is assigned a value but never used.","padding-line-between-statements",{"messageId":"516","fix":"517","desc":"518"},{"messageId":"519","fix":"520","desc":"521"},{"messageId":"516","fix":"522","desc":"518"},{"messageId":"519","fix":"523","desc":"521"},{"desc":"524","fix":"525"},{"messageId":"516","fix":"526","desc":"518"},{"messageId":"519","fix":"527","desc":"521"},{"messageId":"516","fix":"528","desc":"518"},{"messageId":"519","fix":"529","desc":"521"},{"messageId":"516","fix":"530","desc":"518"},{"messageId":"519","fix":"531","desc":"521"},{"messageId":"516","fix":"532","desc":"518"},{"messageId":"519","fix":"533","desc":"521"},{"messageId":"516","fix":"534","desc":"518"},{"messageId":"519","fix":"535","desc":"521"},{"messageId":"516","fix":"536","desc":"518"},{"messageId":"519","fix":"537","desc":"521"},{"messageId":"516","fix":"538","desc":"518"},{"messageId":"519","fix":"539","desc":"521"},"suggestUnknown",{"range":"540","text":"541"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"540","text":"542"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"543","text":"541"},{"range":"543","text":"542"},"Update the dependencies array to be: [debits.invoiceDebits.invoiceDebitDetails, handleClickDebit, operatingCompany]",{"range":"544","text":"545"},{"range":"546","text":"541"},{"range":"546","text":"542"},{"range":"547","text":"541"},{"range":"547","text":"542"},{"range":"548","text":"541"},{"range":"548","text":"542"},{"range":"549","text":"541"},{"range":"549","text":"542"},{"range":"550","text":"541"},{"range":"550","text":"542"},{"range":"551","text":"541"},{"range":"551","text":"542"},{"range":"552","text":"541"},{"range":"552","text":"542"},[4064,4067],"unknown","never",[153,156],[7971,7997],"[debits.invoiceDebits.invoiceDebitDetails, handleClickDebit, operatingCompany]",[7112,7115],[2760,2763],[4379,4382],[4571,4574],[4980,4983],[6014,6017],[6639,6642]]