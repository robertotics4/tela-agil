[{"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/powerOutageService.tsx":"1","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/QuickMenu/index.tsx":"2","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DebitsConsultationModal/index.tsx":"3","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/InputMask/index.tsx":"4","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/StatusIndicator/index.tsx":"5","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/InputMask/styles.ts":"6","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/index.tsx":"7","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/powerReconnectionService.tsx":"8","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/services/yaloApi.ts":"9","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/pages/Dashboard/index.tsx":"10","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/inputMasks.ts":"11","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/getValidationErrors.ts":"12","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/pages/SignIn/styles.ts":"13","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Loading/index.tsx":"14","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Loading/styles.ts":"15","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Button/index.tsx":"16","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/index.tsx":"17","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/styles.ts":"18","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/LeftBar/styles.ts":"19","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/ToastContainer/Toast/styles.ts":"20","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/CustomRadioGroup/index.tsx":"21","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/OutlineInputMask/index.tsx":"22","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/Header/styles.ts":"23","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/CustomRadioGroup/RadioOptions/styles.ts":"24","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/OutlineInput/styles.ts":"25","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/Header/TagInfo/index.tsx":"26","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Modal/index.tsx":"27","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ContractData/styles.ts":"28","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/Header/TagInfo/styles.ts":"29","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DueDateChange/index.tsx":"30","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/getUnformattedPhone.ts":"31","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DueDateChange/styles.ts":"32","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/questions/PowerOutageQuestions.ts":"33","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/ServiceNotesTable/styles.ts":"34","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/routes/index.tsx":"35","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/routes/Route.tsx":"36","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/pages/SignIn/index.tsx":"37","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/pages/Dashboard/styles.ts":"38","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/ToastContainer/styles.ts":"39","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/AlertModal/styles.ts":"40","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/ToastContainer/Toast/index.tsx":"41","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Input/styles.ts":"42","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/FindContractModal/index.tsx":"43","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/styles.ts":"44","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/FindContractModal/styles.ts":"45","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ClientData/index.tsx":"46","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/FindContractModal/ContractsTable/styles.ts":"47","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/index.tsx":"48","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/index.tsx":"49","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DebitsConsultationModal/styles.ts":"50","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/StepModal/index.tsx":"51","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/StatusIndicator/styles.ts":"52","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/InstallmentPaymentModal/index.tsx":"53","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/StepModal/styles.ts":"54","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/index.tsx":"55","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/toast.tsx":"56","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/debitsConsultation.tsx":"57","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/customerService.tsx":"58","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/services/eqtlBarApi.ts":"59","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/ToastContainer/index.tsx":"60","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Input/index.tsx":"61","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/index.tsx":"62","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/Header/index.tsx":"63","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/CustomRadioGroup/RadioOptions/index.tsx":"64","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Tooltip/index.tsx":"65","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Tooltip/styles.ts":"66","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/QuickMenu/styles.ts":"67","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/styles.ts":"68","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/ServiceNotesTable/index.tsx":"69","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/styles/global.ts":"70","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/alert.tsx":"71","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/timer.tsx":"72","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/AlertModal/index.tsx":"73","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/LeftBar/index.tsx":"74","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/OutlineInput/index.tsx":"75","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/OutlineInputMask/styles.ts":"76","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ContractData/index.tsx":"77","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/auth.tsx":"78","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/EmailInvoice/styles.tsx":"79","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/services/authenticationApi.ts":"80","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Button/styles.ts":"81","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/FindContractModal/ContractsTable/index.tsx":"82","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/InstallmentPaymentModal/styles.ts":"83","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/EmailInvoice/index.tsx":"84","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/whatsappSending.tsx":"85","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/getInstallationSubclassName.ts":"86","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/extractResponseData.ts":"87","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ClientData/styles.ts":"88"},{"size":9244,"mtime":1616183160364,"results":"89","hashOfConfig":"90"},{"size":7393,"mtime":1616624438029,"results":"91","hashOfConfig":"90"},{"size":8207,"mtime":1615822109965,"results":"92","hashOfConfig":"90"},{"size":1609,"mtime":1614860182228,"results":"93","hashOfConfig":"90"},{"size":353,"mtime":1614860182228,"results":"94","hashOfConfig":"90"},{"size":1138,"mtime":1614860182228,"results":"95","hashOfConfig":"90"},{"size":1183,"mtime":1614898393797,"results":"96","hashOfConfig":"90"},{"size":22752,"mtime":1616622784061,"results":"97","hashOfConfig":"90"},{"size":255,"mtime":1614860182232,"results":"98","hashOfConfig":"90"},{"size":615,"mtime":1614860182232,"results":"99","hashOfConfig":"90"},{"size":1732,"mtime":1614860182232,"results":"100","hashOfConfig":"90"},{"size":357,"mtime":1614860182232,"results":"101","hashOfConfig":"90"},{"size":758,"mtime":1614860182232,"results":"102","hashOfConfig":"90"},{"size":1081,"mtime":1614860182228,"results":"103","hashOfConfig":"90"},{"size":234,"mtime":1614860182228,"results":"104","hashOfConfig":"90"},{"size":316,"mtime":1614860182228,"results":"105","hashOfConfig":"90"},{"size":296,"mtime":1614860182228,"results":"106","hashOfConfig":"90"},{"size":135,"mtime":1614860182228,"results":"107","hashOfConfig":"90"},{"size":2177,"mtime":1614860182228,"results":"108","hashOfConfig":"90"},{"size":1170,"mtime":1614860182232,"results":"109","hashOfConfig":"90"},{"size":366,"mtime":1614860182228,"results":"110","hashOfConfig":"90"},{"size":1671,"mtime":1614860182228,"results":"111","hashOfConfig":"90"},{"size":980,"mtime":1614860182228,"results":"112","hashOfConfig":"90"},{"size":363,"mtime":1614860182228,"results":"113","hashOfConfig":"90"},{"size":1448,"mtime":1614860182228,"results":"114","hashOfConfig":"90"},{"size":414,"mtime":1614860182228,"results":"115","hashOfConfig":"90"},{"size":893,"mtime":1614860182228,"results":"116","hashOfConfig":"90"},{"size":705,"mtime":1614860182228,"results":"117","hashOfConfig":"90"},{"size":572,"mtime":1614860182228,"results":"118","hashOfConfig":"90"},{"size":5511,"mtime":1615244847891,"results":"119","hashOfConfig":"90"},{"size":262,"mtime":1614860182232,"results":"120","hashOfConfig":"90"},{"size":1222,"mtime":1614860182228,"results":"121","hashOfConfig":"90"},{"size":3327,"mtime":1614860182228,"results":"122","hashOfConfig":"90"},{"size":1200,"mtime":1614886650378,"results":"123","hashOfConfig":"90"},{"size":379,"mtime":1614860182232,"results":"124","hashOfConfig":"90"},{"size":802,"mtime":1614860182232,"results":"125","hashOfConfig":"90"},{"size":3082,"mtime":1614860182232,"results":"126","hashOfConfig":"90"},{"size":266,"mtime":1614860182232,"results":"127","hashOfConfig":"90"},{"size":162,"mtime":1614860182232,"results":"128","hashOfConfig":"90"},{"size":1363,"mtime":1616596252801,"results":"129","hashOfConfig":"90"},{"size":1180,"mtime":1614860182232,"results":"130","hashOfConfig":"90"},{"size":1273,"mtime":1614860182228,"results":"131","hashOfConfig":"90"},{"size":1399,"mtime":1615856071854,"results":"132","hashOfConfig":"90"},{"size":422,"mtime":1614860182228,"results":"133","hashOfConfig":"90"},{"size":436,"mtime":1615331953569,"results":"134","hashOfConfig":"90"},{"size":3318,"mtime":1614860182228,"results":"135","hashOfConfig":"90"},{"size":1239,"mtime":1615849315958,"results":"136","hashOfConfig":"90"},{"size":1281,"mtime":1615245128594,"results":"137","hashOfConfig":"90"},{"size":3388,"mtime":1615245232987,"results":"138","hashOfConfig":"90"},{"size":2871,"mtime":1615209771089,"results":"139","hashOfConfig":"90"},{"size":4892,"mtime":1616103165501,"results":"140","hashOfConfig":"90"},{"size":629,"mtime":1614860182228,"results":"141","hashOfConfig":"90"},{"size":5694,"mtime":1615244969754,"results":"142","hashOfConfig":"90"},{"size":852,"mtime":1614860182228,"results":"143","hashOfConfig":"90"},{"size":479,"mtime":1614860182232,"results":"144","hashOfConfig":"90"},{"size":1483,"mtime":1614860182232,"results":"145","hashOfConfig":"90"},{"size":1527,"mtime":1614860182232,"results":"146","hashOfConfig":"90"},{"size":8854,"mtime":1615854011817,"results":"147","hashOfConfig":"90"},{"size":266,"mtime":1614860182232,"results":"148","hashOfConfig":"90"},{"size":785,"mtime":1614860182232,"results":"149","hashOfConfig":"90"},{"size":1557,"mtime":1614860182228,"results":"150","hashOfConfig":"90"},{"size":419,"mtime":1614860182228,"results":"151","hashOfConfig":"90"},{"size":1447,"mtime":1614860182228,"results":"152","hashOfConfig":"90"},{"size":1765,"mtime":1614860182228,"results":"153","hashOfConfig":"90"},{"size":343,"mtime":1614860182232,"results":"154","hashOfConfig":"90"},{"size":743,"mtime":1614860182232,"results":"155","hashOfConfig":"90"},{"size":1106,"mtime":1616624359214,"results":"156","hashOfConfig":"90"},{"size":275,"mtime":1614886631698,"results":"157","hashOfConfig":"90"},{"size":1803,"mtime":1614886338316,"results":"158","hashOfConfig":"90"},{"size":534,"mtime":1614860182232,"results":"159","hashOfConfig":"90"},{"size":1482,"mtime":1616604586547,"results":"160","hashOfConfig":"90"},{"size":1265,"mtime":1614860182232,"results":"161","hashOfConfig":"90"},{"size":2390,"mtime":1616604644818,"results":"162","hashOfConfig":"90"},{"size":7368,"mtime":1615835405289,"results":"163","hashOfConfig":"90"},{"size":1655,"mtime":1614860182228,"results":"164","hashOfConfig":"90"},{"size":1271,"mtime":1614860182228,"results":"165","hashOfConfig":"90"},{"size":1460,"mtime":1614860182228,"results":"166","hashOfConfig":"90"},{"size":2120,"mtime":1614860182232,"results":"167","hashOfConfig":"90"},{"size":751,"mtime":1614860182228,"results":"168","hashOfConfig":"90"},{"size":292,"mtime":1614860182232,"results":"169","hashOfConfig":"90"},{"size":377,"mtime":1614860182228,"results":"170","hashOfConfig":"90"},{"size":2124,"mtime":1615856358304,"results":"171","hashOfConfig":"90"},{"size":2490,"mtime":1614860182228,"results":"172","hashOfConfig":"90"},{"size":3731,"mtime":1615244938578,"results":"173","hashOfConfig":"90"},{"size":7004,"mtime":1614860182232,"results":"174","hashOfConfig":"90"},{"size":2199,"mtime":1614860182232,"results":"175","hashOfConfig":"90"},{"size":7681,"mtime":1615821995132,"results":"176","hashOfConfig":"90"},{"size":807,"mtime":1614860182228,"results":"177","hashOfConfig":"90"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},"11dd9mg",{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"189"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"209"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"180"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"180"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"192"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"254"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"254"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"180"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"291"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"291"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"291"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"209"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"317"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"180"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346","usedDeprecatedRules":"180"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"349","usedDeprecatedRules":"209"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"364","messages":"365","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"366","usedDeprecatedRules":"223"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"375","messages":"376","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/powerOutageService.tsx",[],["379","380","381","382","383"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/QuickMenu/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DebitsConsultationModal/index.tsx",[],["384","385","386","387","388"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/InputMask/index.tsx",["389","390"],"import React, { useEffect, useRef, useState, useCallback } from 'react';\nimport ReactInputMask, { Props } from 'react-input-mask';\nimport { IconBaseProps } from 'react-icons';\nimport { FiAlertCircle } from 'react-icons/fi';\nimport { useField } from '@unform/core';\n\nimport { Container, Error } from './styles';\n\ninterface InputProps extends Props {\n  name: string;\n  icon?: React.ComponentType<IconBaseProps>;\n}\n\nconst OutlineInputMask: React.FC<InputProps> = ({\n  name,\n  icon: Icon,\n  ...rest\n}) => {\n  const inputRef = useRef(null);\n  const [isFocused, setIsFocused] = useState(false);\n  const { fieldName, defaultValue, error, registerField } = useField(name);\n\n  const handleInputFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n\n  const handleInputBlur = useCallback(() => {\n    setIsFocused(false);\n  }, []);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value',\n      setValue(ref: any, value: string) {\n        ref.setInputValue(value);\n      },\n      clearValue(ref: any) {\n        ref.setInputValue('');\n      },\n    });\n  }, [fieldName, registerField]);\n\n  return (\n    <Container isFocused={isFocused} isErrored={!!error}>\n      {Icon && <Icon size={20} />}\n\n      <ReactInputMask\n        onFocus={handleInputFocus}\n        onBlur={handleInputBlur}\n        defaultValue={defaultValue}\n        ref={inputRef}\n        {...rest}\n      />\n\n      {error && (\n        <Error title={error}>\n          <FiAlertCircle color=\"#ff5353\" size={20} />\n        </Error>\n      )}\n    </Container>\n  );\n};\n\nexport default OutlineInputMask;\n",["391","392","393","394","395"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/StatusIndicator/index.tsx",[],["396","397","398","399","400"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/InputMask/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/powerReconnectionService.tsx",["401","402","403","404","405","406","407"],"import React, { createContext, useCallback, useContext } from 'react';\nimport { useLoading } from 'react-use-loading';\nimport { v4 as uuid } from 'uuid';\nimport Swal from 'sweetalert2';\n\nimport eqtlBarApi from '../services/eqtlBarApi';\n\nimport Customer from '../types/Customer';\nimport Installation from '../types/Installation';\nimport ServiceNotes from '../types/ServiceNotes';\n\nimport { currencyMask } from '../utils/inputMasks';\n\nimport Loading from '../components/Loading';\nimport Debits from '../types/Debits';\nimport { useAuth } from './auth';\n\ninterface PowerReconnectionContextData {\n  ableToReconnection({\n    contractAccount,\n    installation,\n    serviceNotes,\n  }: AbleToReconnectionProps): AbleToReconnectionResponse;\n  getReconnectionInfo({\n    installationNumber,\n    phaseNumber,\n    locality,\n    operatingCompany,\n  }: GetReconnectionInfoProps): Promise<ReconnectionInfo>;\n  prepareForPowerReconnection({\n    attendanceData,\n    installation,\n    debits,\n    operatingCompany,\n    protocol,\n  }: PrepareForPowerReconnectionProps): Promise<void>;\n}\n\ninterface AbleToReconnectionResponse {\n  ok: boolean;\n  error?: string;\n}\n\ninterface ReconnectionInfo {\n  tariffs: {\n    commonTariff?: number;\n    emergencyTariff?: number;\n  };\n  deadlineForReconnection: { hours: number };\n}\n\ninterface AbleForEmergencyReconnectionProps {\n  operatingCompany: string;\n  installationNumber: string;\n}\n\ninterface AbleToReconnectionProps {\n  contractAccount: string;\n  installation: Installation;\n  serviceNotes: ServiceNotes;\n}\n\ninterface GetReconnectionInfoProps {\n  installationNumber: string;\n  phaseNumber: number;\n  locality: string;\n  operatingCompany: string;\n}\n\ninterface GeneratePowerReconnectionProps {\n  type: 'common' | 'emergency';\n  operatingCompany: string;\n  contractAccount: string;\n  protocol: string;\n  descriptionText: string;\n  reference: string;\n}\n\ninterface StartPowerReconnectionFlowProps {\n  attendanceData: Customer;\n  installation: Installation;\n  operatingCompany: string;\n  protocol: string;\n}\n\ninterface PrepareForPowerReconnectionProps {\n  attendanceData: Customer;\n  installation: Installation;\n  debits: Debits;\n  operatingCompany: string;\n  protocol: string;\n}\n\nconst PowerReconnectionServiceContext = createContext<PowerReconnectionContextData>(\n  {} as PowerReconnectionContextData,\n);\n\nconst PowerReconnectionProvider: React.FC = ({ children }) => {\n  const [\n    { isLoading, message },\n    { start: startLoading, stop: stopLoading },\n  ] = useLoading();\n\n  const { user } = useAuth();\n\n  const ableForEmergencyReconnection = useCallback(\n    async ({\n      operatingCompany,\n      installationNumber,\n    }: AbleForEmergencyReconnectionProps) => {\n      const response = await eqtlBarApi.get(\n        '/servico/v1/religa/validaHorario',\n        {\n          params: {\n            empresaOperadora: operatingCompany,\n            numeroInstalacao: installationNumber,\n            codigoTransacao: uuid(),\n          },\n        },\n      );\n\n      if (response.data.data.regraSaida === 'U') {\n        return true;\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const getReconnectionInfo = useCallback(\n    async ({\n      installationNumber,\n      phaseNumber,\n      locality,\n      operatingCompany,\n    }: GetReconnectionInfoProps) => {\n      const hasEmergencyReconnection = await ableForEmergencyReconnection({\n        installationNumber,\n        operatingCompany,\n      });\n\n      const reconnectionInfo = {} as ReconnectionInfo;\n\n      if (hasEmergencyReconnection) {\n        if (phaseNumber === 1) {\n          switch (operatingCompany) {\n            case '98':\n              reconnectionInfo.tariffs = { commonTariff: 8.23 };\n              break;\n            case '95':\n              reconnectionInfo.tariffs = {\n                commonTariff: 8.24,\n                emergencyTariff: 41.31,\n              };\n              break;\n            case '82':\n              reconnectionInfo.tariffs = { commonTariff: 8.25 };\n              break;\n            case '86':\n              reconnectionInfo.tariffs = { commonTariff: 7.88 };\n              break;\n            default:\n              break;\n          }\n        }\n\n        if (phaseNumber === 2) {\n          switch (operatingCompany) {\n            case '98':\n              reconnectionInfo.tariffs = { commonTariff: 11.34 };\n              break;\n            case '95':\n              reconnectionInfo.tariffs = {\n                commonTariff: 11.34,\n                emergencyTariff: 61.98,\n              };\n              break;\n            case '82':\n              reconnectionInfo.tariffs = { commonTariff: 34.12 };\n              break;\n            case '86':\n              reconnectionInfo.tariffs = { commonTariff: 32.6 };\n              break;\n            default:\n              break;\n          }\n        }\n\n        if (phaseNumber === 3) {\n          switch (operatingCompany) {\n            case '98':\n              reconnectionInfo.tariffs = { commonTariff: 34.06 };\n              break;\n            case '95':\n              reconnectionInfo.tariffs = {\n                commonTariff: 34.07,\n                emergencyTariff: 103.32,\n              };\n              break;\n            default:\n              break;\n          }\n        }\n      }\n\n      if (!hasEmergencyReconnection) {\n        if (locality === 'RURAL') {\n          reconnectionInfo.deadlineForReconnection = { hours: 48 };\n        } else {\n          reconnectionInfo.deadlineForReconnection = { hours: 24 };\n        }\n\n        if (phaseNumber === 1) {\n          switch (operatingCompany) {\n            case '98':\n              reconnectionInfo.tariffs = { commonTariff: 8.23 };\n              break;\n            case '95':\n              reconnectionInfo.tariffs = { commonTariff: 8.24 };\n              break;\n            case '82':\n              reconnectionInfo.tariffs = { commonTariff: 8.25 };\n              break;\n            case '86':\n              reconnectionInfo.tariffs = { commonTariff: 7.88 };\n              break;\n            default:\n              break;\n          }\n        }\n\n        if (phaseNumber === 2) {\n          switch (operatingCompany) {\n            case '98':\n              reconnectionInfo.tariffs = { commonTariff: 11.34 };\n              break;\n            case '95':\n              reconnectionInfo.tariffs = { commonTariff: 11.34 };\n              break;\n            default:\n              break;\n          }\n        }\n\n        if (phaseNumber === 3) {\n          switch (operatingCompany) {\n            case '98':\n              reconnectionInfo.tariffs = { commonTariff: 34.06 };\n              break;\n            case '95':\n              reconnectionInfo.tariffs = { commonTariff: 34.07 };\n              break;\n            case '82':\n              reconnectionInfo.tariffs = { commonTariff: 34.12 };\n              break;\n            case '86':\n              reconnectionInfo.tariffs = { commonTariff: 32.6 };\n              break;\n            default:\n              break;\n          }\n        }\n      }\n\n      return reconnectionInfo;\n    },\n    [ableForEmergencyReconnection],\n  );\n\n  const ableToReconnection = useCallback(\n    ({\n      contractAccount,\n      installation,\n      serviceNotes,\n    }: AbleToReconnectionProps) => {\n      // Buscar notas de desligamento\n      const shutdownNote = serviceNotes.openServiceNotes.find(\n        note => note.type === 'DS',\n      );\n\n      // Buscar notas de suspensão\n      const suspensionNote = serviceNotes.openServiceNotes.find(\n        note => note.type === 'SF',\n      );\n\n      // Buscar notas de fiscalização\n      const oversightNote = serviceNotes.openServiceNotes.find(\n        note => note.type === 'FS',\n      );\n\n      // Buscar notas de ligação nova\n      const newEnergyConnectionNote = serviceNotes.openServiceNotes.find(\n        note => note.type === 'LN',\n      );\n\n      // Buscar notas de religação\n      const reconnectionNote = serviceNotes.openServiceNotes.find(\n        note => note.type === 'RL',\n      );\n\n      console.log(reconnectionNote);\n      console.log(shutdownNote);\n      console.log(oversightNote);\n      console.log(suspensionNote);\n      console.log(newEnergyConnectionNote);\n\n      if (installation.status === 'Potencial') {\n        return {\n          ok: false,\n          error: `A conta contrato ${contractAccount} ainda não está ligada.`,\n        };\n      }\n\n      if (\n        installation.status === 'Desligada' ||\n        installation.status === 'Desliga em andamento'\n      ) {\n        return {\n          ok: false,\n          error:\n            'Esta conta contrato está desligada. Para restabelecer seu fornecimento de energia você precisa solicitar uma reativação.',\n        };\n      }\n\n      if (\n        installation.cutInProgress ||\n        installation.status === 'Corte executado' ||\n        installation.status === 'Corte em andamento'\n      ) {\n        console.log('corteExecutado');\n\n        if (reconnectionNote) {\n          if (\n            reconnectionNote.status === 'REJE' ||\n            reconnectionNote.status === 'ATIV' ||\n            reconnectionNote.status === 'DEVO'\n          ) {\n            return {\n              // VERIFICAR TEXTO\n              ok: false,\n              error: 'Infelizmente não é possível atender este caso por aqui.',\n            };\n          }\n\n          if (reconnectionNote.status === 'RECE') {\n            if (reconnectionNote.code === 'RELU') {\n              return {\n                ok: false,\n                error: `Já existe um serviço de religação de urgência em aberto para ${contractAccount}. Por favor, aguarde e logo logo seu fornecimento de energia será restabelecido.`,\n              };\n            }\n\n            if (reconnectionNote.code === 'RELA') {\n              return {\n                ok: false,\n                error: `Já existe um serviço de religação automática em aberto para ${contractAccount}. Por favor, aguarde e logo logo seu fornecimento de energia será restabelecido.`,\n              };\n            }\n\n            if (reconnectionNote.code === 'RELC') {\n              return {\n                ok: false,\n                error: `Já existe um serviço de religação em aberto para ${contractAccount}. Por favor, aguarde e logo logo seu fornecimento de energia será restabelecido.`,\n              };\n            }\n          }\n        }\n\n        if (shutdownNote) {\n          return {\n            ok: false,\n            error:\n              'Esta conta contrato está desligada. Para restabelecer seu fornecimento de energia você precisa solicitar uma reativação.',\n          };\n        }\n\n        if (oversightNote) {\n          // VERIFICAR ESSA CONDIÇÃO\n          return {\n            ok: false,\n            error:\n              'Infelizmente não é possível atender este caso por aqui. Você pode solicitar este serviço ligando para o 116 ou indo em uma de nossas agências de atendimento',\n          };\n        }\n\n        if (suspensionNote) {\n          // VERIFICAR ESSA CONDIÇÃO\n          if (\n            suspensionNote.status !== 'RECE' &&\n            suspensionNote.status !== 'FINL'\n          ) {\n            if (oversightNote) {\n              return {\n                ok: false,\n                error:\n                  'Infelizmente não é possível atender este caso por aqui. Você pode solicitar este serviço ligando para o 116 ou indo em uma de nossas agências de atendimento',\n              };\n            }\n          }\n        }\n      }\n\n      if (newEnergyConnectionNote) {\n        return {\n          ok: false,\n          error: `Já existe um serviço de reativação em aberto para ${contractAccount}. Por favor, aguarde e logo logo seu fornecimento de energia será restabelecido.`,\n        };\n      }\n\n      if (\n        installation.status === 'Reativa em Andamento' ||\n        installation.status === 'Religa em Andamento'\n      ) {\n        console.log('religa andamento');\n\n        if (newEnergyConnectionNote) {\n          return {\n            ok: false,\n            error: `Já existe um serviço de reativação em aberto para ${contractAccount}. Por favor, aguarde e logo logo seu fornecimento de energia será restabelecido.`,\n          };\n        }\n\n        if (reconnectionNote) {\n          if (\n            reconnectionNote.status === 'REJE' ||\n            reconnectionNote.status === 'ATIV' ||\n            reconnectionNote.status === 'DEVO'\n          ) {\n            // VERIFICAR ESSE TEXTO\n            return {\n              ok: false,\n              error: 'Infelizmente não é possível atender este caso por aqui.',\n            };\n          }\n\n          if (\n            reconnectionNote.status === 'RECE' ||\n            reconnectionNote.status === 'ERRO'\n          ) {\n            if (reconnectionNote.code === 'RELU') {\n              return {\n                ok: false,\n                error: `Já existe um serviço de religação de urgência em aberto para ${contractAccount}. Por favor, aguarde e logo logo seu fornecimento de energia será restabelecido.`,\n              };\n            }\n\n            if (reconnectionNote.code === 'RELA') {\n              return {\n                ok: false,\n                error: `Já existe um serviço de religação automática em aberto para ${contractAccount}. Por favor, aguarde e logo logo seu fornecimento de energia será restabelecido.`,\n              };\n            }\n\n            if (reconnectionNote.code === 'RELC') {\n              return {\n                ok: false,\n                error: `Já existe um serviço de religação em aberto para ${contractAccount}. Por favor, aguarde e logo logo seu fornecimento de energia será restabelecido.`,\n              };\n            }\n          }\n        }\n\n        if (reconnectionNote) {\n          if (\n            reconnectionNote.status === 'REJE' ||\n            reconnectionNote.status === 'ATIV' ||\n            reconnectionNote.status === 'DEVO'\n          ) {\n            // VERIFICAR ESSE TEXTO\n            return {\n              ok: false,\n              error: 'Infelizmente não é possível atender este caso por aqui.',\n            };\n          }\n\n          return {\n            ok: false,\n            error: 'Você já possui uma religação em andamento',\n          };\n        }\n      }\n\n      if (installation.status === 'Ligada') {\n        if (oversightNote) {\n          // VERIFICAR ESSE\n          return {\n            ok: false,\n            error: 'Infelizmente não é possível atender este caso por aqui.',\n          };\n        }\n\n        if (suspensionNote) {\n          return { ok: true };\n        }\n\n        return {\n          ok: false,\n          error: `A conta contrato ${contractAccount} não está com o fornecimento suspenso, mas pode ser que você esteja com uma falta de energia.`,\n        };\n      }\n\n      // AVALIAR ESTE CASO\n      return { ok: true };\n    },\n    [],\n  );\n\n  const generatePowerReconnection = useCallback(\n    async ({\n      type,\n      operatingCompany,\n      contractAccount,\n      protocol,\n      descriptionText,\n      reference,\n    }: GeneratePowerReconnectionProps) => {\n      try {\n        startLoading('Gerando solicitação de Religação ...');\n\n        let path;\n\n        switch (type) {\n          case 'common':\n            path = '/servico/v1/religa/comum';\n            break;\n          case 'emergency':\n            path = '/servico/v1/religa/urgente';\n            break;\n          default:\n            return;\n        }\n\n        await eqtlBarApi.post(\n          path,\n          {\n            codigoTransacao: uuid(),\n            data: {\n              contaContrato: contractAccount,\n              protocolo: protocol,\n              textoDescritivo: descriptionText,\n              referencia: reference,\n            },\n          },\n          {\n            params: {\n              empresaOperadora: operatingCompany,\n            },\n          },\n        );\n\n        Swal.fire({\n          icon: 'success',\n          title: 'Religação comum gerada com sucesso.',\n          confirmButtonText: `OK`,\n          confirmButtonColor: '#3c1490',\n        });\n      } catch {\n        Swal.fire({\n          icon: 'error',\n          title: 'Falha ao gerar a solicitação de Religação.',\n          confirmButtonText: `OK`,\n          confirmButtonColor: '#3c1490',\n        });\n      } finally {\n        stopLoading();\n      }\n    },\n    [startLoading, stopLoading],\n  );\n\n  const startPowerReconnectionFlow = useCallback(\n    async ({\n      attendanceData,\n      installation,\n      operatingCompany,\n      protocol,\n    }: StartPowerReconnectionFlowProps) => {\n      try {\n        startLoading('Analisando informações da instalação ...');\n\n        const reconnectionInfo = await getReconnectionInfo({\n          installationNumber: attendanceData.installationNumber,\n          locality: installation.technicalData.locality,\n          operatingCompany,\n          phaseNumber: attendanceData.phaseNumber,\n        });\n\n        if (\n          !reconnectionInfo.tariffs.emergencyTariff &&\n          reconnectionInfo.tariffs.commonTariff\n        ) {\n          Swal.fire({\n            title: `Você gostaria de solicitar uma Religação Comum com prazo de até ${\n              reconnectionInfo.deadlineForReconnection.hours\n            } horas para atendimento no valor de ${currencyMask(\n              reconnectionInfo.tariffs.commonTariff,\n            )} a serem cobrados em sua próxima fatura?`,\n            showDenyButton: true,\n            confirmButtonText: `Sim, gostaria`,\n            denyButtonText: `Não`,\n            confirmButtonColor: '#3c1490',\n            denyButtonColor: '#eb5757',\n          }).then(async resultCommonTariff => {\n            if (resultCommonTariff.isConfirmed) {\n              await generatePowerReconnection({\n                type: 'common',\n                contractAccount: attendanceData.contractAccount,\n                descriptionText: `Gerado pela Tela Ágil - Usuário: ${user}`,\n                operatingCompany,\n                protocol: protocol || '00',\n                reference: attendanceData.address.referencePoint\n                  ? attendanceData.address.referencePoint\n                  : '',\n              });\n            } else if (resultCommonTariff.isDenied) {\n              Swal.fire({\n                icon: 'info',\n                title: 'Sua solicitação não foi realizada',\n                confirmButtonText: `Sim`,\n                confirmButtonColor: '#3c1490',\n              });\n            }\n          });\n        } else if (\n          reconnectionInfo.tariffs.emergencyTariff &&\n          reconnectionInfo.tariffs.commonTariff\n        ) {\n          const inputOptions = {\n            COMUM: `Comum = ${currencyMask(\n              reconnectionInfo.tariffs.commonTariff || 0,\n            )}`,\n            URGENCIA: `Urgência = ${currencyMask(\n              reconnectionInfo.tariffs.emergencyTariff || 0,\n            )}`,\n          };\n\n          const { value: reconnectionOption } = await Swal.fire({\n            title:\n              'Você gostaria de solicitar uma Religação que será cobrada somente na sua próxima fatura? Caso seja sim, selecione o tipo de religação',\n            input: 'radio',\n            inputOptions,\n            inputValidator: value => {\n              if (!value) {\n                return 'Selecione uma opção para continuar.';\n              }\n\n              return null;\n            },\n          });\n\n          if (reconnectionOption) {\n            const reconnectionType =\n              reconnectionOption === 'URGENCIA' ? 'emergency' : 'common';\n\n            await generatePowerReconnection({\n              type: reconnectionType,\n              contractAccount: attendanceData.contractAccount,\n              descriptionText: `Gerado pela Tela Ágil - Usuário: ${user}`,\n              operatingCompany,\n              protocol: protocol || '00',\n              reference: attendanceData.address.referencePoint\n                ? attendanceData.address.referencePoint\n                : '',\n            });\n          }\n        }\n      } catch {\n        Swal.fire({\n          icon: 'error',\n          title: 'Falha ao gerar o serviço de religação.',\n          confirmButtonText: `OK`,\n          confirmButtonColor: '#3c1490',\n        });\n      } finally {\n        stopLoading();\n      }\n    },\n    [\n      generatePowerReconnection,\n      getReconnectionInfo,\n      startLoading,\n      stopLoading,\n      user,\n    ],\n  );\n\n  const prepareForPowerReconnection = useCallback(\n    async ({\n      attendanceData,\n      installation,\n      debits,\n      operatingCompany,\n      protocol,\n    }: PrepareForPowerReconnectionProps) => {\n      if (\n        debits.invoiceDebits.totalAmountInvoiceDebits > 0 ||\n        debits.installmentDebits.totalAmountInstallmentDebits > 0\n      ) {\n        Swal.fire({\n          icon: 'warning',\n          title: `Você possui ${\n            debits.invoiceDebits.invoiceDebitDetails.length\n          } faturas com um débito de ${currencyMask(\n            debits.invoiceDebits.totalAmountInvoiceDebits,\n          )}. Estão pagas?`,\n          showDenyButton: true,\n          confirmButtonText: `Sim`,\n          denyButtonText: `Não`,\n          confirmButtonColor: '#3c1490',\n          denyButtonColor: '#eb5757',\n        }).then(async resultHasDebits => {\n          if (resultHasDebits.isConfirmed) {\n            await startPowerReconnectionFlow({\n              attendanceData,\n              installation,\n              operatingCompany,\n              protocol,\n            });\n          } else if (resultHasDebits.isDenied) {\n            Swal.fire({\n              icon: 'info',\n              title: 'Efetue o pagamento e retorne para solicitar a religação.',\n              confirmButtonText: `Sim`,\n              confirmButtonColor: '#3c1490',\n            });\n          }\n        });\n      } else {\n        await startPowerReconnectionFlow({\n          attendanceData,\n          installation,\n          operatingCompany,\n          protocol,\n        });\n      }\n    },\n    [startPowerReconnectionFlow],\n  );\n\n  return (\n    <PowerReconnectionServiceContext.Provider\n      value={{\n        ableToReconnection,\n        getReconnectionInfo,\n        prepareForPowerReconnection,\n      }}\n    >\n      {children}\n\n      {isLoading && (\n        <Loading isOpen={isLoading} message={message} setIsOpen={stopLoading} />\n      )}\n    </PowerReconnectionServiceContext.Provider>\n  );\n};\n\nfunction usePowerReconnectionService(): PowerReconnectionContextData {\n  const context = useContext(PowerReconnectionServiceContext);\n\n  if (!context) {\n    throw new Error(\n      'usePowerReconnectionService must be used within a PowerReconnectionProvider',\n    );\n  }\n\n  return context;\n}\n\nexport { PowerReconnectionProvider, usePowerReconnectionService };\n","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/services/yaloApi.ts",[],["408","409","410","411","412"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/pages/Dashboard/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/inputMasks.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/getValidationErrors.ts",[],["413","414","415","416","417"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/pages/SignIn/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Loading/index.tsx",["418"],"import React, { useState, useEffect } from 'react';\nimport Rodal from 'rodal';\nimport Spinner from 'react-spinkit';\n\nimport 'rodal/lib/rodal.css';\n\nimport { Content } from './styles';\n\ninterface LoadingModalProps {\n  isOpen: boolean;\n  message?: string;\n  setIsOpen: () => void;\n}\n\nconst LoadingModal: React.FC<LoadingModalProps> = ({\n  isOpen,\n  message,\n  setIsOpen,\n}) => {\n  const [modalStatus, setModalStatus] = useState(isOpen);\n\n  useEffect(() => {\n    setModalStatus(isOpen);\n  }, [isOpen]);\n\n  return (\n    <Rodal\n      visible={modalStatus}\n      showCloseButton={false}\n      customStyles={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        background: 'transparent',\n        border: 'none',\n        boxShadow: 'none',\n        width: 'fit-content',\n      }}\n      customMaskStyles={{\n        background: 'rgba(0, 0, 0, 0.6)',\n      }}\n    >\n      <Content>\n        <Spinner name=\"ball-pulse-sync\" fadeIn=\"none\" color=\"#fff\" />\n        <h2>{message}</h2>\n      </Content>\n    </Rodal>\n  );\n};\n\nexport default LoadingModal;\n","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Loading/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Button/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/styles.ts",[],["419","420","421","422","423"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/LeftBar/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/ToastContainer/Toast/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/CustomRadioGroup/index.tsx",[],["424","425","426","427","428"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/OutlineInputMask/index.tsx",["429","430"],"import React, { useEffect, useRef, useState, useCallback } from 'react';\nimport ReactInputMask, { Props } from 'react-input-mask';\nimport { IconBaseProps } from 'react-icons';\nimport { FiAlertCircle } from 'react-icons/fi';\nimport { useField } from '@unform/core';\n\nimport { Container, Error } from './styles';\n\ninterface InputProps extends Props {\n  name: string;\n  icon?: React.ComponentType<IconBaseProps>;\n}\n\nconst OutlineInputMask: React.FC<InputProps> = ({\n  name,\n  icon: Icon,\n  disabled,\n  ...rest\n}) => {\n  const inputRef = useRef(null);\n  const [isFocused, setIsFocused] = useState(false);\n  const { fieldName, defaultValue, error, registerField } = useField(name);\n\n  const handleInputFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n\n  const handleInputBlur = useCallback(() => {\n    setIsFocused(false);\n  }, []);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value',\n      setValue(ref: any, value: string) {\n        ref.setInputValue(value);\n      },\n      clearValue(ref: any) {\n        ref.setInputValue('');\n      },\n    });\n  }, [fieldName, registerField]);\n\n  return (\n    <Container isFocused={isFocused} isErrored={!!error} isDisabled={disabled}>\n      {Icon && <Icon size={20} />}\n\n      <ReactInputMask\n        onFocus={handleInputFocus}\n        onBlur={handleInputBlur}\n        defaultValue={defaultValue}\n        disabled={disabled}\n        ref={inputRef}\n        {...rest}\n      />\n\n      {error && (\n        <Error title={error}>\n          <FiAlertCircle color=\"#ff5353\" size={20} />\n        </Error>\n      )}\n    </Container>\n  );\n};\n\nexport default OutlineInputMask;\n","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/Header/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/CustomRadioGroup/RadioOptions/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/OutlineInput/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/Header/TagInfo/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Modal/index.tsx",["431"],"import React, { useState, useEffect } from 'react';\nimport Rodal from 'rodal';\n\nimport 'rodal/lib/rodal.css';\n\ninterface IModalProps {\n  children: any;\n  isOpen: boolean;\n  customStyles?: object;\n  setIsOpen: () => void;\n}\n\nconst Modal: React.FC<IModalProps> = ({\n  children,\n  isOpen,\n  setIsOpen,\n  customStyles,\n}) => {\n  const [modalStatus, setModalStatus] = useState(isOpen);\n\n  useEffect(() => {\n    setModalStatus(isOpen);\n  }, [isOpen]);\n\n  return (\n    <Rodal\n      visible={modalStatus}\n      showCloseButton\n      closeOnEsc\n      onClose={setIsOpen}\n      customStyles={\n        customStyles || {\n          borderRadius: '8px',\n          padding: '48px 64px',\n          width: '736px',\n          height: 'fit-content',\n        }\n      }\n      customMaskStyles={{\n        background: 'rgba(0, 0, 0, 0.6)',\n      }}\n    >\n      {children}\n    </Rodal>\n  );\n};\n\nexport default Modal;\n","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ContractData/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/Header/TagInfo/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DueDateChange/index.tsx",["432"],"import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { v4 as uuid } from 'uuid';\n\nimport { useLoading } from 'react-use-loading';\n\nimport eqtlBarApi from '../../../services/eqtlBarApi';\n\nimport Loading from '../../Loading';\nimport Modal from '../../Modal';\n\nimport {\n  ModalContent,\n  SelectDate,\n  ConfirmButton,\n  SelectContainer,\n} from './styles';\n\nimport { useCustomerService } from '../../../hooks/customerService';\nimport { useAlert } from '../../../hooks/alert';\n\ninterface ModalProps {\n  isOpen: boolean;\n  setIsOpen: () => void;\n}\n\ninterface ValidDate {\n  description: string;\n  code: string;\n}\n\ninterface ResponseValidDate {\n  descricaoDt: string;\n  codigoDt: string;\n}\n\ninterface GetDueDateListProps {\n  contract: string;\n  stateCode: string;\n}\n\ninterface SetDueDateProps {\n  contract: string;\n  stateCode: string;\n  requestedDate: string;\n}\n\ninterface OptionProps {\n  value: string;\n  label: string;\n}\n\nconst DueDateChange: React.FC<ModalProps> = ({ isOpen, setIsOpen }) => {\n  const [{ isLoading, message }, { start, stop }] = useLoading();\n\n  const {\n    customer,\n    operatingCompany,\n    registerServicePerformed,\n  } = useCustomerService();\n  const { customAlert } = useAlert();\n\n  const [validDates, setValidDates] = useState<ValidDate[]>([]);\n  const [selectOptions, setSelectOptions] = useState<OptionProps[]>([]);\n  const [selectedDate, setSelectedDate] = useState<OptionProps | undefined>(\n    undefined,\n  );\n\n  const getDueDateList = useCallback(\n    async ({ contract, stateCode }: GetDueDateListProps) => {\n      const response = await eqtlBarApi.get('/servico/v1/dataCerta', {\n        params: {\n          contaContrato: contract,\n          empresaOperadora: stateCode,\n          flagConsultar: true,\n          codigoTransacao: uuid(),\n          canalAtendimento: 'S',\n        },\n      });\n\n      return response.data.data.listaDataCerta;\n    },\n    [],\n  );\n\n  const setDueDate = useCallback(\n    async ({ contract, stateCode, requestedDate }: SetDueDateProps) => {\n      const response = await eqtlBarApi.get('/servico/v1/dataCerta', {\n        params: {\n          contaContrato: contract,\n          empresaOperadora: stateCode,\n          flagAlterar: true,\n          dataSolicitada: requestedDate,\n          codigoTransacao: uuid(),\n          canalAtendimento: 'S',\n        },\n      });\n\n      if (response.data.data.mensagem !== 'Data Certa Incluida com Sucesso!') {\n        throw new Error(response.data.data.mensagem);\n      }\n    },\n    [],\n  );\n\n  const handleChangeSelect = useCallback((value: OptionProps) => {\n    setSelectedDate(value);\n  }, []);\n\n  const handleClickSetDueDate = useCallback(async () => {\n    try {\n      start('Ativando serviço ...');\n\n      if (selectedDate) {\n        await setDueDate({\n          contract: customer.contractAccount,\n          stateCode: operatingCompany,\n          requestedDate: selectedDate.value,\n        });\n\n        customAlert({\n          type: 'success',\n          title: 'Sucesso na alteração',\n          description: 'Data certa alterada com sucesso.',\n          confirmationText: 'OK',\n        });\n      }\n    } catch (err) {\n      customAlert({\n        type: 'error',\n        title: 'Erro na alteração',\n        description: err.message,\n        confirmationText: 'OK',\n      });\n    } finally {\n      setIsOpen();\n      stop();\n    }\n  }, [\n    customAlert,\n    selectedDate,\n    setDueDate,\n    setIsOpen,\n    start,\n    stop,\n    customer,\n    operatingCompany,\n  ]);\n\n  useEffect(() => {\n    getDueDateList({\n      contract: customer.contractAccount,\n      stateCode: operatingCompany,\n    }).then(data => {\n      setValidDates(\n        data.map((date: ResponseValidDate) => {\n          const validDate: ValidDate = {\n            description: date.descricaoDt,\n            code: date.codigoDt,\n          };\n\n          return validDate;\n        }),\n      );\n    });\n  }, [customer, getDueDateList, operatingCompany]);\n\n  useEffect(() => {\n    setSelectOptions(\n      validDates.map(date => {\n        const option: OptionProps = {\n          value: date.description,\n          label: date.code,\n        };\n\n        return option;\n      }),\n    );\n  }, [validDates]);\n\n  useEffect(() => {\n    setSelectedDate(undefined);\n  }, [setIsOpen]);\n\n  useEffect(() => {\n    if (isOpen) {\n      registerServicePerformed({\n        serviceName: 'Alteração de Data Certa',\n        executionDate: new Date(),\n      });\n    }\n  }, [registerServicePerformed, isOpen]);\n\n  return (\n    <Modal isOpen={isOpen} setIsOpen={setIsOpen}>\n      {validDates.length ? (\n        <ModalContent>\n          <h2>Data certa</h2>\n\n          <h1>\n            Escolha a melhor data para você receber suas próximas faturas:\n          </h1>\n\n          <SelectContainer>\n            <SelectDate\n              name=\"dueDate\"\n              options={[...selectOptions]}\n              maxMenuHeight={144}\n              placeholder=\"Selecione\"\n              onChange={(value: OptionProps) => handleChangeSelect(value)}\n            />\n\n            <ConfirmButton\n              type=\"button\"\n              onClick={handleClickSetDueDate}\n              disabled={!selectedDate}\n            >\n              Cadastrar\n            </ConfirmButton>\n          </SelectContainer>\n        </ModalContent>\n      ) : (\n        <p>Data certa não habilitada para o cliente</p>\n      )}\n\n      {isLoading && (\n        <Loading isOpen={isLoading} message={message} setIsOpen={stop} />\n      )}\n    </Modal>\n  );\n};\n\nexport default DueDateChange;\n","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/getUnformattedPhone.ts",[],["433","434","435","436","437"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DueDateChange/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/questions/PowerOutageQuestions.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/ServiceNotesTable/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/routes/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/routes/Route.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/pages/SignIn/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/pages/Dashboard/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/ToastContainer/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/AlertModal/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/ToastContainer/Toast/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Input/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/FindContractModal/index.tsx",["438","439"],"import React from 'react';\n\nimport { useCustomerService } from '../../hooks/customerService';\n\nimport Modal from '../Modal';\nimport ContractsTable from './ContractsTable';\n\nimport { ModalContent, OwnerContainer, OwnerLabel, OwnerName } from './styles';\n\ninterface ModalProps {\n  isOpen: boolean;\n  setIsOpen: () => void;\n}\n\ninterface Contract {\n  contractAccount: string;\n  address: string;\n}\n\nconst FindContractModal: React.FC<ModalProps> = ({ isOpen, setIsOpen }) => {\n  const { contracts } = useCustomerService();\n\n  const data: Contract[] = contracts.map(contract => ({\n    contractAccount: contract.contractAccount,\n    address: `${contract.address.publicArea}, ${contract.address.number}, ${contract.address.neighborhood}, ${contract.address.city} - ${contract.address.uf}, CEP ${contract.address.postalCode}`,\n  }));\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      setIsOpen={setIsOpen}\n      customStyles={{\n        borderRadius: '8px',\n        padding: '48px 0',\n        width: 'fit-content',\n        height: 'fit-content',\n      }}\n    >\n      <ModalContent>\n        <OwnerContainer>\n          {/* <OwnerLabel>Nome do titular:</OwnerLabel> */}\n          {/* <OwnerName>{contracts && contracts[0].owner}</OwnerName> */}\n        </OwnerContainer>\n\n        <ContractsTable data={data} closeModal={setIsOpen} />\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default FindContractModal;\n","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/FindContractModal/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ClientData/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/FindContractModal/ContractsTable/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/index.tsx",["440","441","442"],"import React, { useCallback, useEffect, useState } from 'react';\n\nimport StepModal, { Question } from './StepModal';\n\nimport { useCustomerService } from '../../../hooks/customerService';\n\nimport powerOutageQuestions from './questions/PowerOutageQuestions';\n\ninterface FlowComponentProps {\n  modalOpen: boolean;\n  toggleModal(): void;\n}\n\nconst PowerOutageFlow: React.FC<FlowComponentProps> = ({\n  modalOpen,\n  toggleModal,\n}) => {\n  const [questions, setQuestions] = useState<Question[]>(powerOutageQuestions);\n  const [currentQuestion, setCurrentQuestion] = useState(questions[0]);\n\n  const handleSetCurrentQuestion = useCallback(\n    (nextQuestionId: string) => {\n      const nextQuestion: Question | undefined = questions.find(\n        question => question.id === nextQuestionId,\n      );\n\n      if (nextQuestion) {\n        setCurrentQuestion(nextQuestion);\n      }\n    },\n    [questions],\n  );\n\n  const handleClearFlow = useCallback(() => {\n    setCurrentQuestion(questions[0]);\n  }, [questions]);\n\n  return (\n    <StepModal\n      isOpen={modalOpen}\n      setIsOpen={toggleModal}\n      title=\"Falta de energia\"\n      question={currentQuestion}\n      setCurrentQuestion={handleSetCurrentQuestion}\n      clearFlow={handleClearFlow}\n    />\n  );\n};\n\nexport default PowerOutageFlow;\n",["443","444","445","446","447"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DebitsConsultationModal/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/StepModal/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/StatusIndicator/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/InstallmentPaymentModal/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/StepModal/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/toast.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/debitsConsultation.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/customerService.tsx",["448"],"import React, { createContext, useCallback, useContext, useState } from 'react';\nimport { v4 as uuid } from 'uuid';\n\nimport { useAlert } from './alert';\nimport { useAuth } from './auth';\n\nimport Customer from '../types/Customer';\nimport Installation from '../types/Installation';\nimport Debits from '../types/Debits';\n\nimport extractResponseData from '../utils/extractResponseData';\nimport ServiceNotes from '../types/ServiceNotes';\nimport eqtlBarApi from '../services/eqtlBarApi';\nimport Address from '../types/Address';\n\ninterface CustomerServiceState {\n  operatingCompany: string;\n  customer: Customer;\n  installation: Installation;\n  debits: Debits;\n  serviceNotes: ServiceNotes;\n  protocol?: string;\n  contracts: Contract[];\n}\n\ninterface GetCustomerData {\n  stateCode: string;\n  contract: string;\n}\n\ninterface StartServiceProps {\n  stateCode: string;\n  contract: string;\n}\n\ninterface CustomerServiceContextData {\n  operatingCompany: string;\n  protocol: string | undefined;\n  customer: Customer;\n  installation: Installation;\n  debits: Debits;\n  serviceNotes: ServiceNotes;\n  contracts: Contract[];\n  serviceStarted: boolean;\n  fetchServiceData(customerData: GetCustomerData): Promise<void>;\n  startService({ stateCode, contract }: GetCustomerData): Promise<void>;\n  finishService(attendanceTime: string): Promise<void>;\n  registerServicePerformed({\n    serviceName,\n    executionDate,\n  }: ServicePerformed): void;\n  findAllContracts({\n    stateCode,\n    cpf,\n  }: FindAllContractsProps): Promise<Contract[]>;\n}\n\ninterface GenerateProtocolProps {\n  operatingCompany: string;\n  contract: string;\n}\n\ninterface FindAllContractsProps {\n  stateCode: string;\n  cpf: string;\n}\n\ninterface ServicePerformed {\n  serviceName: string;\n  executionDate: Date;\n}\n\ninterface Contract {\n  contractAccount: string;\n  address: Address;\n}\n\nconst CustomerServiceContext = createContext<CustomerServiceContextData>(\n  {} as CustomerServiceContextData,\n);\n\nconst CustomerServiceProvider: React.FC = ({ children }) => {\n  const { customAlert } = useAlert();\n  const { user } = useAuth();\n\n  const [serviceStarted, setServiceStarted] = useState(false);\n  const [servicesPerformed, setServicesPerformed] = useState<\n    ServicePerformed[]\n  >([]);\n\n  const [\n    customerServiceData,\n    setCustomerServiceData,\n  ] = useState<CustomerServiceState>(() => {\n    const storagedCustomerServiceData = localStorage.getItem(\n      '@TelaAgil:customerServiceData',\n    );\n\n    const storagedProtocol = localStorage.getItem('@TelaAgil:protocol');\n\n    if (storagedCustomerServiceData) {\n      const {\n        operatingCompany,\n        customer,\n        installation,\n        debits,\n        serviceNotes,\n      } = JSON.parse(storagedCustomerServiceData);\n\n      const customerServiceState: CustomerServiceState = {\n        operatingCompany,\n        customer,\n        installation,\n        debits,\n        serviceNotes,\n        contracts: [],\n      };\n\n      if (storagedProtocol) {\n        customerServiceState.protocol = storagedProtocol;\n      }\n\n      return customerServiceState;\n    }\n\n    return {} as CustomerServiceState;\n  });\n\n  const findAllContracts = useCallback(\n    async ({ stateCode, cpf }: FindAllContractsProps) => {\n      const response = await eqtlBarApi.get('/atendimento/v1/clientes', {\n        params: {\n          cpf,\n          flagDadosCliente: true,\n          empresaOperadora: stateCode,\n          codigoTransacao: uuid(),\n        },\n      });\n\n      const contracts: Contract[] = response.data.data.cliente.map(\n        (contract: any) => ({\n          contractAccount: contract.contaContrato,\n          address: {\n            publicArea: contract.endereco.logradouro,\n            number: contract.endereco.numero,\n            neighborhood: contract.endereco.bairro,\n            city: contract.endereco.cidade,\n            uf: contract.endereco.uf,\n            postalCode: contract.endereco.cep,\n            referencePoint: contract.endereco.pontoReferencia,\n          },\n        }),\n      );\n\n      if (!contracts.length) {\n        throw new Error();\n      } else {\n        setCustomerServiceData({\n          ...customerServiceData,\n          operatingCompany: stateCode,\n          contracts,\n        });\n\n        return contracts;\n      }\n    },\n    [customerServiceData],\n  );\n\n  const fetchServiceData = useCallback(\n    async ({ stateCode, contract }: GetCustomerData) => {\n      const response = await eqtlBarApi.get('/atendimento/v1/clientes', {\n        params: {\n          codigoTransacao: uuid(),\n          contrato: contract,\n          empresaOperadora: stateCode,\n          flagDadosCliente: true,\n          flagStatusInstalacao: true,\n          flagPossuiDebitos: true,\n          flagDadosTecnicos: true,\n          flagNotasAbertas: true,\n          flagNotasEncerradas: true,\n          flagDetalheDebitoCobranca: true,\n          flagDetalheDebitoFatura: true,\n        },\n      });\n\n      const {\n        customer,\n        installation,\n        debits,\n        serviceNotes,\n      } = extractResponseData(response, stateCode);\n\n      localStorage.setItem(\n        '@TelaAgil:customerServiceData',\n        JSON.stringify({\n          operatingCompany: stateCode,\n          customer,\n          installation,\n          debits,\n          serviceNotes,\n          contracts: [],\n        }),\n      );\n\n      setCustomerServiceData({\n        operatingCompany: stateCode,\n        customer,\n        installation,\n        debits,\n        serviceNotes,\n        contracts: [],\n      });\n    },\n    [],\n  );\n\n  const generateProtocol = useCallback(\n    async ({ operatingCompany, contract }: GenerateProtocolProps) => {\n      const response = await eqtlBarApi.get('/atendimento/v1/clientes', {\n        params: {\n          empresaOperadora: operatingCompany,\n          contrato: contract,\n          flagGerarProtocolo: true,\n          codigoTransacao: uuid(),\n        },\n      });\n\n      localStorage.setItem('@TelaAgil:protocol', response.data.data.protocolo);\n\n      setCustomerServiceData(state => ({\n        ...state,\n        protocol: response.data.data.protocolo,\n      }));\n    },\n    [],\n  );\n\n  const startService = useCallback(\n    async ({ stateCode, contract }: StartServiceProps) => {\n      try {\n        await fetchServiceData({\n          stateCode,\n          contract,\n        });\n\n        await generateProtocol({\n          contract,\n          operatingCompany: stateCode,\n        });\n\n        setServiceStarted(true);\n      } catch {\n        customAlert({\n          type: 'error',\n          title: 'Erro no atendimento',\n          description:\n            'Ocorreu um erro ao iniciar o atendimento, cheque as informações do cliente',\n          confirmationText: 'OK',\n        });\n      }\n    },\n    [fetchServiceData, generateProtocol, customAlert],\n  );\n\n  const saveAttendanceLog = useCallback(\n    async (attendanceTime: string) => {\n      await eqtlBarApi.post('/logs', {\n        user_id: user.id,\n        username: user.name,\n        contractAccount: customerServiceData.customer.contractAccount,\n        attendanceTime,\n        services: servicesPerformed,\n      });\n    },\n    [user, customerServiceData.customer, servicesPerformed],\n  );\n\n  const finishService = useCallback(\n    async (attendanceTime: string) => {\n      await saveAttendanceLog(attendanceTime);\n\n      localStorage.removeItem('@TelaAgil:protocol');\n      localStorage.removeItem('@TelaAgil:contracts');\n      localStorage.removeItem('@TelaAgil:customerServiceData');\n\n      setCustomerServiceData({} as CustomerServiceContextData);\n\n      setServicesPerformed([]);\n\n      setServiceStarted(false);\n    },\n    [saveAttendanceLog],\n  );\n\n  const registerServicePerformed = useCallback(\n    ({ serviceName, executionDate }: ServicePerformed) => {\n      setServicesPerformed(oldServices => [\n        ...oldServices,\n        { serviceName, executionDate },\n      ]);\n    },\n    [],\n  );\n\n  return (\n    <CustomerServiceContext.Provider\n      value={{\n        operatingCompany: customerServiceData.operatingCompany,\n        protocol: customerServiceData.protocol,\n        customer: customerServiceData.customer,\n        installation: customerServiceData.installation,\n        debits: customerServiceData.debits,\n        serviceNotes: customerServiceData.serviceNotes,\n        contracts: customerServiceData.contracts,\n        serviceStarted,\n        fetchServiceData,\n        startService,\n        finishService,\n        registerServicePerformed,\n        findAllContracts,\n      }}\n    >\n      {children}\n    </CustomerServiceContext.Provider>\n  );\n};\n\nfunction useCustomerService(): CustomerServiceContextData {\n  const context = useContext(CustomerServiceContext);\n\n  if (!context) {\n    throw new Error(\n      'useCustomerService must be used within a CustomerServiceProvider',\n    );\n  }\n\n  return context;\n}\n\nexport { CustomerServiceProvider, useCustomerService };\n","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/services/eqtlBarApi.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/ToastContainer/index.tsx",[],["449","450","451","452","453"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Input/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/Header/index.tsx",[],["454","455","456","457","458"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/CustomRadioGroup/RadioOptions/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Tooltip/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Tooltip/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/QuickMenu/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/RequestList/ServiceNotesTable/index.tsx",["459"],"import React from 'react';\nimport { useTable, Column } from 'react-table';\n\nimport {\n  Container,\n  TableContainer,\n  TableHeadContainer,\n  TableColumnsTitleContainer,\n  TableColumnTitle,\n  TableRow,\n  TableBody,\n  TableDataCell,\n} from './styles';\n\ninterface Note {\n  protocol: string;\n  service: string;\n  openingDate: string;\n  conclusionDate: string | undefined;\n  status: string;\n}\n\ninterface ServiceNotesTableProps {\n  columns: Column<Note>[];\n  data: Note[];\n}\n\nconst ServiceNotesTable: React.FC<ServiceNotesTableProps> = ({\n  columns,\n  data,\n}) => {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({ columns, data });\n\n  return (\n    <Container>\n      <TableContainer {...getTableProps()}>\n        <TableHeadContainer>\n          {headerGroups.map(headerGroup => (\n            <TableColumnsTitleContainer {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <TableColumnTitle {...column.getHeaderProps()}>\n                  {column.render('Header')}\n                </TableColumnTitle>\n              ))}\n            </TableColumnsTitleContainer>\n          ))}\n        </TableHeadContainer>\n        <TableBody {...getTableBodyProps()}>\n          {rows.map((row, i) => {\n            prepareRow(row);\n            return (\n              <TableRow {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return (\n                    <TableDataCell {...cell.getCellProps()}>\n                      {cell.render('Cell')}\n                    </TableDataCell>\n                  );\n                })}\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </TableContainer>\n    </Container>\n  );\n};\n\nexport default ServiceNotesTable;\n","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/styles/global.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/alert.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/timer.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/AlertModal/index.tsx",["460"],"import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport Rodal from 'rodal';\nimport { FiCheck, FiAlertTriangle, FiXCircle } from 'react-icons/fi';\nimport { GoInfo } from 'react-icons/go';\n\nimport 'rodal/lib/rodal.css';\n\nimport { AlertMessage } from '../../hooks/alert';\n\nimport {\n  AlertContent,\n  AlertTitle,\n  AlertDescription,\n  ButtonsContainer,\n  ConfirmationButton,\n  ConfirmationButtonText,\n  CancelButton,\n  CancelButtonText,\n} from './styles';\n\ninterface AlertProps {\n  message: AlertMessage;\n  isOpen: boolean;\n  setIsOpen: () => void;\n}\n\nconst icons = {\n  info: <GoInfo size={80} color=\"#0DC9F0\" />,\n  error: <FiXCircle size={80} color=\"#eb5757\" />,\n  success: <FiCheck size={80} color=\"#04d361\" />,\n  warning: <FiAlertTriangle size={80} color=\"#FFC105\" />,\n};\n\nconst AlertModal: React.FC<AlertProps> = ({ message, isOpen, setIsOpen }) => {\n  const [alertStatus, setAlertStatus] = useState(false);\n\n  useEffect(() => {\n    setAlertStatus(isOpen);\n  }, [isOpen]);\n\n  const handleConfirmationClick = useCallback(async () => {\n    if (message.confirmationAction) {\n      message.confirmationAction();\n    }\n\n    setIsOpen();\n  }, [setIsOpen, message]);\n\n  const handleCancelClick = useCallback(() => {\n    if (message.cancelAction) {\n      message.cancelAction();\n    }\n\n    setIsOpen();\n  }, [setIsOpen, message]);\n\n  return (\n    <Rodal\n      visible={alertStatus}\n      showCloseButton={false}\n      customStyles={{\n        borderRadius: '8px',\n        padding: '48px 64px',\n        width: '480px',\n        height: 'fit-content',\n      }}\n      customMaskStyles={{\n        background: 'rgba(0, 0, 0, 0.6)',\n      }}\n    >\n      <AlertContent>\n        {icons[message.type || 'info']}\n\n        <AlertTitle>{message.title}</AlertTitle>\n        <AlertDescription>{message.description}</AlertDescription>\n\n        <ButtonsContainer>\n          {message.cancelButtonText && (\n            <CancelButton onClick={handleCancelClick}>\n              <CancelButtonText>{message.cancelButtonText}</CancelButtonText>\n            </CancelButton>\n          )}\n\n          <ConfirmationButton onClick={handleConfirmationClick}>\n            <ConfirmationButtonText>\n              {message.confirmationText}\n            </ConfirmationButtonText>\n          </ConfirmationButton>\n        </ButtonsContainer>\n      </AlertContent>\n    </Rodal>\n  );\n};\n\nexport default AlertModal;\n","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/LeftBar/index.tsx",["461"],"import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { FiPower } from 'react-icons/fi';\nimport { FormHandles } from '@unform/core';\nimport { Form } from '@unform/web';\nimport * as Yup from 'yup';\nimport { useLoading } from 'react-use-loading';\nimport { format } from 'date-fns';\nimport { useStopwatch } from 'react-timer-hook';\n\nimport getValidationErrors from '../../utils/getValidationErrors';\n\nimport {\n  Container,\n  Logo,\n  WelcomeText,\n  Username,\n  UserMenu,\n  LogoutButton,\n  LogoutButtonText,\n  ServiceForm,\n  StartServiceButton,\n  FinishServiceButton,\n  Cronometro,\n} from './styles';\n\nimport OutlineInput from '../OutlineInput';\nimport OutlineInputMask from '../OutlineInputMask';\nimport CustomRadioGroup from '../CustomRadioGroup';\nimport RadioOptions from '../CustomRadioGroup/RadioOptions';\nimport Loading from '../Loading';\nimport FindContractModal from '../FindContractModal';\n\nimport logoWhiteImg from '../../assets/logo-white.svg';\n\nimport { useAuth } from '../../hooks/auth';\nimport { useCustomerService } from '../../hooks/customerService';\nimport { useToast } from '../../hooks/toast';\nimport { useAlert } from '../../hooks/alert';\n\nimport Address from '../../types/Address';\n\ninterface StartServiceFormData {\n  state: string;\n  contract: string;\n  cpf: string;\n}\n\nconst LeftBar: React.FC = () => {\n  const { user, signOut } = useAuth();\n  const { addToast } = useToast();\n  const { customAlert } = useAlert();\n  const [{ isLoading, message }, { start, stop }] = useLoading();\n\n  const {\n    start: startTimer,\n    reset: resetTimer,\n    isRunning,\n    hours,\n    seconds,\n    minutes,\n  } = useStopwatch({\n    autoStart: false,\n  });\n\n  const {\n    startService,\n    customer,\n    finishService,\n    serviceStarted,\n    findAllContracts,\n    contracts,\n  } = useCustomerService();\n\n  const [openModalFindContract, setOpenModalFindContract] = useState(false);\n\n  const formRef = useRef<FormHandles>(null);\n\n  const toggleModalFindContract = useCallback(() => {\n    setOpenModalFindContract(!openModalFindContract);\n  }, [openModalFindContract]);\n\n  const handleSubmit = useCallback(\n    async (data: StartServiceFormData) => {\n      try {\n        start('Localizando cliente ...');\n\n        formRef.current?.setErrors({});\n\n        const schema = Yup.object().shape({\n          contract: Yup.string().when('cpf', {\n            is: (val: string) => !val.length,\n            then: Yup.string().required('Conta contrato obrigatória'),\n            otherwise: Yup.string(),\n          }),\n          cpf: Yup.string(),\n        });\n\n        await schema.validate(data, {\n          abortEarly: false,\n        });\n\n        if (data.contract && data.cpf) {\n          customAlert({\n            type: 'error',\n            title: 'Erro no formulário',\n            description:\n              'Utilize apenas um dos campos (Conta contrato ou CPF / CNPJ)',\n            confirmationText: 'OK',\n          });\n\n          return;\n        }\n\n        if (!data.contract && data.cpf) {\n          const unformattedCpf = data.cpf.replace(/\\D/gim, '');\n\n          const responseContracts = await findAllContracts({\n            stateCode: data.state[0],\n            cpf: unformattedCpf,\n          });\n\n          if (responseContracts.length > 1) {\n            toggleModalFindContract();\n            return;\n          }\n\n          await startService({\n            stateCode: data.state[0],\n            contract: responseContracts[0].contractAccount,\n          });\n\n          return;\n        }\n\n        await startService({\n          stateCode: data.state[0],\n          contract: data.contract,\n        });\n      } catch (err) {\n        if (err instanceof Yup.ValidationError) {\n          const errors = getValidationErrors(err);\n\n          formRef.current?.setErrors(errors);\n          return;\n        }\n\n        customAlert({\n          type: 'error',\n          title: 'Erro no atendimento',\n          description:\n            'Não foi possível localizar o cliente, cheque as informações',\n          confirmationText: 'OK',\n        });\n      } finally {\n        stop();\n      }\n    },\n    [\n      startService,\n      start,\n      stop,\n      customAlert,\n      findAllContracts,\n      toggleModalFindContract,\n    ],\n  );\n\n  const formattedTime = useMemo(() => {\n    return format(new Date(0, 0, 0, hours, minutes, seconds), 'mm:ss');\n  }, [hours, minutes, seconds]);\n\n  const handleFinishService = useCallback(async () => {\n    try {\n      start('Finalizando atendimento ...');\n\n      await finishService(formattedTime);\n    } catch {\n      addToast({\n        type: 'error',\n        title: 'Registro de logs',\n        description: 'Ocorreu um erro ao salvar o log do atendimento.',\n      });\n    } finally {\n      stop();\n    }\n  }, [finishService, formattedTime, addToast, start, stop]);\n\n  useEffect(() => {\n    if (serviceStarted && !isRunning) {\n      startTimer();\n    }\n\n    if (!serviceStarted) {\n      resetTimer();\n    }\n  }, [serviceStarted, startTimer, isRunning, resetTimer]);\n\n  return (\n    <Container>\n      <UserMenu>\n        <Logo src={logoWhiteImg} alt=\"Equatorial Energia\" />\n\n        <WelcomeText>\n          Bem vindo,\n          <Username>{user.name}</Username>\n        </WelcomeText>\n\n        <LogoutButton onClick={signOut}>\n          <FiPower />\n          <LogoutButtonText>Sair</LogoutButtonText>\n        </LogoutButton>\n      </UserMenu>\n\n      <ServiceForm>\n        <Form\n          ref={formRef}\n          onSubmit={handleSubmit}\n          initialData={{ state: '82' }}\n        >\n          <CustomRadioGroup fieldLabel=\"Estado\">\n            <RadioOptions\n              name=\"state\"\n              options={[\n                { id: 'radio1', value: '82', label: 'Alagoas' },\n                { id: 'radio2', value: '98', label: 'Maranhão' },\n                { id: 'radio3', value: '95', label: 'Pará' },\n                { id: 'radio4', value: '86', label: 'Piauí' },\n              ]}\n              disabled={serviceStarted}\n            />\n          </CustomRadioGroup>\n\n          <OutlineInput\n            name=\"contract\"\n            type=\"text\"\n            placeholder=\"Código único ou conta contrato\"\n            autoComplete=\"off\"\n            disabled={serviceStarted}\n          />\n\n          <OutlineInputMask\n            name=\"cpf\"\n            mask=\"999.999.999-99\"\n            type=\"text\"\n            placeholder=\"CPF ou CNPJ\"\n            autoComplete=\"off\"\n            disabled={serviceStarted}\n          />\n\n          {serviceStarted && customer ? (\n            <FinishServiceButton type=\"button\" onClick={handleFinishService}>\n              Encerrar atendimento\n            </FinishServiceButton>\n          ) : (\n            <StartServiceButton type=\"submit\">\n              Iniciar atendimento\n            </StartServiceButton>\n          )}\n\n          {serviceStarted && customer && (\n            <Cronometro>\n              <span>Tempo de atendimento:</span>\n              <h1>{formattedTime}</h1>\n            </Cronometro>\n          )}\n        </Form>\n      </ServiceForm>\n\n      {contracts && (\n        <FindContractModal\n          isOpen={openModalFindContract}\n          setIsOpen={toggleModalFindContract}\n        />\n      )}\n\n      {isLoading && (\n        <Loading isOpen={isLoading} message={message} setIsOpen={stop} />\n      )}\n    </Container>\n  );\n};\n\nexport default LeftBar;\n","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/OutlineInput/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/OutlineInputMask/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ContractData/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/auth.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/EmailInvoice/styles.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/services/authenticationApi.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Button/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/FindContractModal/ContractsTable/index.tsx",["462","463"],"import React, { useCallback } from 'react';\nimport { useLoading } from 'react-use-loading';\n\nimport { Container, RCTable } from './styles';\nimport { useCustomerService } from '../../../hooks/customerService';\nimport { useAlert } from '../../../hooks/alert';\n\nimport Loading from '../../Loading';\n\ninterface Contract {\n  contractAccount: string;\n  address: string;\n}\n\ninterface TableProps {\n  data: Contract[];\n  closeModal(): void;\n}\n\nconst ContractsTable: React.FC<TableProps> = ({ data, closeModal }) => {\n  const { customAlert } = useAlert();\n  const [\n    { isLoading, message },\n    { start: startLoading, stop: stopLoading },\n  ] = useLoading();\n  const { startService, operatingCompany } = useCustomerService();\n\n  const columns = [\n    {\n      title: 'Conta contrato',\n      dataIndex: 'contractAccount',\n      key: 'contractAccount',\n    },\n    {\n      title: 'Endereço',\n      dataIndex: 'address',\n      key: 'address',\n    },\n  ];\n\n  const onRowClick = useCallback(\n    async (record, index, event) => {\n      try {\n        startLoading('Iniciando atendimento ...');\n\n        if (record.contractAccount) {\n          await startService({\n            stateCode: operatingCompany,\n            contract: record.contractAccount,\n          });\n        }\n      } catch (err) {\n        customAlert({\n          type: 'error',\n          title: 'Erro no atendimento',\n          description: 'Não foi iniciar o atendimento.',\n          confirmationText: 'OK',\n        });\n      } finally {\n        closeModal();\n        stopLoading();\n      }\n    },\n    [\n      closeModal,\n      customAlert,\n      operatingCompany,\n      startService,\n      startLoading,\n      stopLoading,\n    ],\n  );\n\n  return (\n    <Container>\n      <RCTable\n        columns={columns}\n        data={data}\n        tableLayout=\"auto\"\n        rowKey=\"contractAccount\"\n        onRow={(record, index) => ({\n          onClick: onRowClick.bind(null, record, index),\n        })}\n      />\n\n      {isLoading && (\n        <Loading isOpen={isLoading} message={message} setIsOpen={stopLoading} />\n      )}\n    </Container>\n  );\n};\n\nexport default ContractsTable;\n","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/InstallmentPaymentModal/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/EmailInvoice/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/whatsappSending.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/getInstallationSubclassName.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/extractResponseData.ts",["464","465","466","467","468","469"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ClientData/styles.ts",[],{"ruleId":"470","replacedBy":"471"},{"ruleId":"472","replacedBy":"473"},{"ruleId":"474","replacedBy":"475"},{"ruleId":"476","replacedBy":"477"},{"ruleId":"478","replacedBy":"479"},{"ruleId":"470","replacedBy":"480"},{"ruleId":"472","replacedBy":"481"},{"ruleId":"474","replacedBy":"482"},{"ruleId":"476","replacedBy":"483"},{"ruleId":"478","replacedBy":"484"},{"ruleId":"485","severity":1,"message":"486","line":36,"column":21,"nodeType":"487","messageId":"488","endLine":36,"endColumn":24,"suggestions":"489"},{"ruleId":"485","severity":1,"message":"486","line":39,"column":23,"nodeType":"487","messageId":"488","endLine":39,"endColumn":26,"suggestions":"490"},{"ruleId":"470","replacedBy":"491"},{"ruleId":"472","replacedBy":"492"},{"ruleId":"474","replacedBy":"493"},{"ruleId":"476","replacedBy":"494"},{"ruleId":"478","replacedBy":"495"},{"ruleId":"470","replacedBy":"496"},{"ruleId":"472","replacedBy":"497"},{"ruleId":"474","replacedBy":"498"},{"ruleId":"476","replacedBy":"499"},{"ruleId":"478","replacedBy":"500"},{"ruleId":"501","severity":1,"message":"502","line":302,"column":7,"nodeType":"503","messageId":"504","endLine":302,"endColumn":18},{"ruleId":"501","severity":1,"message":"502","line":303,"column":7,"nodeType":"503","messageId":"504","endLine":303,"endColumn":18},{"ruleId":"501","severity":1,"message":"502","line":304,"column":7,"nodeType":"503","messageId":"504","endLine":304,"endColumn":18},{"ruleId":"501","severity":1,"message":"502","line":305,"column":7,"nodeType":"503","messageId":"504","endLine":305,"endColumn":18},{"ruleId":"501","severity":1,"message":"502","line":306,"column":7,"nodeType":"503","messageId":"504","endLine":306,"endColumn":18},{"ruleId":"501","severity":1,"message":"502","line":331,"column":9,"nodeType":"503","messageId":"504","endLine":331,"endColumn":20},{"ruleId":"501","severity":1,"message":"502","line":415,"column":9,"nodeType":"503","messageId":"504","endLine":415,"endColumn":20},{"ruleId":"470","replacedBy":"505"},{"ruleId":"472","replacedBy":"506"},{"ruleId":"474","replacedBy":"507"},{"ruleId":"476","replacedBy":"508"},{"ruleId":"478","replacedBy":"509"},{"ruleId":"470","replacedBy":"510"},{"ruleId":"472","replacedBy":"511"},{"ruleId":"474","replacedBy":"512"},{"ruleId":"476","replacedBy":"513"},{"ruleId":"478","replacedBy":"514"},{"ruleId":"515","severity":1,"message":"516","line":18,"column":3,"nodeType":"517","messageId":"518","endLine":18,"endColumn":12},{"ruleId":"470","replacedBy":"519"},{"ruleId":"472","replacedBy":"520"},{"ruleId":"474","replacedBy":"521"},{"ruleId":"476","replacedBy":"522"},{"ruleId":"478","replacedBy":"523"},{"ruleId":"470","replacedBy":"524"},{"ruleId":"472","replacedBy":"525"},{"ruleId":"474","replacedBy":"526"},{"ruleId":"476","replacedBy":"527"},{"ruleId":"478","replacedBy":"528"},{"ruleId":"485","severity":1,"message":"486","line":37,"column":21,"nodeType":"487","messageId":"488","endLine":37,"endColumn":24,"suggestions":"529"},{"ruleId":"485","severity":1,"message":"486","line":40,"column":23,"nodeType":"487","messageId":"488","endLine":40,"endColumn":26,"suggestions":"530"},{"ruleId":"485","severity":1,"message":"486","line":7,"column":13,"nodeType":"487","messageId":"488","endLine":7,"endColumn":16,"suggestions":"531"},{"ruleId":"515","severity":1,"message":"532","line":1,"column":41,"nodeType":"517","messageId":"518","endLine":1,"endColumn":47},{"ruleId":"470","replacedBy":"533"},{"ruleId":"472","replacedBy":"534"},{"ruleId":"474","replacedBy":"535"},{"ruleId":"476","replacedBy":"536"},{"ruleId":"478","replacedBy":"537"},{"ruleId":"515","severity":1,"message":"538","line":8,"column":40,"nodeType":"517","messageId":"518","endLine":8,"endColumn":50},{"ruleId":"515","severity":1,"message":"539","line":8,"column":52,"nodeType":"517","messageId":"518","endLine":8,"endColumn":61},{"ruleId":"515","severity":1,"message":"540","line":1,"column":30,"nodeType":"517","messageId":"518","endLine":1,"endColumn":39},{"ruleId":"515","severity":1,"message":"541","line":5,"column":10,"nodeType":"517","messageId":"518","endLine":5,"endColumn":28},{"ruleId":"515","severity":1,"message":"542","line":18,"column":21,"nodeType":"517","messageId":"518","endLine":18,"endColumn":33},{"ruleId":"470","replacedBy":"543"},{"ruleId":"472","replacedBy":"544"},{"ruleId":"474","replacedBy":"545"},{"ruleId":"476","replacedBy":"546"},{"ruleId":"478","replacedBy":"547"},{"ruleId":"485","severity":1,"message":"486","line":141,"column":20,"nodeType":"487","messageId":"488","endLine":141,"endColumn":23,"suggestions":"548"},{"ruleId":"470","replacedBy":"549"},{"ruleId":"472","replacedBy":"550"},{"ruleId":"474","replacedBy":"551"},{"ruleId":"476","replacedBy":"552"},{"ruleId":"478","replacedBy":"553"},{"ruleId":"470","replacedBy":"554"},{"ruleId":"472","replacedBy":"555"},{"ruleId":"474","replacedBy":"556"},{"ruleId":"476","replacedBy":"557"},{"ruleId":"478","replacedBy":"558"},{"ruleId":"515","severity":1,"message":"559","line":55,"column":27,"nodeType":"517","messageId":"518","endLine":55,"endColumn":28},{"ruleId":"515","severity":1,"message":"532","line":1,"column":41,"nodeType":"517","messageId":"518","endLine":1,"endColumn":47},{"ruleId":"515","severity":1,"message":"560","line":46,"column":8,"nodeType":"517","messageId":"518","endLine":46,"endColumn":15},{"ruleId":"515","severity":1,"message":"561","line":42,"column":20,"nodeType":"517","messageId":"518","endLine":42,"endColumn":25},{"ruleId":"515","severity":1,"message":"562","line":42,"column":27,"nodeType":"517","messageId":"518","endLine":42,"endColumn":32},{"ruleId":"485","severity":1,"message":"486","line":86,"column":25,"nodeType":"487","messageId":"488","endLine":86,"endColumn":28,"suggestions":"563"},{"ruleId":"485","severity":1,"message":"486","line":151,"column":36,"nodeType":"487","messageId":"488","endLine":151,"endColumn":39,"suggestions":"564"},{"ruleId":"485","severity":1,"message":"486","line":155,"column":13,"nodeType":"487","messageId":"488","endLine":155,"endColumn":16,"suggestions":"565"},{"ruleId":"485","severity":1,"message":"486","line":167,"column":13,"nodeType":"487","messageId":"488","endLine":167,"endColumn":16,"suggestions":"566"},{"ruleId":"485","severity":1,"message":"486","line":203,"column":12,"nodeType":"487","messageId":"488","endLine":203,"endColumn":15,"suggestions":"567"},{"ruleId":"485","severity":1,"message":"486","line":222,"column":12,"nodeType":"487","messageId":"488","endLine":222,"endColumn":15,"suggestions":"568"},"lines-around-directive",["569"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],["569"],[],[],[],[],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["570","571"],["572","573"],["569"],[],[],[],[],["569"],[],[],[],[],"no-console","Unexpected console statement.","MemberExpression","unexpected",["569"],[],[],[],[],["569"],[],[],[],[],"@typescript-eslint/no-unused-vars","'setIsOpen' is defined but never used.","Identifier","unusedVar",["569"],[],[],[],[],["569"],[],[],[],[],["574","575"],["576","577"],["578","579"],"'useRef' is defined but never used.",["569"],[],[],[],[],"'OwnerLabel' is defined but never used.","'OwnerName' is defined but never used.","'useEffect' is defined but never used.","'useCustomerService' is defined but never used.","'setQuestions' is assigned a value but never used.",["569"],[],[],[],[],["580","581"],["569"],[],[],[],[],["569"],[],[],[],[],"'i' is defined but never used.","'Address' is defined but never used.","'index' is defined but never used.","'event' is defined but never used.",["582","583"],["584","585"],["586","587"],["588","589"],["590","591"],["592","593"],"padding-line-between-statements",{"messageId":"594","fix":"595","desc":"596"},{"messageId":"597","fix":"598","desc":"599"},{"messageId":"594","fix":"600","desc":"596"},{"messageId":"597","fix":"601","desc":"599"},{"messageId":"594","fix":"602","desc":"596"},{"messageId":"597","fix":"603","desc":"599"},{"messageId":"594","fix":"604","desc":"596"},{"messageId":"597","fix":"605","desc":"599"},{"messageId":"594","fix":"606","desc":"596"},{"messageId":"597","fix":"607","desc":"599"},{"messageId":"594","fix":"608","desc":"596"},{"messageId":"597","fix":"609","desc":"599"},{"messageId":"594","fix":"610","desc":"596"},{"messageId":"597","fix":"611","desc":"599"},{"messageId":"594","fix":"612","desc":"596"},{"messageId":"597","fix":"613","desc":"599"},{"messageId":"594","fix":"614","desc":"596"},{"messageId":"597","fix":"615","desc":"599"},{"messageId":"594","fix":"616","desc":"596"},{"messageId":"597","fix":"617","desc":"599"},{"messageId":"594","fix":"618","desc":"596"},{"messageId":"597","fix":"619","desc":"599"},{"messageId":"594","fix":"620","desc":"596"},{"messageId":"597","fix":"621","desc":"599"},"suggestUnknown",{"range":"622","text":"623"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"622","text":"624"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"625","text":"623"},{"range":"625","text":"624"},{"range":"626","text":"623"},{"range":"626","text":"624"},{"range":"627","text":"623"},{"range":"627","text":"624"},{"range":"628","text":"623"},{"range":"628","text":"624"},{"range":"629","text":"623"},{"range":"629","text":"624"},{"range":"630","text":"623"},{"range":"630","text":"624"},{"range":"631","text":"623"},{"range":"631","text":"624"},{"range":"632","text":"623"},{"range":"632","text":"624"},{"range":"633","text":"623"},{"range":"633","text":"624"},{"range":"634","text":"623"},{"range":"634","text":"624"},{"range":"635","text":"623"},{"range":"635","text":"624"},[963,966],"unknown","never",[1050,1053],[975,978],[1062,1065],[147,150],[3532,3535],[2678,2681],[4297,4300],[4489,4492],[4898,4901],[5932,5935],[6557,6560]]