[{"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\hooks\\toast.tsx":"1","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\hooks\\powerOutageService.tsx":"2","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\utils\\extractResponseData.ts":"3","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\utils\\getInstallationSubclassName.ts":"4","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\utils\\getValidationErrors.ts":"5","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\AlertModal\\styles.ts":"6","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\ToastContainer\\styles.ts":"7","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\LeftBar\\styles.ts":"8","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\OutlineInputMask\\index.tsx":"9","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\CustomRadioGroup\\styles.ts":"10","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Main\\ServicesContent\\ClientData\\index.tsx":"11","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\FindContractModal\\ContractsTable\\styles.ts":"12","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\RequestList\\styles.ts":"13","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\EmailInvoice\\styles.tsx":"14","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\RequestList\\ServiceNotesTable\\index.tsx":"15","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\InputMask\\styles.ts":"16","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Main\\ServicesContent\\ContractData\\index.tsx":"17","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\utils\\hasSocialTariff.ts":"18","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\hooks\\powerReconnectionService.tsx":"19"},{"size":1483,"mtime":1617885892305,"results":"20","hashOfConfig":"21"},{"size":9511,"mtime":1617906770884,"results":"22","hashOfConfig":"21"},{"size":7681,"mtime":1617895473444,"results":"23","hashOfConfig":"21"},{"size":2199,"mtime":1617892003198,"results":"24","hashOfConfig":"21"},{"size":357,"mtime":1617885892325,"results":"25","hashOfConfig":"21"},{"size":1363,"mtime":1617885892240,"results":"26","hashOfConfig":"21"},{"size":162,"mtime":1617885892295,"results":"27","hashOfConfig":"21"},{"size":2177,"mtime":1617885892254,"results":"28","hashOfConfig":"21"},{"size":1671,"mtime":1617885892276,"results":"29","hashOfConfig":"21"},{"size":186,"mtime":1617885892245,"results":"30","hashOfConfig":"21"},{"size":3318,"mtime":1617885892264,"results":"31","hashOfConfig":"21"},{"size":1239,"mtime":1617885892248,"results":"32","hashOfConfig":"21"},{"size":275,"mtime":1617885892292,"results":"33","hashOfConfig":"21"},{"size":751,"mtime":1617885892281,"results":"34","hashOfConfig":"21"},{"size":1803,"mtime":1617885892288,"results":"35","hashOfConfig":"21"},{"size":1138,"mtime":1617885892252,"results":"36","hashOfConfig":"21"},{"size":1656,"mtime":1617894261616,"results":"37","hashOfConfig":"21"},{"size":463,"mtime":1617895759275,"results":"38","hashOfConfig":"21"},{"size":23167,"mtime":1617908235122,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"tpyhyp",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\hooks\\toast.tsx",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\hooks\\powerOutageService.tsx",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\utils\\extractResponseData.ts",["80","81","82","83","84","85"],"import { AxiosResponse } from 'axios';\nimport { parseISO } from 'date-fns';\n\nimport Customer from '../types/Customer';\nimport Installation from '../types/Installation';\nimport Debits, { InvoiceDebit, InstallmentDebit } from '../types/Debits';\nimport ServiceNotes, { OpenNote, ClosedNote } from '../types/ServiceNotes';\n\nimport { phoneMask } from './inputMasks';\n\nimport getInstallationSubclassName from './getInstallationSubclassName';\n\ninterface ExtractedData {\n  customer: Customer;\n  installation: Installation;\n  debits: Debits;\n  serviceNotes: ServiceNotes;\n}\n\ninterface ResponsePhone {\n  tipoTelefone: string;\n  numeroTelefone: string;\n}\n\nfunction getCustomerData(response: AxiosResponse, stateCode: string): Customer {\n  const responseCustomer = response.data.data.cliente[0];\n\n  const customer: Customer = {\n    contractAccount: responseCustomer.contaContrato,\n    name: responseCustomer.nome,\n    surname: responseCustomer.sobrenome,\n    motherName: responseCustomer.nomeMae,\n    dayOfBirth: parseISO(responseCustomer.dataNascimento),\n    rg: responseCustomer.numeroRg,\n    cpf: responseCustomer.numeroCpf,\n    contacts: {\n      email: responseCustomer.contatos.email,\n    },\n    address: {\n      publicArea: responseCustomer.endereco.logradouro,\n      number: responseCustomer.endereco.numero,\n      neighborhood: responseCustomer.endereco.bairro,\n      city: responseCustomer.endereco.cidade,\n      uf: responseCustomer.endereco.uf,\n      postalCode: responseCustomer.endereco.cep,\n    },\n    phaseNumber: Number(responseCustomer.numeroFases),\n    bp: responseCustomer.bp,\n    installationNumber: responseCustomer.numeroInstalacao,\n  };\n\n  if (stateCode === '82' || stateCode === '86') {\n    customer.contractAccount = responseCustomer.contaContrato.toString();\n\n    const landline = responseCustomer.contatos.telefones\n      .filter(\n        (telefone: ResponsePhone) =>\n          telefone.numeroTelefone && telefone.tipoTelefone === 'R',\n      )\n      .map((telefone: ResponsePhone) => phoneMask(telefone.numeroTelefone));\n\n    const cellPhone = responseCustomer.contatos.telefones\n      .filter(\n        (telefone: ResponsePhone) =>\n          telefone.numeroTelefone && telefone.tipoTelefone === 'C',\n      )\n      .map((telefone: ResponsePhone) => phoneMask(telefone.numeroTelefone));\n\n    customer.contacts = {\n      phones: {\n        landline,\n        cellPhone,\n      },\n      email: responseCustomer.contatos.email,\n    };\n\n    customer.installationNumber = responseCustomer.numeroInstalacao.toString();\n\n    customer.address.complement = responseCustomer.endereco.complemento;\n  }\n\n  return customer;\n}\n\nfunction getInstallationData(\n  responseInstallation: any,\n  stateCode: string,\n): Installation {\n  const {\n    status,\n    corteAndamento,\n    desligaAndamento,\n    faltaEnergiaIndividual,\n    faltaEnergiaColetiva,\n    desligamentoProgramado,\n    faltaFases,\n    faltaEnergiaAvaliacaoTecnica,\n  } = responseInstallation;\n\n  const {\n    classe,\n    subclasse,\n    tarifa,\n    grupoTensao,\n    tipoPagamento,\n    fase,\n    localidade,\n    bomPagador,\n  } = responseInstallation.dadosTecnicos;\n\n  const {\n    latitude,\n    longitude,\n  } = responseInstallation.dadosTecnicos.coordenadaGeografica;\n\n  const installation: Installation = {\n    status,\n    cutInProgress: true && corteAndamento === 'S',\n    turnOffInProgress: true && desligaAndamento === 'S',\n    individualPowerOutage: true && faltaEnergiaIndividual === 'S',\n    collectivePowerOutage: true && faltaEnergiaColetiva === 'S',\n    scheduledShutdown: true && desligamentoProgramado === 'S',\n    powerPhaseOutage: true && faltaFases === 'S',\n    powerOutageTechnicalEvaluation:\n      true && faltaEnergiaAvaliacaoTecnica === 'S',\n    technicalData: {\n      class: classe,\n      subclass: subclasse,\n      tariff: tarifa,\n      tensionGroup: grupoTensao,\n      geographicCoordinates: {\n        latitude,\n        longitude,\n      },\n      paymentType: tipoPagamento,\n      phase: Number(fase),\n      locality: localidade,\n      goodPayer: true && bomPagador === 'S',\n    },\n  };\n\n  if (stateCode === '98' || stateCode === '95') {\n    installation.technicalData.subclass = getInstallationSubclassName(\n      installation.technicalData.subclass,\n    );\n  }\n\n  return installation;\n}\n\nfunction getDebits(responseDebits: any, stateCode: string): Debits {\n  const { debitosFatura, debitosParcelamento } = responseDebits;\n\n  const invoiceDebits: InvoiceDebit[] = debitosFatura.detalhesDebitoFatura.map(\n    (debit: any) => {\n      return {\n        overdueInvoiceNumber: debit.numeroFaturaVencida,\n        dueDate: parseISO(debit.dataVencimento),\n        invoiceAmount: Number(debit.valorFatura),\n        invoiceReference: debit.referenciaFatura,\n        paymentCode: debit.codigoPagamento,\n      };\n    },\n  );\n\n  const installmentDebits: InstallmentDebit[] = debitosParcelamento.detalhesDebitoParcelamento.map(\n    (debit: any) => {\n      const parsedDebit: InstallmentDebit = {\n        billingDocumentNumber: debit.numeroDocumentoCobranca,\n        invoiceAmount: Number(debit.valorFatura.toString().trim()),\n        invoiceReference: '',\n        paymentCode: debit.codigoPagamento,\n      };\n\n      if (stateCode === '82' || stateCode === '86') {\n        parsedDebit.invoiceReference = debit.referenciaFatura;\n      }\n\n      return parsedDebit;\n    },\n  );\n\n  const debits: Debits = {\n    invoiceDebits: {\n      invoiceDebitDetails: invoiceDebits,\n      totalAmountInvoiceDebits: Number(debitosFatura.valorTotalDebitoFatura),\n    },\n    installmentDebits: {\n      installmentDebitDetails: installmentDebits,\n      totalAmountInstallmentDebits: Number(\n        debitosParcelamento.valorTotalDebitoParcelamento,\n      ),\n    },\n  };\n\n  return debits;\n}\n\nfunction getServiceNotes(response: AxiosResponse): ServiceNotes {\n  const responseNotes = response.data.data.notas;\n\n  const mappedOpenServiceNotes: OpenNote[] = responseNotes.notasAbertas.map(\n    (note: any) => {\n      const openServiceNote: OpenNote = {\n        type: note.tipoNota,\n        typeDescription: note.descricaoTipoNota,\n        codeGroup: note.grupoCode,\n        codeGroupDescription: note.descricaoGrupoCode,\n        code: note.code,\n        codeDescription: note.descricaoCode,\n        openingDate: parseISO(note.dataAbertura),\n        status: note.status,\n        rejectionCode: note.codigoRejeicao,\n        rejectionCodeDescription: note.descricaoCodigoRejeicao,\n      };\n\n      return openServiceNote;\n    },\n  );\n\n  const mappedClosedServiceNotes: ClosedNote[] = responseNotes.notasEncerradas.map(\n    (note: any) => {\n      const openServiceNote: ClosedNote = {\n        type: note.tipoNota,\n        typeDescription: note.descricaoNota,\n        codeGroup: note.grupoCode,\n        codeGroupDescription: note.descricaoGrupoCode,\n        code: note.code,\n        codeDescription: note.descricaoCode,\n        openingDate: parseISO(note.dataAbertura),\n        conclusionDate: parseISO(note.dataConclusao),\n      };\n\n      return openServiceNote;\n    },\n  );\n\n  const serviceNotes: ServiceNotes = {\n    openServiceNotes: mappedOpenServiceNotes,\n    closedServiceNotes: mappedClosedServiceNotes,\n  };\n\n  return serviceNotes;\n}\n\nfunction extractResponseData(\n  response: AxiosResponse,\n  stateCode: string,\n): ExtractedData {\n  const { data: responseData } = response.data;\n\n  const customer = getCustomerData(response, stateCode);\n  const installation = getInstallationData(responseData.instalacao, stateCode);\n  const debits = getDebits(responseData.debitos, stateCode);\n  const serviceNotes = getServiceNotes(response);\n\n  return {\n    customer,\n    installation,\n    debits,\n    serviceNotes,\n  };\n}\n\nexport default extractResponseData;\n","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\utils\\getInstallationSubclassName.ts",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\utils\\getValidationErrors.ts",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\AlertModal\\styles.ts",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\ToastContainer\\styles.ts",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\LeftBar\\styles.ts",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\OutlineInputMask\\index.tsx",["86","87"],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\CustomRadioGroup\\styles.ts",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Main\\ServicesContent\\ClientData\\index.tsx",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\FindContractModal\\ContractsTable\\styles.ts",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\RequestList\\styles.ts",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\EmailInvoice\\styles.tsx",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\RequestList\\ServiceNotesTable\\index.tsx",["88"],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\InputMask\\styles.ts",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Main\\ServicesContent\\ContractData\\index.tsx",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\utils\\hasSocialTariff.ts",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\hooks\\powerReconnectionService.tsx",["89","90","91"],"import React, { createContext, useCallback, useContext } from 'react';\nimport { useLoading } from 'react-use-loading';\nimport { v4 as uuid } from 'uuid';\nimport Swal from 'sweetalert2';\n\nimport eqtlBarApi from '../services/eqtlBarApi';\n\nimport Customer from '../types/Customer';\nimport Installation from '../types/Installation';\nimport ServiceNotes from '../types/ServiceNotes';\n\nimport { currencyMask } from '../utils/inputMasks';\n\nimport Loading from '../components/Loading';\nimport Debits from '../types/Debits';\n\nimport { useAuth } from './auth';\nimport { useCustomerService } from './customerService';\n\ninterface PowerReconnectionContextData {\n  ableToReconnection({\n    contractAccount,\n    installation,\n    serviceNotes,\n  }: AbleToReconnectionProps): AbleToReconnectionResponse;\n  getReconnectionInfo({\n    installationNumber,\n    phaseNumber,\n    locality,\n    operatingCompany,\n  }: GetReconnectionInfoProps): Promise<ReconnectionInfo>;\n  prepareForPowerReconnection({\n    attendanceData,\n    installation,\n    debits,\n    operatingCompany,\n    protocol,\n  }: PrepareForPowerReconnectionProps): Promise<void>;\n}\n\ninterface AbleToReconnectionResponse {\n  ok: boolean;\n  error?: string;\n}\n\ninterface ReconnectionInfo {\n  tariffs: {\n    commonTariff?: number;\n    emergencyTariff?: number;\n  };\n  deadlineForReconnection: { hours: number };\n}\n\ninterface AbleForEmergencyReconnectionProps {\n  operatingCompany: string;\n  installationNumber: string;\n}\n\ninterface AbleToReconnectionProps {\n  contractAccount: string;\n  installation: Installation;\n  serviceNotes: ServiceNotes;\n}\n\ninterface GetReconnectionInfoProps {\n  installationNumber: string;\n  phaseNumber: number;\n  locality: string;\n  operatingCompany: string;\n}\n\ninterface GeneratePowerReconnectionProps {\n  type: 'common' | 'emergency';\n  operatingCompany: string;\n  contractAccount: string;\n  protocol: string;\n  descriptionText: string;\n  reference: string;\n}\n\ninterface StartPowerReconnectionFlowProps {\n  attendanceData: Customer;\n  installation: Installation;\n  operatingCompany: string;\n  protocol: string;\n}\n\ninterface PrepareForPowerReconnectionProps {\n  attendanceData: Customer;\n  installation: Installation;\n  debits: Debits;\n  operatingCompany: string;\n  protocol: string;\n}\n\nconst PowerReconnectionServiceContext = createContext<PowerReconnectionContextData>(\n  {} as PowerReconnectionContextData,\n);\n\nconst PowerReconnectionProvider: React.FC = ({ children }) => {\n  const [\n    { isLoading, message },\n    { start: startLoading, stop: stopLoading },\n  ] = useLoading();\n\n  const { user } = useAuth();\n  const { fetchServiceData } = useCustomerService();\n\n  const ableForEmergencyReconnection = useCallback(\n    async ({\n      operatingCompany,\n      installationNumber,\n    }: AbleForEmergencyReconnectionProps) => {\n      const response = await eqtlBarApi.get(\n        '/servico/v1/religa/validaHorario',\n        {\n          params: {\n            empresaOperadora: operatingCompany,\n            numeroInstalacao: installationNumber,\n            codigoTransacao: uuid(),\n          },\n        },\n      );\n\n      if (response.data.data.regraSaida === 'U') {\n        return true;\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const getReconnectionInfo = useCallback(\n    async ({\n      installationNumber,\n      phaseNumber,\n      locality,\n      operatingCompany,\n    }: GetReconnectionInfoProps) => {\n      const hasEmergencyReconnection = await ableForEmergencyReconnection({\n        installationNumber,\n        operatingCompany,\n      });\n\n      const reconnectionInfo = {} as ReconnectionInfo;\n\n      if (hasEmergencyReconnection) {\n        if (phaseNumber === 1) {\n          switch (operatingCompany) {\n            case '98':\n              reconnectionInfo.tariffs = { commonTariff: 8.23 };\n              break;\n            case '95':\n              reconnectionInfo.tariffs = {\n                commonTariff: 8.24,\n                emergencyTariff: 41.31,\n              };\n              break;\n            case '82':\n              reconnectionInfo.tariffs = { commonTariff: 8.25 };\n              break;\n            case '86':\n              reconnectionInfo.tariffs = { commonTariff: 7.88 };\n              break;\n            default:\n              break;\n          }\n        }\n\n        if (phaseNumber === 2) {\n          switch (operatingCompany) {\n            case '98':\n              reconnectionInfo.tariffs = { commonTariff: 11.34 };\n              break;\n            case '95':\n              reconnectionInfo.tariffs = {\n                commonTariff: 11.34,\n                emergencyTariff: 61.98,\n              };\n              break;\n            case '82':\n              reconnectionInfo.tariffs = { commonTariff: 34.12 };\n              break;\n            case '86':\n              reconnectionInfo.tariffs = { commonTariff: 32.6 };\n              break;\n            default:\n              break;\n          }\n        }\n\n        if (phaseNumber === 3) {\n          switch (operatingCompany) {\n            case '98':\n              reconnectionInfo.tariffs = { commonTariff: 34.06 };\n              break;\n            case '95':\n              reconnectionInfo.tariffs = {\n                commonTariff: 34.07,\n                emergencyTariff: 103.32,\n              };\n              break;\n            default:\n              break;\n          }\n        }\n      }\n\n      if (!hasEmergencyReconnection) {\n        if (locality === 'RURAL') {\n          reconnectionInfo.deadlineForReconnection = { hours: 48 };\n        } else {\n          reconnectionInfo.deadlineForReconnection = { hours: 24 };\n        }\n\n        if (phaseNumber === 1) {\n          switch (operatingCompany) {\n            case '98':\n              reconnectionInfo.tariffs = { commonTariff: 8.23 };\n              break;\n            case '95':\n              reconnectionInfo.tariffs = { commonTariff: 8.24 };\n              break;\n            case '82':\n              reconnectionInfo.tariffs = { commonTariff: 8.25 };\n              break;\n            case '86':\n              reconnectionInfo.tariffs = { commonTariff: 7.88 };\n              break;\n            default:\n              break;\n          }\n        }\n\n        if (phaseNumber === 2) {\n          switch (operatingCompany) {\n            case '98':\n              reconnectionInfo.tariffs = { commonTariff: 11.34 };\n              break;\n            case '95':\n              reconnectionInfo.tariffs = { commonTariff: 11.34 };\n              break;\n            default:\n              break;\n          }\n        }\n\n        if (phaseNumber === 3) {\n          switch (operatingCompany) {\n            case '98':\n              reconnectionInfo.tariffs = { commonTariff: 34.06 };\n              break;\n            case '95':\n              reconnectionInfo.tariffs = { commonTariff: 34.07 };\n              break;\n            case '82':\n              reconnectionInfo.tariffs = { commonTariff: 34.12 };\n              break;\n            case '86':\n              reconnectionInfo.tariffs = { commonTariff: 32.6 };\n              break;\n            default:\n              break;\n          }\n        }\n      }\n\n      return reconnectionInfo;\n    },\n    [ableForEmergencyReconnection],\n  );\n\n  const ableToReconnection = useCallback(\n    ({\n      contractAccount,\n      installation,\n      serviceNotes,\n    }: AbleToReconnectionProps) => {\n      // Buscar notas de desligamento\n      const shutdownNote = serviceNotes.openServiceNotes.find(\n        note => note.type === 'DS',\n      );\n\n      // Buscar notas de suspensão\n      const suspensionNote = serviceNotes.openServiceNotes.find(\n        note => note.type === 'SF',\n      );\n\n      // Buscar notas de fiscalização\n      const oversightNote = serviceNotes.openServiceNotes.find(\n        note => note.type === 'FS',\n      );\n\n      // Buscar notas de ligação nova\n      const newEnergyConnectionNote = serviceNotes.openServiceNotes.find(\n        note => note.type === 'LN',\n      );\n\n      // Buscar notas de religação\n      const reconnectionNote = serviceNotes.openServiceNotes.find(\n        note => note.type === 'RL',\n      );\n\n      if (installation.status === 'Potencial') {\n        return {\n          ok: false,\n          error: `A conta contrato ${contractAccount} ainda não está ligada.`,\n        };\n      }\n\n      if (\n        installation.status === 'Desligada' ||\n        installation.status === 'Desliga em andamento'\n      ) {\n        return {\n          ok: false,\n          error:\n            'Esta conta contrato está desligada. Para restabelecer seu fornecimento de energia você precisa solicitar uma reativação.',\n        };\n      }\n\n      if (\n        installation.cutInProgress ||\n        installation.status === 'Corte executado' ||\n        installation.status === 'Corte em andamento'\n      ) {\n        console.log('corteExecutado');\n\n        if (reconnectionNote) {\n          if (\n            reconnectionNote.status === 'REJE' ||\n            reconnectionNote.status === 'ATIV' ||\n            reconnectionNote.status === 'DEVO'\n          ) {\n            return {\n              // VERIFICAR TEXTO\n              ok: false,\n              error: 'Infelizmente não é possível atender este caso por aqui.',\n            };\n          }\n\n          if (reconnectionNote.status === 'RECE') {\n            if (reconnectionNote.code === 'RELU') {\n              return {\n                ok: false,\n                error: `Já existe um serviço de religação de urgência em aberto para ${contractAccount}. Por favor, aguarde e logo logo seu fornecimento de energia será restabelecido.`,\n              };\n            }\n\n            if (reconnectionNote.code === 'RELA') {\n              return {\n                ok: false,\n                error: `Já existe um serviço de religação automática em aberto para ${contractAccount}. Por favor, aguarde e logo logo seu fornecimento de energia será restabelecido.`,\n              };\n            }\n\n            if (reconnectionNote.code === 'RELC') {\n              return {\n                ok: false,\n                error: `Já existe um serviço de religação em aberto para ${contractAccount}. Por favor, aguarde e logo logo seu fornecimento de energia será restabelecido.`,\n              };\n            }\n          }\n        }\n\n        if (shutdownNote) {\n          return {\n            ok: false,\n            error:\n              'Esta conta contrato está desligada. Para restabelecer seu fornecimento de energia você precisa solicitar uma reativação.',\n          };\n        }\n\n        if (oversightNote) {\n          // VERIFICAR ESSA CONDIÇÃO\n          return {\n            ok: false,\n            error:\n              'Infelizmente não é possível atender este caso por aqui. Você pode solicitar este serviço ligando para o 116 ou indo em uma de nossas agências de atendimento',\n          };\n        }\n\n        if (suspensionNote) {\n          // VERIFICAR ESSA CONDIÇÃO\n          if (\n            suspensionNote.status !== 'RECE' &&\n            suspensionNote.status !== 'FINL'\n          ) {\n            if (oversightNote) {\n              return {\n                ok: false,\n                error:\n                  'Infelizmente não é possível atender este caso por aqui. Você pode solicitar este serviço ligando para o 116 ou indo em uma de nossas agências de atendimento',\n              };\n            }\n          }\n        }\n      }\n\n      if (newEnergyConnectionNote) {\n        return {\n          ok: false,\n          error: `Já existe um serviço de reativação em aberto para ${contractAccount}. Por favor, aguarde e logo logo seu fornecimento de energia será restabelecido.`,\n        };\n      }\n\n      if (\n        installation.status === 'Reativa em Andamento' ||\n        installation.status === 'Religa em Andamento'\n      ) {\n        console.log('religa andamento');\n\n        if (newEnergyConnectionNote) {\n          return {\n            ok: false,\n            error: `Já existe um serviço de reativação em aberto para ${contractAccount}. Por favor, aguarde e logo logo seu fornecimento de energia será restabelecido.`,\n          };\n        }\n\n        if (reconnectionNote) {\n          if (\n            reconnectionNote.status === 'REJE' ||\n            reconnectionNote.status === 'ATIV' ||\n            reconnectionNote.status === 'DEVO'\n          ) {\n            // VERIFICAR ESSE TEXTO\n            return {\n              ok: false,\n              error: 'Infelizmente não é possível atender este caso por aqui.',\n            };\n          }\n\n          if (\n            reconnectionNote.status === 'RECE' ||\n            reconnectionNote.status === 'ERRO'\n          ) {\n            if (reconnectionNote.code === 'RELU') {\n              return {\n                ok: false,\n                error: `Já existe um serviço de religação de urgência em aberto para ${contractAccount}. Por favor, aguarde e logo logo seu fornecimento de energia será restabelecido.`,\n              };\n            }\n\n            if (reconnectionNote.code === 'RELA') {\n              return {\n                ok: false,\n                error: `Já existe um serviço de religação automática em aberto para ${contractAccount}. Por favor, aguarde e logo logo seu fornecimento de energia será restabelecido.`,\n              };\n            }\n\n            if (reconnectionNote.code === 'RELC') {\n              return {\n                ok: false,\n                error: `Já existe um serviço de religação em aberto para ${contractAccount}. Por favor, aguarde e logo logo seu fornecimento de energia será restabelecido.`,\n              };\n            }\n          }\n        }\n\n        if (reconnectionNote) {\n          if (\n            reconnectionNote.status === 'REJE' ||\n            reconnectionNote.status === 'ATIV' ||\n            reconnectionNote.status === 'DEVO'\n          ) {\n            // VERIFICAR ESSE TEXTO\n            return {\n              ok: false,\n              error: 'Infelizmente não é possível atender este caso por aqui.',\n            };\n          }\n\n          return {\n            ok: false,\n            error: 'Você já possui uma religação em andamento',\n          };\n        }\n      }\n\n      if (installation.status === 'Ligada') {\n        if (oversightNote) {\n          // VERIFICAR ESSE\n          return {\n            ok: false,\n            error: 'Infelizmente não é possível atender este caso por aqui.',\n          };\n        }\n\n        if (suspensionNote) {\n          return { ok: true };\n        }\n\n        return {\n          ok: false,\n          error: `A conta contrato ${contractAccount} não está com o fornecimento suspenso, mas pode ser que você esteja com uma falta de energia.`,\n        };\n      }\n\n      // AVALIAR ESTE CASO\n      return { ok: true };\n    },\n    [],\n  );\n\n  const generatePowerReconnection = useCallback(\n    async ({\n      type,\n      operatingCompany,\n      contractAccount,\n      protocol,\n      descriptionText,\n      reference,\n    }: GeneratePowerReconnectionProps) => {\n      try {\n        startLoading('Gerando solicitação de Religação ...');\n\n        let path;\n\n        switch (type) {\n          case 'common':\n            path = '/servico/v1/religa/comum';\n            break;\n          case 'emergency':\n            path = '/servico/v1/religa/urgente';\n            break;\n          default:\n            return;\n        }\n\n        await eqtlBarApi.post(\n          path,\n          {\n            codigoTransacao: uuid(),\n            data: {\n              contaContrato: contractAccount,\n              protocolo: protocol,\n              textoDescritivo: descriptionText,\n              referencia: reference,\n            },\n          },\n          {\n            params: {\n              empresaOperadora: operatingCompany,\n            },\n          },\n        );\n\n        await fetchServiceData({\n          contract: contractAccount,\n          stateCode: operatingCompany,\n        });\n\n        Swal.fire({\n          icon: 'success',\n          title: 'Religação',\n          html: '<p>Religação comum gerada com sucesso.</p>',\n          confirmButtonText: `OK`,\n          confirmButtonColor: '#3c1490',\n        });\n      } catch {\n        Swal.fire({\n          icon: 'error',\n          title: 'Religação',\n          html: '<p>Falha ao gerar a solicitação de Religação.</p>',\n          confirmButtonText: `OK`,\n          confirmButtonColor: '#3c1490',\n        });\n      } finally {\n        stopLoading();\n      }\n    },\n    [startLoading, stopLoading],\n  );\n\n  const startPowerReconnectionFlow = useCallback(\n    async ({\n      attendanceData,\n      installation,\n      operatingCompany,\n      protocol,\n    }: StartPowerReconnectionFlowProps) => {\n      try {\n        startLoading('Analisando informações da instalação ...');\n\n        const reconnectionInfo = await getReconnectionInfo({\n          installationNumber: attendanceData.installationNumber,\n          locality: installation.technicalData.locality,\n          operatingCompany,\n          phaseNumber: attendanceData.phaseNumber,\n        });\n\n        if (\n          !reconnectionInfo.tariffs.emergencyTariff &&\n          reconnectionInfo.tariffs.commonTariff\n        ) {\n          Swal.fire({\n            icon: 'question',\n            title: 'Religação',\n            html: `<p>Você gostaria de solicitar uma Religação Comum com prazo de até ${\n              reconnectionInfo.deadlineForReconnection.hours\n            } horas para atendimento no valor de ${currencyMask(\n              reconnectionInfo.tariffs.commonTariff,\n            )} a serem cobrados em sua próxima fatura?</p>`,\n            showDenyButton: true,\n            confirmButtonText: `Sim, gostaria`,\n            denyButtonText: `Não`,\n            confirmButtonColor: '#3c1490',\n            denyButtonColor: '#eb5757',\n          }).then(async resultCommonTariff => {\n            if (resultCommonTariff.isConfirmed) {\n              await generatePowerReconnection({\n                type: 'common',\n                contractAccount: attendanceData.contractAccount,\n                descriptionText: `Gerado pela Tela Ágil - Usuário: ${user}`,\n                operatingCompany,\n                protocol: protocol || '00',\n                reference: attendanceData.address.referencePoint\n                  ? attendanceData.address.referencePoint\n                  : '',\n              });\n            } else if (resultCommonTariff.isDenied) {\n              Swal.fire({\n                icon: 'info',\n                title: 'Religação',\n                html: '<p>Sua solicitação não foi realizada.</p>',\n                confirmButtonText: `Sim`,\n                confirmButtonColor: '#3c1490',\n              });\n            }\n          });\n        } else if (\n          reconnectionInfo.tariffs.emergencyTariff &&\n          reconnectionInfo.tariffs.commonTariff\n        ) {\n          const inputOptions = {\n            COMUM: `Comum = ${currencyMask(\n              reconnectionInfo.tariffs.commonTariff || 0,\n            )}`,\n            URGENCIA: `Urgência = ${currencyMask(\n              reconnectionInfo.tariffs.emergencyTariff || 0,\n            )}`,\n          };\n\n          const { value: reconnectionOption } = await Swal.fire({\n            title: 'Religação',\n            html:\n              '<p>Você gostaria de solicitar uma Religação que será cobrada somente na sua próxima fatura? Caso seja sim, selecione o tipo de religação:</p>',\n            input: 'radio',\n            inputOptions,\n            inputValidator: value => {\n              if (!value) {\n                return 'Selecione uma opção para continuar.';\n              }\n\n              return null;\n            },\n          });\n\n          if (reconnectionOption) {\n            const reconnectionType =\n              reconnectionOption === 'URGENCIA' ? 'emergency' : 'common';\n\n            await generatePowerReconnection({\n              type: reconnectionType,\n              contractAccount: attendanceData.contractAccount,\n              descriptionText: `Gerado pela Tela Ágil - Usuário: ${user}`,\n              operatingCompany,\n              protocol: protocol || '00',\n              reference: attendanceData.address.referencePoint\n                ? attendanceData.address.referencePoint\n                : '',\n            });\n          }\n        }\n      } catch {\n        Swal.fire({\n          icon: 'error',\n          title: 'Religação',\n          html: '<p>Falha ao gerar o serviço de religação.</p>',\n          confirmButtonText: `OK`,\n          confirmButtonColor: '#3c1490',\n        });\n      } finally {\n        stopLoading();\n      }\n    },\n    [\n      generatePowerReconnection,\n      getReconnectionInfo,\n      startLoading,\n      stopLoading,\n      user,\n    ],\n  );\n\n  const prepareForPowerReconnection = useCallback(\n    async ({\n      attendanceData,\n      installation,\n      debits,\n      operatingCompany,\n      protocol,\n    }: PrepareForPowerReconnectionProps) => {\n      if (\n        debits.invoiceDebits.totalAmountInvoiceDebits > 0 ||\n        debits.installmentDebits.totalAmountInstallmentDebits > 0\n      ) {\n        Swal.fire({\n          icon: 'question',\n          title: 'Religação',\n          html: `<p>Você possui ${\n            debits.invoiceDebits.invoiceDebitDetails.length\n          } faturas com um débito de ${currencyMask(\n            debits.invoiceDebits.totalAmountInvoiceDebits,\n          )}. Estão pagas?</p>`,\n          showDenyButton: true,\n          confirmButtonText: `Sim`,\n          denyButtonText: `Não`,\n          confirmButtonColor: '#3c1490',\n          denyButtonColor: '#eb5757',\n        }).then(async resultHasDebits => {\n          if (resultHasDebits.isConfirmed) {\n            await startPowerReconnectionFlow({\n              attendanceData,\n              installation,\n              operatingCompany,\n              protocol,\n            });\n          } else if (resultHasDebits.isDenied) {\n            Swal.fire({\n              icon: 'info',\n              title: 'Religação',\n              html:\n                '<p>Efetue o pagamento e retorne para solicitar a religação.</p>',\n              confirmButtonText: `Sim`,\n              confirmButtonColor: '#3c1490',\n            });\n          }\n        });\n      } else {\n        await startPowerReconnectionFlow({\n          attendanceData,\n          installation,\n          operatingCompany,\n          protocol,\n        });\n      }\n    },\n    [startPowerReconnectionFlow],\n  );\n\n  return (\n    <PowerReconnectionServiceContext.Provider\n      value={{\n        ableToReconnection,\n        getReconnectionInfo,\n        prepareForPowerReconnection,\n      }}\n    >\n      {children}\n\n      {isLoading && (\n        <Loading isOpen={isLoading} message={message} setIsOpen={stopLoading} />\n      )}\n    </PowerReconnectionServiceContext.Provider>\n  );\n};\n\nfunction usePowerReconnectionService(): PowerReconnectionContextData {\n  const context = useContext(PowerReconnectionServiceContext);\n\n  if (!context) {\n    throw new Error(\n      'usePowerReconnectionService must be used within a PowerReconnectionProvider',\n    );\n  }\n\n  return context;\n}\n\nexport { PowerReconnectionProvider, usePowerReconnectionService };\n",{"ruleId":"92","severity":1,"message":"93","line":86,"column":25,"nodeType":"94","messageId":"95","endLine":86,"endColumn":28,"suggestions":"96"},{"ruleId":"92","severity":1,"message":"93","line":151,"column":36,"nodeType":"94","messageId":"95","endLine":151,"endColumn":39,"suggestions":"97"},{"ruleId":"92","severity":1,"message":"93","line":155,"column":13,"nodeType":"94","messageId":"95","endLine":155,"endColumn":16,"suggestions":"98"},{"ruleId":"92","severity":1,"message":"93","line":167,"column":13,"nodeType":"94","messageId":"95","endLine":167,"endColumn":16,"suggestions":"99"},{"ruleId":"92","severity":1,"message":"93","line":203,"column":12,"nodeType":"94","messageId":"95","endLine":203,"endColumn":15,"suggestions":"100"},{"ruleId":"92","severity":1,"message":"93","line":222,"column":12,"nodeType":"94","messageId":"95","endLine":222,"endColumn":15,"suggestions":"101"},{"ruleId":"92","severity":1,"message":"93","line":37,"column":21,"nodeType":"94","messageId":"95","endLine":37,"endColumn":24,"suggestions":"102"},{"ruleId":"92","severity":1,"message":"93","line":40,"column":23,"nodeType":"94","messageId":"95","endLine":40,"endColumn":26,"suggestions":"103"},{"ruleId":"104","severity":1,"message":"105","line":55,"column":27,"nodeType":"106","messageId":"107","endLine":55,"endColumn":28},{"ruleId":"108","severity":1,"message":"109","line":328,"column":9,"nodeType":"110","messageId":"111","endLine":328,"endColumn":20},{"ruleId":"108","severity":1,"message":"109","line":412,"column":9,"nodeType":"110","messageId":"111","endLine":412,"endColumn":20},{"ruleId":"112","severity":1,"message":"113","line":573,"column":5,"nodeType":"114","endLine":573,"endColumn":32,"suggestions":"115"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["116","117"],["118","119"],["120","121"],["122","123"],["124","125"],["126","127"],["128","129"],["130","131"],"@typescript-eslint/no-unused-vars","'i' is defined but never used.","Identifier","unusedVar","no-console","Unexpected console statement.","MemberExpression","unexpected","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'fetchServiceData'. Either include it or remove the dependency array.","ArrayExpression",["132"],{"messageId":"133","fix":"134","desc":"135"},{"messageId":"136","fix":"137","desc":"138"},{"messageId":"133","fix":"139","desc":"135"},{"messageId":"136","fix":"140","desc":"138"},{"messageId":"133","fix":"141","desc":"135"},{"messageId":"136","fix":"142","desc":"138"},{"messageId":"133","fix":"143","desc":"135"},{"messageId":"136","fix":"144","desc":"138"},{"messageId":"133","fix":"145","desc":"135"},{"messageId":"136","fix":"146","desc":"138"},{"messageId":"133","fix":"147","desc":"135"},{"messageId":"136","fix":"148","desc":"138"},{"messageId":"133","fix":"149","desc":"135"},{"messageId":"136","fix":"150","desc":"138"},{"messageId":"133","fix":"151","desc":"135"},{"messageId":"136","fix":"152","desc":"138"},{"desc":"153","fix":"154"},"suggestUnknown",{"range":"155","text":"156"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"155","text":"157"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"158","text":"156"},{"range":"158","text":"157"},{"range":"159","text":"156"},{"range":"159","text":"157"},{"range":"160","text":"156"},{"range":"160","text":"157"},{"range":"161","text":"156"},{"range":"161","text":"157"},{"range":"162","text":"156"},{"range":"162","text":"157"},{"range":"163","text":"156"},{"range":"163","text":"157"},{"range":"164","text":"156"},{"range":"164","text":"157"},"Update the dependencies array to be: [fetchServiceData, startLoading, stopLoading]",{"range":"165","text":"166"},[2678,2681],"unknown","never",[4297,4300],[4489,4492],[4898,4901],[5932,5935],[6557,6560],[975,978],[1062,1065],[16335,16362],"[fetchServiceData, startLoading, stopLoading]"]