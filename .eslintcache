[{"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\App.tsx":"1","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\routes\\Route.tsx":"2","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Input\\index.tsx":"3","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Button\\styles.ts":"4","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\FindContractModal\\index.tsx":"5","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\CustomRadioGroup\\styles.ts":"6","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Main\\ServicesContent\\QuickMenu\\index.tsx":"7","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\DebitsConsultationModal\\index.tsx":"8","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\InputMask\\index.tsx":"9","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\ServiceNotesList\\ServiceNotesTable\\styles.ts":"10","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\hooks\\customerService.tsx":"11","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\index.tsx":"12","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\hooks\\changeDueDateService.tsx":"13","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\AlertModal\\index.tsx":"14","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\ToastContainer\\Toast\\index.tsx":"15","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Main\\Header\\index.tsx":"16","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\OutlineInputRegex\\styles.ts":"17","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Main\\ServicesContent\\ClientData\\index.tsx":"18","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Main\\ServicesContent\\QuickMenu\\styles.ts":"19","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\ServiceNotesList\\index.tsx":"20","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\PowerOutageFlow\\StepModal\\styles.ts":"21","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\hooks\\powerReconnectionService.tsx":"22","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Loading\\index.tsx":"23","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Main\\index.tsx":"24","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\CustomRadioGroup\\RadioOptions\\index.tsx":"25","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\FindContractModal\\ContractsTable\\index.tsx":"26","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\utils\\hasSocialTariff.ts":"27","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\MonitoringOfProtocols\\index.tsx":"28","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\ServiceNotesList\\styles.ts":"29","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\MonitoringOfProtocols\\ProtocolsTable\\index.tsx":"30","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\MonitoringOfProtocols\\ProtocolsTable\\styles.ts":"31"},{"size":352,"mtime":1643395026498,"results":"32","hashOfConfig":"33"},{"size":884,"mtime":1643395026623,"results":"34","hashOfConfig":"33"},{"size":1557,"mtime":1643395026523,"results":"35","hashOfConfig":"33"},{"size":377,"mtime":1643395026508,"results":"36","hashOfConfig":"33"},{"size":1399,"mtime":1643395026517,"results":"37","hashOfConfig":"33"},{"size":186,"mtime":1643395026511,"results":"38","hashOfConfig":"33"},{"size":11067,"mtime":1643395026554,"results":"39","hashOfConfig":"33"},{"size":9210,"mtime":1643395026571,"results":"40","hashOfConfig":"33"},{"size":1609,"mtime":1643395026526,"results":"41","hashOfConfig":"33"},{"size":1200,"mtime":1643395026592,"results":"42","hashOfConfig":"33"},{"size":10829,"mtime":1643395998511,"results":"43","hashOfConfig":"33"},{"size":267,"mtime":1643395985146,"results":"44","hashOfConfig":"33"},{"size":3922,"mtime":1643395026603,"results":"45","hashOfConfig":"33"},{"size":2390,"mtime":1643395026505,"results":"46","hashOfConfig":"33"},{"size":1180,"mtime":1643395026597,"results":"47","hashOfConfig":"33"},{"size":2331,"mtime":1643395026540,"results":"48","hashOfConfig":"33"},{"size":1448,"mtime":1643395026570,"results":"49","hashOfConfig":"33"},{"size":3439,"mtime":1643395026549,"results":"50","hashOfConfig":"33"},{"size":1336,"mtime":1643395026555,"results":"51","hashOfConfig":"33"},{"size":3563,"mtime":1643395026593,"results":"52","hashOfConfig":"33"},{"size":852,"mtime":1643395026588,"results":"53","hashOfConfig":"33"},{"size":23738,"mtime":1643395026608,"results":"54","hashOfConfig":"33"},{"size":1081,"mtime":1643395026535,"results":"55","hashOfConfig":"33"},{"size":296,"mtime":1643395026557,"results":"56","hashOfConfig":"33"},{"size":1765,"mtime":1643395026509,"results":"57","hashOfConfig":"33"},{"size":2132,"mtime":1643395026513,"results":"58","hashOfConfig":"33"},{"size":463,"mtime":1643395026639,"results":"59","hashOfConfig":"33"},{"size":2376,"mtime":1643395026584,"results":"60","hashOfConfig":"33"},{"size":275,"mtime":1643395026593,"results":"61","hashOfConfig":"33"},{"size":1708,"mtime":1643395026582,"results":"62","hashOfConfig":"33"},{"size":1200,"mtime":1643395026583,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"j10x2d",{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"85"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\App.tsx",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\routes\\Route.tsx",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Input\\index.tsx",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Button\\styles.ts",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\FindContractModal\\index.tsx",["131","132"],"import React from 'react';\n\nimport { useCustomerService } from '../../hooks/customerService';\n\nimport Modal from '../Modal';\nimport ContractsTable from './ContractsTable';\n\nimport { ModalContent, OwnerContainer, OwnerLabel, OwnerName } from './styles';\n\ninterface ModalProps {\n  isOpen: boolean;\n  setIsOpen: () => void;\n}\n\ninterface Contract {\n  contractAccount: string;\n  address: string;\n}\n\nconst FindContractModal: React.FC<ModalProps> = ({ isOpen, setIsOpen }) => {\n  const { contracts } = useCustomerService();\n\n  const data: Contract[] = contracts.map(contract => ({\n    contractAccount: contract.contractAccount,\n    address: `${contract.address.publicArea}, ${contract.address.number}, ${contract.address.neighborhood}, ${contract.address.city} - ${contract.address.uf}, CEP ${contract.address.postalCode}`,\n  }));\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      setIsOpen={setIsOpen}\n      customStyles={{\n        borderRadius: '8px',\n        padding: '48px 0',\n        width: 'fit-content',\n        height: 'fit-content',\n      }}\n    >\n      <ModalContent>\n        <OwnerContainer>\n          {/* <OwnerLabel>Nome do titular:</OwnerLabel> */}\n          {/* <OwnerName>{contracts && contracts[0].owner}</OwnerName> */}\n        </OwnerContainer>\n\n        <ContractsTable data={data} closeModal={setIsOpen} />\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default FindContractModal;\n",["133","134","135","136","137"],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\CustomRadioGroup\\styles.ts",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Main\\ServicesContent\\QuickMenu\\index.tsx",["138","139","140"],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\DebitsConsultationModal\\index.tsx",["141"],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\InputMask\\index.tsx",["142","143"],"import React, { useEffect, useRef, useState, useCallback } from 'react';\nimport ReactInputMask, { Props } from 'react-input-mask';\nimport { IconBaseProps } from 'react-icons';\nimport { FiAlertCircle } from 'react-icons/fi';\nimport { useField } from '@unform/core';\n\nimport { Container, Error } from './styles';\n\ninterface InputProps extends Props {\n  name: string;\n  icon?: React.ComponentType<IconBaseProps>;\n}\n\nconst OutlineInputMask: React.FC<InputProps> = ({\n  name,\n  icon: Icon,\n  ...rest\n}) => {\n  const inputRef = useRef(null);\n  const [isFocused, setIsFocused] = useState(false);\n  const { fieldName, defaultValue, error, registerField } = useField(name);\n\n  const handleInputFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n\n  const handleInputBlur = useCallback(() => {\n    setIsFocused(false);\n  }, []);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value',\n      setValue(ref: any, value: string) {\n        ref.setInputValue(value);\n      },\n      clearValue(ref: any) {\n        ref.setInputValue('');\n      },\n    });\n  }, [fieldName, registerField]);\n\n  return (\n    <Container isFocused={isFocused} isErrored={!!error}>\n      {Icon && <Icon size={20} />}\n\n      <ReactInputMask\n        onFocus={handleInputFocus}\n        onBlur={handleInputBlur}\n        defaultValue={defaultValue}\n        ref={inputRef}\n        {...rest}\n      />\n\n      {error && (\n        <Error title={error}>\n          <FiAlertCircle color=\"#ff5353\" size={20} />\n        </Error>\n      )}\n    </Container>\n  );\n};\n\nexport default OutlineInputMask;\n",["144","145","146","147","148"],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\ServiceNotesList\\ServiceNotesTable\\styles.ts",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\hooks\\customerService.tsx",["149"],"import React, { createContext, useCallback, useContext, useState } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport Swal from 'sweetalert2';\n\nimport { useAuth } from './auth';\n\nimport Customer from '../types/Customer';\nimport Installation from '../types/Installation';\nimport Debits from '../types/Debits';\n\nimport {\n  extractResponseData,\n  getInstallationData,\n  getServiceNotes,\n} from '../utils/extractResponseData';\n\nimport ServiceNotes from '../types/ServiceNotes';\nimport eqtlBarApi from '../services/eqtlBarApi';\nimport Address from '../types/Address';\n\ninterface CustomerServiceState {\n  operatingCompany: string;\n  customer: Customer;\n  installation: Installation;\n  debits: Debits;\n  serviceNotes: ServiceNotes;\n  protocol?: string;\n  contracts: Contract[];\n}\n\ninterface GetCustomerData {\n  stateCode: string;\n  contractAccount: string;\n}\n\ninterface StartServiceProps {\n  stateCode: string;\n  contractAccount: string;\n}\n\ninterface CustomerServiceContextData {\n  operatingCompany: string;\n  protocol: string | undefined;\n  customer: Customer;\n  installation: Installation;\n  debits: Debits;\n  serviceNotes: ServiceNotes;\n  contracts: Contract[];\n  serviceStarted: boolean;\n  fetchServiceData(customerData: GetCustomerData): Promise<void>;\n  fetchInstallationData({\n    contractAccount,\n    operatingCompany,\n  }: FetchInstallationDataProps): Promise<void>;\n  startService({\n    stateCode,\n    contractAccount,\n  }: StartServiceProps): Promise<void>;\n  finishService(attendanceTime: string): Promise<void>;\n  registerServicePerformed({\n    serviceName,\n    executionDate,\n  }: ServicePerformed): void;\n  findAllContracts({\n    stateCode,\n    cpf,\n  }: FindAllContractsProps): Promise<Contract[]>;\n  generateProtocol({\n    operatingCompany,\n    contractAccount,\n  }: GenerateProtocolProps): Promise<void>;\n}\n\ninterface GenerateProtocolProps {\n  operatingCompany: string;\n  contractAccount: string;\n}\n\ninterface FindAllContractsProps {\n  stateCode: string;\n  cpf: string;\n}\n\ninterface FetchInstallationDataProps {\n  contractAccount: string;\n  operatingCompany: string;\n}\n\ninterface ServicePerformed {\n  serviceName: string;\n  executionDate: Date;\n}\n\ninterface Contract {\n  contractAccount: string;\n  address: Address;\n}\n\nconst CustomerServiceContext = createContext<CustomerServiceContextData>(\n  {} as CustomerServiceContextData,\n);\n\nconst CustomerServiceProvider: React.FC = ({ children }) => {\n  const { user } = useAuth();\n\n  const [serviceStarted, setServiceStarted] = useState(false);\n  const [servicesPerformed, setServicesPerformed] = useState<\n    ServicePerformed[]\n  >([]);\n\n  const [\n    customerServiceData,\n    setCustomerServiceData,\n  ] = useState<CustomerServiceState>(() => {\n    const storagedCustomerServiceData = localStorage.getItem(\n      '@TelaAgil:customerServiceData',\n    );\n\n    const storagedProtocol = localStorage.getItem('@TelaAgil:protocol');\n\n    if (storagedCustomerServiceData) {\n      const {\n        operatingCompany,\n        customer,\n        installation,\n        debits,\n        serviceNotes,\n      } = JSON.parse(storagedCustomerServiceData);\n\n      const customerServiceState: CustomerServiceState = {\n        operatingCompany,\n        customer,\n        installation,\n        debits,\n        serviceNotes,\n        contracts: [],\n      };\n\n      if (storagedProtocol) {\n        customerServiceState.protocol = storagedProtocol;\n      }\n\n      return customerServiceState;\n    }\n\n    return {} as CustomerServiceState;\n  });\n\n  const findAllContracts = useCallback(\n    async ({ stateCode, cpf }: FindAllContractsProps) => {\n      const response = await eqtlBarApi.get('/atendimento/v1/clientes', {\n        params: {\n          cpf,\n          flagDadosCliente: true,\n          empresaOperadora: stateCode,\n          codigoTransacao: uuid(),\n        },\n      });\n\n      const contracts: Contract[] = response.data.data.cliente.map(\n        (contract: any) => ({\n          contractAccount:\n            typeof contract.contaContrato === 'string'\n              ? contract.contaContrato.replace(/^0+/, '')\n              : contract.contaContrato.toString().replace(/^0+/, ''),\n          address: {\n            publicArea: contract.endereco.logradouro,\n            number: contract.endereco.numero,\n            neighborhood: contract.endereco.bairro,\n            city: contract.endereco.cidade,\n            uf: contract.endereco.uf,\n            postalCode: contract.endereco.cep,\n            referencePoint: contract.endereco.pontoReferencia,\n          },\n        }),\n      );\n\n      if (!contracts.length) {\n        throw new Error();\n      } else {\n        setCustomerServiceData({\n          ...customerServiceData,\n          operatingCompany: stateCode,\n          contracts,\n        });\n\n        return contracts;\n      }\n    },\n    [customerServiceData],\n  );\n\n  const fetchServiceData = useCallback(\n    async ({ stateCode, contractAccount }: GetCustomerData) => {\n      const response = await eqtlBarApi.get('/atendimento/v1/clientes', {\n        params: {\n          codigoTransacao: uuid(),\n          contrato: contractAccount,\n          empresaOperadora: stateCode,\n          flagDadosCliente: true,\n          flagStatusInstalacao: true,\n          flagPossuiDebitos: true,\n          flagDadosTecnicos: true,\n          flagNotasAbertas: true,\n          flagNotasEncerradas: true,\n          flagDetalheDebitoCobranca: true,\n          flagDetalheDebitoFatura: true,\n        },\n      });\n\n      const {\n        customer,\n        installation,\n        debits,\n        serviceNotes,\n      } = extractResponseData(response, stateCode);\n\n      localStorage.setItem(\n        '@TelaAgil:customerServiceData',\n        JSON.stringify({\n          operatingCompany: stateCode,\n          customer,\n          installation,\n          debits,\n          serviceNotes,\n          contracts: [],\n        }),\n      );\n\n      setCustomerServiceData({\n        operatingCompany: stateCode,\n        customer,\n        installation,\n        debits,\n        serviceNotes,\n        contracts: [],\n      });\n    },\n    [],\n  );\n\n  const generateProtocol = useCallback(\n    async ({ operatingCompany, contractAccount }: GenerateProtocolProps) => {\n      const response = await eqtlBarApi.get('/atendimento/v1/clientes', {\n        params: {\n          empresaOperadora: operatingCompany,\n          contrato: contractAccount,\n          flagGerarProtocolo: true,\n          codigoTransacao: uuid(),\n        },\n      });\n\n      localStorage.setItem('@TelaAgil:protocol', response.data.data.protocolo);\n\n      setCustomerServiceData(state => ({\n        ...state,\n        protocol: response.data.data.protocolo,\n      }));\n    },\n    [],\n  );\n\n  const fetchInstallationData = useCallback(\n    async ({\n      contractAccount,\n      operatingCompany,\n    }: FetchInstallationDataProps) => {\n      const response = await eqtlBarApi.get('/atendimento/v1/clientes', {\n        params: {\n          codigoTransacao: uuid(),\n          contrato: contractAccount,\n          empresaOperadora: operatingCompany,\n          flagStatusInstalacao: true,\n          flagDadosTecnicos: true,\n          flagNotasAbertas: true,\n          flagNotasEncerradas: true,\n        },\n      });\n\n      const responseInstallationData = response.data.data.instalacao;\n\n      const installationData = getInstallationData(\n        responseInstallationData,\n        operatingCompany,\n      );\n\n      const serviceNotesData = getServiceNotes(response);\n\n      setCustomerServiceData({\n        ...customerServiceData,\n        installation: installationData,\n        serviceNotes: serviceNotesData,\n      });\n\n      localStorage.setItem(\n        '@TelaAgil:customerServiceData',\n        JSON.stringify({\n          ...customerServiceData,\n          installation: installationData,\n          serviceNotes: serviceNotesData,\n        }),\n      );\n    },\n    [customerServiceData],\n  );\n\n  const startService = useCallback(\n    async ({ stateCode, contractAccount }: StartServiceProps) => {\n      const formattedContractAccount = contractAccount.replace(/^0+/, '');\n\n      try {\n        await fetchServiceData({\n          stateCode,\n          contractAccount: formattedContractAccount,\n        });\n\n        setServiceStarted(true);\n      } catch (err) {\n        Swal.fire({\n          icon: 'error',\n          title: 'Erro no atendimento',\n          html:\n            '<p>Ocorreu um erro ao iniciar o atendimento, cheque as informações do cliente</p>',\n          confirmButtonText: `OK`,\n          confirmButtonColor: '#3c1490',\n        });\n      }\n    },\n    [fetchServiceData],\n  );\n\n  const saveAttendanceLog = useCallback(\n    async (attendanceTime: string) => {\n      await eqtlBarApi.post('/logs', {\n        user_id: user.id,\n        username: user.name,\n        operatingCompany: customerServiceData.operatingCompany,\n        contractAccount: customerServiceData.customer.contractAccount,\n        attendanceTime,\n        services: servicesPerformed,\n      });\n    },\n    [\n      user,\n      customerServiceData.operatingCompany,\n      customerServiceData.customer,\n      servicesPerformed,\n    ],\n  );\n\n  const finishService = useCallback(\n    async (attendanceTime: string) => {\n      await saveAttendanceLog(attendanceTime);\n\n      localStorage.removeItem('@TelaAgil:protocol');\n      localStorage.removeItem('@TelaAgil:contracts');\n      localStorage.removeItem('@TelaAgil:customerServiceData');\n\n      setCustomerServiceData({} as CustomerServiceContextData);\n\n      setServicesPerformed([]);\n\n      setServiceStarted(false);\n    },\n    [saveAttendanceLog],\n  );\n\n  const registerServicePerformed = useCallback(\n    ({ serviceName, executionDate }: ServicePerformed) => {\n      setServicesPerformed(oldServices => [\n        ...oldServices,\n        { serviceName, executionDate },\n      ]);\n    },\n    [],\n  );\n\n  return (\n    <CustomerServiceContext.Provider\n      value={{\n        operatingCompany: customerServiceData.operatingCompany,\n        protocol: customerServiceData.protocol,\n        customer: customerServiceData.customer,\n        installation: customerServiceData.installation,\n        debits: customerServiceData.debits,\n        serviceNotes: customerServiceData.serviceNotes,\n        contracts: customerServiceData.contracts,\n        serviceStarted,\n        fetchServiceData,\n        fetchInstallationData,\n        startService,\n        finishService,\n        registerServicePerformed,\n        findAllContracts,\n        generateProtocol,\n      }}\n    >\n      {children}\n    </CustomerServiceContext.Provider>\n  );\n};\n\nfunction useCustomerService(): CustomerServiceContextData {\n  const context = useContext(CustomerServiceContext);\n\n  if (!context) {\n    throw new Error(\n      'useCustomerService must be used within a CustomerServiceProvider',\n    );\n  }\n\n  return context;\n}\n\nexport { CustomerServiceProvider, useCustomerService };\n","C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\index.tsx",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\hooks\\changeDueDateService.tsx",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\AlertModal\\index.tsx",["150"],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\ToastContainer\\Toast\\index.tsx",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Main\\Header\\index.tsx",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\OutlineInputRegex\\styles.ts",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Main\\ServicesContent\\ClientData\\index.tsx",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Main\\ServicesContent\\QuickMenu\\styles.ts",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\ServiceNotesList\\index.tsx",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\PowerOutageFlow\\StepModal\\styles.ts",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\hooks\\powerReconnectionService.tsx",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Loading\\index.tsx",["151"],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Main\\index.tsx",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\CustomRadioGroup\\RadioOptions\\index.tsx",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\FindContractModal\\ContractsTable\\index.tsx",["152","153"],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\utils\\hasSocialTariff.ts",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\MonitoringOfProtocols\\index.tsx",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\ServiceNotesList\\styles.ts",[],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\MonitoringOfProtocols\\ProtocolsTable\\index.tsx",["154"],"C:\\Users\\tnep00114\\Desktop\\eqtl-tela-agil\\src\\components\\Services\\MonitoringOfProtocols\\ProtocolsTable\\styles.ts",[],{"ruleId":"155","severity":1,"message":"156","line":8,"column":40,"nodeType":"157","messageId":"158","endLine":8,"endColumn":50},{"ruleId":"155","severity":1,"message":"159","line":8,"column":52,"nodeType":"157","messageId":"158","endLine":8,"endColumn":61},{"ruleId":"160","replacedBy":"161"},{"ruleId":"162","replacedBy":"163"},{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","replacedBy":"169"},{"ruleId":"155","severity":1,"message":"170","line":6,"column":3,"nodeType":"157","messageId":"158","endLine":6,"endColumn":15},{"ruleId":"155","severity":1,"message":"171","line":68,"column":11,"nodeType":"157","messageId":"158","endLine":68,"endColumn":20},{"ruleId":"172","severity":1,"message":"173","line":234,"column":21,"nodeType":"174","messageId":"175","endLine":234,"endColumn":24,"suggestions":"176"},{"ruleId":"177","severity":1,"message":"178","line":272,"column":6,"nodeType":"179","endLine":272,"endColumn":32,"suggestions":"180"},{"ruleId":"172","severity":1,"message":"173","line":36,"column":21,"nodeType":"174","messageId":"175","endLine":36,"endColumn":24,"suggestions":"181"},{"ruleId":"172","severity":1,"message":"173","line":39,"column":23,"nodeType":"174","messageId":"175","endLine":39,"endColumn":26,"suggestions":"182"},{"ruleId":"160","replacedBy":"183"},{"ruleId":"162","replacedBy":"184"},{"ruleId":"164","replacedBy":"185"},{"ruleId":"166","replacedBy":"186"},{"ruleId":"168","replacedBy":"187"},{"ruleId":"172","severity":1,"message":"173","line":161,"column":20,"nodeType":"174","messageId":"175","endLine":161,"endColumn":23,"suggestions":"188"},{"ruleId":"155","severity":1,"message":"189","line":1,"column":41,"nodeType":"157","messageId":"158","endLine":1,"endColumn":47},{"ruleId":"155","severity":1,"message":"190","line":18,"column":3,"nodeType":"157","messageId":"158","endLine":18,"endColumn":12},{"ruleId":"155","severity":1,"message":"191","line":43,"column":20,"nodeType":"157","messageId":"158","endLine":43,"endColumn":25},{"ruleId":"155","severity":1,"message":"192","line":43,"column":27,"nodeType":"157","messageId":"158","endLine":43,"endColumn":32},{"ruleId":"155","severity":1,"message":"193","line":46,"column":27,"nodeType":"157","messageId":"158","endLine":46,"endColumn":28},"@typescript-eslint/no-unused-vars","'OwnerLabel' is defined but never used.","Identifier","unusedVar","'OwnerName' is defined but never used.","lines-around-directive",["194"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"'FaDollarSign' is defined but never used.","'protocols' is assigned a value but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["195","196"],"react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'operatingCompany'. Either include it or remove the dependency array.","ArrayExpression",["197"],["198","199"],["200","201"],["194"],[],[],[],[],["202","203"],"'useRef' is defined but never used.","'setIsOpen' is defined but never used.","'index' is defined but never used.","'event' is defined but never used.","'i' is defined but never used.","padding-line-between-statements",{"messageId":"204","fix":"205","desc":"206"},{"messageId":"207","fix":"208","desc":"209"},{"desc":"210","fix":"211"},{"messageId":"204","fix":"212","desc":"206"},{"messageId":"207","fix":"213","desc":"209"},{"messageId":"204","fix":"214","desc":"206"},{"messageId":"207","fix":"215","desc":"209"},{"messageId":"204","fix":"216","desc":"206"},{"messageId":"207","fix":"217","desc":"209"},"suggestUnknown",{"range":"218","text":"219"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"218","text":"220"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.","Update the dependencies array to be: [debits.invoiceDebits.invoiceDebitDetails, handleClickDebit, operatingCompany]",{"range":"221","text":"222"},{"range":"223","text":"219"},{"range":"223","text":"220"},{"range":"224","text":"219"},{"range":"224","text":"220"},{"range":"225","text":"219"},{"range":"225","text":"220"},[7112,7115],"unknown","never",[7700,7726],"[debits.invoiceDebits.invoiceDebitDetails, handleClickDebit, operatingCompany]",[963,966],[1050,1053],[3904,3907]]