[{"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/index.tsx":"1","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/styles/global.ts":"2","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/auth.tsx":"3","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/whatsappSending.tsx":"4","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/powerReconnectionService.tsx":"5","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/pages/Dashboard/index.tsx":"6","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/pages/SignIn/styles.ts":"7","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Loading/index.tsx":"8","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Loading/styles.ts":"9","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Input/index.tsx":"10","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/index.tsx":"11","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/styles.ts":"12","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Input/styles.ts":"13","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/index.tsx":"14","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/CustomRadioGroup/index.tsx":"15","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/Header/styles.ts":"16","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/OutlineInputRegex/masks.ts":"17","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/CustomRadioGroup/styles.ts":"18","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ClientData/index.tsx":"19","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Tooltip/styles.ts":"20","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Modal/index.tsx":"21","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/Header/TagInfo/styles.ts":"22","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ContractData/styles.ts":"23","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/FindContractModal/ContractsTable/styles.ts":"24","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/index.tsx":"25","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/EmailInvoice/index.tsx":"26","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DueDateChange/index.tsx":"27","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DebitsConsultationModal/styles.ts":"28","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/questions/PowerOutageQuestions.ts":"29","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/InputMask/index.tsx":"30","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/InputMask/styles.ts":"31","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/QuickMenu/index.tsx":"32","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/routes/index.tsx":"33","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/toast.tsx":"34","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/changeDueDateService.tsx":"35","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/timer.tsx":"36","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/services/authenticationApi.ts":"37","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/services/yaloApi.ts":"38","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/pages/SignIn/index.tsx":"39","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/ToastContainer/index.tsx":"40","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/LeftBar/index.tsx":"41","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/OutlineInputRegex/index.tsx":"42","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/CustomRadioGroup/RadioOptions/styles.ts":"43","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/FindContractModal/ContractsTable/index.tsx":"44","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/InstallmentPaymentModal/index.tsx":"45","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/getUnformattedPhone.ts":"46","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/InstallmentPaymentModal/styles.ts":"47","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/EmailInvoice/styles.tsx":"48","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/App.tsx":"49","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/customerService.tsx":"50","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/alert.tsx":"51","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/services/eqtlBarApi.ts":"52","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/extractResponseData.ts":"53","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/getValidationErrors.ts":"54","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/ToastContainer/styles.ts":"55","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Button/index.tsx":"56","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/ToastContainer/Toast/styles.ts":"57","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/CustomRadioGroup/RadioOptions/index.tsx":"58","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/FindContractModal/styles.ts":"59","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/styles.ts":"60","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/QuickMenu/styles.ts":"61","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ClientData/styles.ts":"62","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DebitsConsultationModal/index.tsx":"63","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DueDateChange/styles.ts":"64","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/StepModal/styles.ts":"65","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/Header/index.tsx":"66","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/Header/TagInfo/index.tsx":"67","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/routes/Route.tsx":"68","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Button/styles.ts":"69","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ContractData/index.tsx":"70","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/hasSocialTariff.ts":"71","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/debitsConsultation.tsx":"72","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/powerOutageService.tsx":"73","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/inputMasks.ts":"74","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/AlertModal/index.tsx":"75","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/LeftBar/styles.ts":"76","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/FindContractModal/index.tsx":"77","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/OutlineInputRegex/styles.ts":"78","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/index.tsx":"79","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/monitoringOfProtocols.tsx":"80","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/StepModal/index.tsx":"81","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/addZeroesToNumber.ts":"82","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/ServiceNotesList/index.tsx":"83","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/ServiceNotesList/ServiceNotesTable/styles.ts":"84"},{"size":495,"mtime":1622137225660,"results":"85","hashOfConfig":"86"},{"size":569,"mtime":1622137225660,"results":"87","hashOfConfig":"86"},{"size":2213,"mtime":1622137225660,"results":"88","hashOfConfig":"86"},{"size":7038,"mtime":1622152573188,"results":"89","hashOfConfig":"86"},{"size":24519,"mtime":1620217969847,"results":"90","hashOfConfig":"86"},{"size":643,"mtime":1620217969847,"results":"91","hashOfConfig":"86"},{"size":801,"mtime":1622137225660,"results":"92","hashOfConfig":"86"},{"size":1132,"mtime":1620217969843,"results":"93","hashOfConfig":"86"},{"size":248,"mtime":1622137225656,"results":"94","hashOfConfig":"86"},{"size":1620,"mtime":1620217969843,"results":"95","hashOfConfig":"86"},{"size":313,"mtime":1622137225656,"results":"96","hashOfConfig":"86"},{"size":142,"mtime":1622137225656,"results":"97","hashOfConfig":"86"},{"size":1362,"mtime":1620217969843,"results":"98","hashOfConfig":"86"},{"size":440,"mtime":1622137225656,"results":"99","hashOfConfig":"86"},{"size":388,"mtime":1622137225656,"results":"100","hashOfConfig":"86"},{"size":1458,"mtime":1622137225656,"results":"101","hashOfConfig":"86"},{"size":1021,"mtime":1622137225660,"results":"102","hashOfConfig":"86"},{"size":197,"mtime":1622137225656,"results":"103","hashOfConfig":"86"},{"size":3439,"mtime":1622138068335,"results":"104","hashOfConfig":"86"},{"size":783,"mtime":1622137225660,"results":"105","hashOfConfig":"86"},{"size":941,"mtime":1622137225656,"results":"106","hashOfConfig":"86"},{"size":611,"mtime":1621538646640,"results":"107","hashOfConfig":"86"},{"size":750,"mtime":1622137225656,"results":"108","hashOfConfig":"86"},{"size":1318,"mtime":1622137225656,"results":"109","hashOfConfig":"86"},{"size":1248,"mtime":1622137225660,"results":"110","hashOfConfig":"86"},{"size":4007,"mtime":1622137225660,"results":"111","hashOfConfig":"86"},{"size":3708,"mtime":1622137225660,"results":"112","hashOfConfig":"86"},{"size":3036,"mtime":1622137225660,"results":"113","hashOfConfig":"86"},{"size":3474,"mtime":1622137225660,"results":"114","hashOfConfig":"86"},{"size":1675,"mtime":1622137225656,"results":"115","hashOfConfig":"86"},{"size":1217,"mtime":1622137225656,"results":"116","hashOfConfig":"86"},{"size":9791,"mtime":1622153020843,"results":"117","hashOfConfig":"86"},{"size":395,"mtime":1622137225660,"results":"118","hashOfConfig":"86"},{"size":1546,"mtime":1620217969847,"results":"119","hashOfConfig":"86"},{"size":3922,"mtime":1622152460823,"results":"120","hashOfConfig":"86"},{"size":1333,"mtime":1622137225660,"results":"121","hashOfConfig":"86"},{"size":313,"mtime":1622137225660,"results":"122","hashOfConfig":"86"},{"size":187,"mtime":1622137225660,"results":"123","hashOfConfig":"86"},{"size":3179,"mtime":1622137225660,"results":"124","hashOfConfig":"86"},{"size":819,"mtime":1622137225660,"results":"125","hashOfConfig":"86"},{"size":7796,"mtime":1622137225656,"results":"126","hashOfConfig":"86"},{"size":2123,"mtime":1622137225660,"results":"127","hashOfConfig":"86"},{"size":386,"mtime":1620217969843,"results":"128","hashOfConfig":"86"},{"size":2226,"mtime":1622137225656,"results":"129","hashOfConfig":"86"},{"size":5915,"mtime":1622137225660,"results":"130","hashOfConfig":"86"},{"size":274,"mtime":1620217969847,"results":"131","hashOfConfig":"86"},{"size":2634,"mtime":1622137225660,"results":"132","hashOfConfig":"86"},{"size":799,"mtime":1622137225660,"results":"133","hashOfConfig":"86"},{"size":372,"mtime":1621538646636,"results":"134","hashOfConfig":"86"},{"size":10690,"mtime":1621541310925,"results":"135","hashOfConfig":"86"},{"size":1546,"mtime":1621538646644,"results":"136","hashOfConfig":"86"},{"size":287,"mtime":1622137225660,"results":"137","hashOfConfig":"86"},{"size":8063,"mtime":1622137225660,"results":"138","hashOfConfig":"86"},{"size":374,"mtime":1622137225660,"results":"139","hashOfConfig":"86"},{"size":171,"mtime":1622137225660,"results":"140","hashOfConfig":"86"},{"size":329,"mtime":1622137225656,"results":"141","hashOfConfig":"86"},{"size":1243,"mtime":1622137225660,"results":"142","hashOfConfig":"86"},{"size":1834,"mtime":1622137225656,"results":"143","hashOfConfig":"86"},{"size":461,"mtime":1621538646640,"results":"144","hashOfConfig":"86"},{"size":444,"mtime":1621538646640,"results":"145","hashOfConfig":"86"},{"size":1422,"mtime":1621538646640,"results":"146","hashOfConfig":"86"},{"size":860,"mtime":1622137225656,"results":"147","hashOfConfig":"86"},{"size":9544,"mtime":1622137225660,"results":"148","hashOfConfig":"86"},{"size":1294,"mtime":1622137225660,"results":"149","hashOfConfig":"86"},{"size":903,"mtime":1622137225660,"results":"150","hashOfConfig":"86"},{"size":2331,"mtime":1621544073336,"results":"151","hashOfConfig":"86"},{"size":434,"mtime":1622137225656,"results":"152","hashOfConfig":"86"},{"size":843,"mtime":1622137225660,"results":"153","hashOfConfig":"86"},{"size":396,"mtime":1622137225656,"results":"154","hashOfConfig":"86"},{"size":1727,"mtime":1622137225656,"results":"155","hashOfConfig":"86"},{"size":484,"mtime":1622137225660,"results":"156","hashOfConfig":"86"},{"size":1589,"mtime":1622137225660,"results":"157","hashOfConfig":"86"},{"size":10533,"mtime":1622152545468,"results":"158","hashOfConfig":"86"},{"size":1803,"mtime":1622137225660,"results":"159","hashOfConfig":"86"},{"size":2485,"mtime":1622137225656,"results":"160","hashOfConfig":"86"},{"size":2319,"mtime":1622137225656,"results":"161","hashOfConfig":"86"},{"size":1450,"mtime":1622137225656,"results":"162","hashOfConfig":"86"},{"size":1548,"mtime":1622137225660,"results":"163","hashOfConfig":"86"},{"size":1583,"mtime":1622145490289,"results":"164","hashOfConfig":"86"},{"size":3417,"mtime":1622153359907,"results":"165","hashOfConfig":"86"},{"size":5269,"mtime":1622137225660,"results":"166","hashOfConfig":"86"},{"size":309,"mtime":1622152415407,"results":"167","hashOfConfig":"86"},{"size":3650,"mtime":1622138674462,"results":"168","hashOfConfig":"86"},{"size":1273,"mtime":1622137225660,"results":"169","hashOfConfig":"86"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},"1t2qx1c",{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"206"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"225"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"239","messages":"240","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"206"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"264","messages":"265","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"276","messages":"277","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"303","messages":"304","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"228"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"328","messages":"329","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"206"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"347"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/index.tsx",[],["350","351","352","353","354"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/styles/global.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/auth.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/whatsappSending.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/powerReconnectionService.tsx",[],["355","356","357","358","359"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/pages/Dashboard/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/pages/SignIn/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Loading/index.tsx",["360"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Loading/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Input/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Input/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/CustomRadioGroup/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/Header/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/OutlineInputRegex/masks.ts",[],["361","362","363","364","365"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/CustomRadioGroup/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ClientData/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Tooltip/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Modal/index.tsx",["366"],"import React, { useState, useEffect } from 'react';\r\nimport Rodal from 'rodal';\r\n\r\nimport 'rodal/lib/rodal.css';\r\n\r\ninterface IModalProps {\r\n  children: any;\r\n  isOpen: boolean;\r\n  customStyles?: object;\r\n  setIsOpen: () => void;\r\n}\r\n\r\nconst Modal: React.FC<IModalProps> = ({\r\n  children,\r\n  isOpen,\r\n  setIsOpen,\r\n  customStyles,\r\n}) => {\r\n  const [modalStatus, setModalStatus] = useState(isOpen);\r\n\r\n  useEffect(() => {\r\n    setModalStatus(isOpen);\r\n  }, [isOpen]);\r\n\r\n  return (\r\n    <Rodal\r\n      visible={modalStatus}\r\n      showCloseButton\r\n      closeOnEsc\r\n      onClose={setIsOpen}\r\n      customStyles={\r\n        customStyles || {\r\n          borderRadius: '8px',\r\n          padding: '48px 64px',\r\n          width: '736px',\r\n          height: 'fit-content',\r\n        }\r\n      }\r\n      customMaskStyles={{\r\n        background: 'rgba(0, 0, 0, 0.6)',\r\n      }}\r\n    >\r\n      {children}\r\n    </Rodal>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/Header/TagInfo/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ContractData/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/FindContractModal/ContractsTable/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/index.tsx",["367"],"import React, { useCallback, useState } from 'react';\r\n\r\nimport StepModal, { Question } from './StepModal';\r\n\r\nimport powerOutageQuestions from './questions/PowerOutageQuestions';\r\n\r\ninterface FlowComponentProps {\r\n  modalOpen: boolean;\r\n  toggleModal(): void;\r\n}\r\n\r\nconst PowerOutageFlow: React.FC<FlowComponentProps> = ({\r\n  modalOpen,\r\n  toggleModal,\r\n}) => {\r\n  const [questions, setQuestions] = useState<Question[]>(powerOutageQuestions);\r\n  const [currentQuestion, setCurrentQuestion] = useState(questions[0]);\r\n\r\n  const handleSetCurrentQuestion = useCallback(\r\n    (nextQuestionId: string) => {\r\n      const nextQuestion: Question | undefined = questions.find(\r\n        question => question.id === nextQuestionId,\r\n      );\r\n\r\n      if (nextQuestion) {\r\n        setCurrentQuestion(nextQuestion);\r\n      }\r\n    },\r\n    [questions],\r\n  );\r\n\r\n  const handleClearFlow = useCallback(() => {\r\n    setCurrentQuestion(questions[0]);\r\n  }, [questions]);\r\n\r\n  return (\r\n    <StepModal\r\n      isOpen={modalOpen}\r\n      setIsOpen={toggleModal}\r\n      title=\"Falta de energia\"\r\n      question={currentQuestion}\r\n      setCurrentQuestion={handleSetCurrentQuestion}\r\n      clearFlow={handleClearFlow}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PowerOutageFlow;\r\n",["368","369","370","371","372"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/EmailInvoice/index.tsx",[],["373","374","375","376","377"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DueDateChange/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DebitsConsultationModal/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/questions/PowerOutageQuestions.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/InputMask/index.tsx",["378","379"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/InputMask/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/QuickMenu/index.tsx",["380","381","382","383"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/routes/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/toast.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/changeDueDateService.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/timer.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/services/authenticationApi.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/services/yaloApi.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/pages/SignIn/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/ToastContainer/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/LeftBar/index.tsx",["384","385"],"import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from 'react';\r\nimport { FiPower } from 'react-icons/fi';\r\nimport { FormHandles } from '@unform/core';\r\nimport { Form } from '@unform/web';\r\nimport { format } from 'date-fns';\r\nimport * as Yup from 'yup';\r\nimport { useLoading } from 'react-use-loading';\r\nimport { useStopwatch } from 'react-timer-hook';\r\n\r\nimport getValidationErrors from '../../utils/getValidationErrors';\r\n\r\nimport {\r\n  Container,\r\n  Logo,\r\n  WelcomeText,\r\n  Username,\r\n  UserMenu,\r\n  LogoutButton,\r\n  LogoutButtonText,\r\n  ServiceForm,\r\n  StartServiceButton,\r\n  FinishServiceButton,\r\n  Cronometro,\r\n} from './styles';\r\n\r\nimport OutlineInput from '../OutlineInput';\r\nimport OutlineInputRegex from '../OutlineInputRegex';\r\nimport OutlineInputMask from '../OutlineInputMask';\r\nimport CustomRadioGroup from '../CustomRadioGroup';\r\nimport RadioOptions from '../CustomRadioGroup/RadioOptions';\r\nimport Loading from '../Loading';\r\nimport FindContractModal from '../FindContractModal';\r\n\r\nimport logoWhiteImg from '../../assets/logo-white.svg';\r\n\r\nimport { useAuth } from '../../hooks/auth';\r\nimport { useCustomerService } from '../../hooks/customerService';\r\nimport { useToast } from '../../hooks/toast';\r\nimport { useAlert } from '../../hooks/alert';\r\n\r\ninterface StartServiceFormData {\r\n  state: string;\r\n  contract: string;\r\n  cpf: string;\r\n}\r\n\r\nconst LeftBar: React.FC = () => {\r\n  const { user, signOut } = useAuth();\r\n  const { addToast } = useToast();\r\n  const { customAlert } = useAlert();\r\n  const [{ isLoading, message }, { start, stop }] = useLoading();\r\n\r\n  const {\r\n    start: startTimer,\r\n    reset: resetTimer,\r\n    isRunning,\r\n    hours,\r\n    seconds,\r\n    minutes,\r\n  } = useStopwatch({\r\n    autoStart: false,\r\n  });\r\n\r\n  const {\r\n    startService,\r\n    customer,\r\n    finishService,\r\n    serviceStarted,\r\n    findAllContracts,\r\n    contracts,\r\n  } = useCustomerService();\r\n\r\n  const [openModalFindContract, setOpenModalFindContract] = useState(false);\r\n\r\n  const formRef = useRef<FormHandles>(null);\r\n\r\n  const toggleModalFindContract = useCallback(() => {\r\n    setOpenModalFindContract(!openModalFindContract);\r\n  }, [openModalFindContract]);\r\n\r\n  const handleSubmit = useCallback(\r\n    async (data: StartServiceFormData) => {\r\n      try {\r\n        start('Localizando cliente ...');\r\n\r\n        formRef.current?.setErrors({});\r\n\r\n        const schema = Yup.object().shape({\r\n          contract: Yup.string().when('cpf', {\r\n            is: (val: string) => !val.length,\r\n            then: Yup.string().required('Conta contrato obrigatória'),\r\n            otherwise: Yup.string(),\r\n          }),\r\n          cpf: Yup.string(),\r\n        });\r\n\r\n        await schema.validate(data, {\r\n          abortEarly: false,\r\n        });\r\n\r\n        if (data.contract && data.cpf) {\r\n          customAlert({\r\n            type: 'error',\r\n            title: 'Erro no formulário',\r\n            description:\r\n              'Utilize apenas um dos campos (Conta contrato ou CPF / CNPJ)',\r\n            confirmationText: 'OK',\r\n          });\r\n\r\n          return;\r\n        }\r\n\r\n        if (!data.contract && data.cpf) {\r\n          const unformattedCpf = data.cpf.replace(/\\D/gim, '');\r\n\r\n          const responseContracts = await findAllContracts({\r\n            stateCode: data.state[0],\r\n            cpf: unformattedCpf,\r\n          });\r\n\r\n          if (responseContracts.length > 1) {\r\n            toggleModalFindContract();\r\n            return;\r\n          }\r\n\r\n          await startService({\r\n            stateCode: data.state[0],\r\n            contractAccount: responseContracts[0].contractAccount,\r\n          });\r\n\r\n          return;\r\n        }\r\n\r\n        const unformattedContract = data.contract.replace(/\\D/gim, '');\r\n\r\n        await startService({\r\n          stateCode: data.state[0],\r\n          contractAccount: unformattedContract,\r\n        });\r\n      } catch (err) {\r\n        if (err instanceof Yup.ValidationError) {\r\n          const errors = getValidationErrors(err);\r\n\r\n          formRef.current?.setErrors(errors);\r\n          return;\r\n        }\r\n\r\n        customAlert({\r\n          type: 'error',\r\n          title: 'Erro no atendimento',\r\n          description:\r\n            'Não foi possível localizar o cliente, cheque as informações',\r\n          confirmationText: 'OK',\r\n        });\r\n      } finally {\r\n        stop();\r\n      }\r\n    },\r\n    [\r\n      startService,\r\n      start,\r\n      stop,\r\n      customAlert,\r\n      findAllContracts,\r\n      toggleModalFindContract,\r\n    ],\r\n  );\r\n\r\n  const formattedTime = useMemo(() => {\r\n    return format(new Date(0, 0, 0, hours, minutes, seconds), 'mm:ss');\r\n  }, [hours, minutes, seconds]);\r\n\r\n  const handleFinishService = useCallback(async () => {\r\n    try {\r\n      start('Finalizando atendimento ...');\r\n\r\n      await finishService(formattedTime);\r\n    } catch {\r\n      addToast({\r\n        type: 'error',\r\n        title: 'Registro de logs',\r\n        description: 'Ocorreu um erro ao salvar o log do atendimento.',\r\n      });\r\n    } finally {\r\n      stop();\r\n    }\r\n  }, [finishService, formattedTime, addToast, start, stop]);\r\n\r\n  useEffect(() => {\r\n    if (serviceStarted && !isRunning) {\r\n      startTimer();\r\n    }\r\n\r\n    if (!serviceStarted) {\r\n      resetTimer();\r\n    }\r\n  }, [serviceStarted, startTimer, isRunning, resetTimer]);\r\n\r\n  return (\r\n    <Container>\r\n      <UserMenu>\r\n        <Logo src={logoWhiteImg} alt=\"Equatorial Energia\" />\r\n\r\n        <WelcomeText>\r\n          Bem vindo,\r\n          <Username>{user.name}</Username>\r\n        </WelcomeText>\r\n\r\n        <LogoutButton onClick={signOut}>\r\n          <FiPower />\r\n          <LogoutButtonText>Sair</LogoutButtonText>\r\n        </LogoutButton>\r\n      </UserMenu>\r\n\r\n      <ServiceForm>\r\n        <Form\r\n          ref={formRef}\r\n          onSubmit={handleSubmit}\r\n          initialData={{ state: '82' }}\r\n        >\r\n          <CustomRadioGroup fieldLabel=\"Estado\">\r\n            <RadioOptions\r\n              name=\"state\"\r\n              options={[\r\n                { id: 'radio1', value: '82', label: 'Alagoas' },\r\n                { id: 'radio2', value: '98', label: 'Maranhão' },\r\n                { id: 'radio3', value: '95', label: 'Pará' },\r\n                { id: 'radio4', value: '86', label: 'Piauí' },\r\n              ]}\r\n              disabled={serviceStarted}\r\n            />\r\n          </CustomRadioGroup>\r\n\r\n          <OutlineInputRegex\r\n            name=\"contract\"\r\n            type=\"text\"\r\n            mask=\"contractAccount\"\r\n            placeholder=\"Código único ou conta contrato\"\r\n            autoComplete=\"off\"\r\n            disabled={serviceStarted}\r\n          />\r\n\r\n          <OutlineInputRegex\r\n            name=\"cpf\"\r\n            type=\"text\"\r\n            mask=\"cpfCnpj\"\r\n            placeholder=\"CPF ou CNPJ\"\r\n            autoComplete=\"off\"\r\n            disabled={serviceStarted}\r\n          />\r\n\r\n          {serviceStarted && customer ? (\r\n            <FinishServiceButton type=\"button\" onClick={handleFinishService}>\r\n              Encerrar atendimento\r\n            </FinishServiceButton>\r\n          ) : (\r\n            <StartServiceButton type=\"submit\">\r\n              Iniciar atendimento\r\n            </StartServiceButton>\r\n          )}\r\n\r\n          {serviceStarted && customer && (\r\n            <Cronometro>\r\n              <span>Tempo de atendimento:</span>\r\n              <h1>{formattedTime}</h1>\r\n            </Cronometro>\r\n          )}\r\n        </Form>\r\n      </ServiceForm>\r\n\r\n      {contracts && (\r\n        <FindContractModal\r\n          isOpen={openModalFindContract}\r\n          setIsOpen={toggleModalFindContract}\r\n        />\r\n      )}\r\n\r\n      {isLoading && (\r\n        <Loading isOpen={isLoading} message={message} setIsOpen={stop} />\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default LeftBar;\r\n","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/OutlineInputRegex/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/CustomRadioGroup/RadioOptions/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/FindContractModal/ContractsTable/index.tsx",["386","387"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/InstallmentPaymentModal/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/getUnformattedPhone.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/InstallmentPaymentModal/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/EmailInvoice/styles.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/App.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/customerService.tsx",["388"],"import React, { createContext, useCallback, useContext, useState } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport Swal from 'sweetalert2';\n\nimport { useAuth } from './auth';\n\nimport Customer from '../types/Customer';\nimport Installation from '../types/Installation';\nimport Debits from '../types/Debits';\n\nimport {\n  extractResponseData,\n  getInstallationData,\n  getServiceNotes,\n} from '../utils/extractResponseData';\n\nimport ServiceNotes from '../types/ServiceNotes';\nimport eqtlBarApi from '../services/eqtlBarApi';\nimport Address from '../types/Address';\n\ninterface CustomerServiceState {\n  operatingCompany: string;\n  customer: Customer;\n  installation: Installation;\n  debits: Debits;\n  serviceNotes: ServiceNotes;\n  protocol?: string;\n  contracts: Contract[];\n}\n\ninterface GetCustomerData {\n  stateCode: string;\n  contractAccount: string;\n}\n\ninterface StartServiceProps {\n  stateCode: string;\n  contractAccount: string;\n}\n\ninterface CustomerServiceContextData {\n  operatingCompany: string;\n  protocol: string | undefined;\n  customer: Customer;\n  installation: Installation;\n  debits: Debits;\n  serviceNotes: ServiceNotes;\n  contracts: Contract[];\n  serviceStarted: boolean;\n  fetchServiceData(customerData: GetCustomerData): Promise<void>;\n  fetchInstallationData({\n    contractAccount,\n    operatingCompany,\n  }: FetchInstallationDataProps): Promise<void>;\n  startService({\n    stateCode,\n    contractAccount,\n  }: StartServiceProps): Promise<void>;\n  finishService(attendanceTime: string): Promise<void>;\n  registerServicePerformed({\n    serviceName,\n    executionDate,\n  }: ServicePerformed): void;\n  findAllContracts({\n    stateCode,\n    cpf,\n  }: FindAllContractsProps): Promise<Contract[]>;\n  generateProtocol({\n    operatingCompany,\n    contractAccount,\n  }: GenerateProtocolProps): Promise<void>;\n}\n\ninterface GenerateProtocolProps {\n  operatingCompany: string;\n  contractAccount: string;\n}\n\ninterface FindAllContractsProps {\n  stateCode: string;\n  cpf: string;\n}\n\ninterface FetchInstallationDataProps {\n  contractAccount: string;\n  operatingCompany: string;\n}\n\ninterface ServicePerformed {\n  serviceName: string;\n  executionDate: Date;\n}\n\ninterface Contract {\n  contractAccount: string;\n  address: Address;\n}\n\nconst CustomerServiceContext = createContext<CustomerServiceContextData>(\n  {} as CustomerServiceContextData,\n);\n\nconst CustomerServiceProvider: React.FC = ({ children }) => {\n  const { user } = useAuth();\n\n  const [serviceStarted, setServiceStarted] = useState(false);\n  const [servicesPerformed, setServicesPerformed] = useState<\n    ServicePerformed[]\n  >([]);\n\n  const [\n    customerServiceData,\n    setCustomerServiceData,\n  ] = useState<CustomerServiceState>(() => {\n    const storagedCustomerServiceData = localStorage.getItem(\n      '@TelaAgil:customerServiceData',\n    );\n\n    const storagedProtocol = localStorage.getItem('@TelaAgil:protocol');\n\n    if (storagedCustomerServiceData) {\n      const {\n        operatingCompany,\n        customer,\n        installation,\n        debits,\n        serviceNotes,\n      } = JSON.parse(storagedCustomerServiceData);\n\n      const customerServiceState: CustomerServiceState = {\n        operatingCompany,\n        customer,\n        installation,\n        debits,\n        serviceNotes,\n        contracts: [],\n      };\n\n      if (storagedProtocol) {\n        customerServiceState.protocol = storagedProtocol;\n      }\n\n      return customerServiceState;\n    }\n\n    return {} as CustomerServiceState;\n  });\n\n  const findAllContracts = useCallback(\n    async ({ stateCode, cpf }: FindAllContractsProps) => {\n      const response = await eqtlBarApi.get('/atendimento/v1/clientes', {\n        params: {\n          cpf,\n          flagDadosCliente: true,\n          empresaOperadora: stateCode,\n          codigoTransacao: uuid(),\n        },\n      });\n\n      const contracts: Contract[] = response.data.data.cliente.map(\n        (contract: any) => ({\n          contractAccount:\n            typeof contract.contaContrato === 'string'\n              ? contract.contaContrato.replace(/^0+/, '')\n              : contract.contaContrato.toString().replace(/^0+/, ''),\n          address: {\n            publicArea: contract.endereco.logradouro,\n            number: contract.endereco.numero,\n            neighborhood: contract.endereco.bairro,\n            city: contract.endereco.cidade,\n            uf: contract.endereco.uf,\n            postalCode: contract.endereco.cep,\n            referencePoint: contract.endereco.pontoReferencia,\n          },\n        }),\n      );\n\n      if (!contracts.length) {\n        throw new Error();\n      } else {\n        setCustomerServiceData({\n          ...customerServiceData,\n          operatingCompany: stateCode,\n          contracts,\n        });\n\n        return contracts;\n      }\n    },\n    [customerServiceData],\n  );\n\n  const fetchServiceData = useCallback(\n    async ({ stateCode, contractAccount }: GetCustomerData) => {\n      const response = await eqtlBarApi.get('/atendimento/v1/clientes', {\n        params: {\n          codigoTransacao: uuid(),\n          contrato: contractAccount,\n          empresaOperadora: stateCode,\n          flagDadosCliente: true,\n          flagStatusInstalacao: true,\n          flagPossuiDebitos: true,\n          flagDadosTecnicos: true,\n          flagNotasAbertas: true,\n          flagNotasEncerradas: true,\n          flagDetalheDebitoCobranca: true,\n          flagDetalheDebitoFatura: true,\n        },\n      });\n\n      const {\n        customer,\n        installation,\n        debits,\n        serviceNotes,\n      } = extractResponseData(response, stateCode);\n\n      localStorage.setItem(\n        '@TelaAgil:customerServiceData',\n        JSON.stringify({\n          operatingCompany: stateCode,\n          customer,\n          installation,\n          debits,\n          serviceNotes,\n          contracts: [],\n        }),\n      );\n\n      setCustomerServiceData({\n        operatingCompany: stateCode,\n        customer,\n        installation,\n        debits,\n        serviceNotes,\n        contracts: [],\n      });\n    },\n    [],\n  );\n\n  const generateProtocol = useCallback(\n    async ({ operatingCompany, contractAccount }: GenerateProtocolProps) => {\n      const response = await eqtlBarApi.get('/atendimento/v1/clientes', {\n        params: {\n          empresaOperadora: operatingCompany,\n          contrato: contractAccount,\n          flagGerarProtocolo: true,\n          codigoTransacao: uuid(),\n        },\n      });\n\n      localStorage.setItem('@TelaAgil:protocol', response.data.data.protocolo);\n\n      setCustomerServiceData(state => ({\n        ...state,\n        protocol: response.data.data.protocolo,\n      }));\n    },\n    [],\n  );\n\n  const fetchInstallationData = useCallback(\n    async ({\n      contractAccount,\n      operatingCompany,\n    }: FetchInstallationDataProps) => {\n      const response = await eqtlBarApi.get('/atendimento/v1/clientes', {\n        params: {\n          codigoTransacao: uuid(),\n          contrato: contractAccount,\n          empresaOperadora: operatingCompany,\n          flagStatusInstalacao: true,\n          flagDadosTecnicos: true,\n          flagNotasAbertas: true,\n          flagNotasEncerradas: true,\n        },\n      });\n\n      const responseInstallationData = response.data.data.instalacao;\n\n      const installationData = getInstallationData(\n        responseInstallationData,\n        operatingCompany,\n      );\n\n      const serviceNotesData = getServiceNotes(response);\n\n      setCustomerServiceData({\n        ...customerServiceData,\n        installation: installationData,\n        serviceNotes: serviceNotesData,\n      });\n\n      localStorage.setItem(\n        '@TelaAgil:customerServiceData',\n        JSON.stringify({\n          ...customerServiceData,\n          installation: installationData,\n          serviceNotes: serviceNotesData,\n        }),\n      );\n    },\n    [customerServiceData],\n  );\n\n  const startService = useCallback(\n    async ({ stateCode, contractAccount }: StartServiceProps) => {\n      const formattedContractAccount = contractAccount.replace(/^0+/, '');\n\n      try {\n        await fetchServiceData({\n          stateCode,\n          contractAccount: formattedContractAccount,\n        });\n\n        setServiceStarted(true);\n      } catch {\n        Swal.fire({\n          icon: 'error',\n          title: 'Erro no atendimento',\n          html:\n            '<p>Ocorreu um erro ao iniciar o atendimento, cheque as informações do cliente</p>',\n          confirmButtonText: `OK`,\n          confirmButtonColor: '#3c1490',\n        });\n      }\n    },\n    [fetchServiceData],\n  );\n\n  const saveAttendanceLog = useCallback(\n    async (attendanceTime: string) => {\n      await eqtlBarApi.post('/logs', {\n        user_id: user.id,\n        username: user.name,\n        contractAccount: customerServiceData.customer.contractAccount,\n        attendanceTime,\n        services: servicesPerformed,\n      });\n    },\n    [user, customerServiceData.customer, servicesPerformed],\n  );\n\n  const finishService = useCallback(\n    async (attendanceTime: string) => {\n      await saveAttendanceLog(attendanceTime);\n\n      localStorage.removeItem('@TelaAgil:protocol');\n      localStorage.removeItem('@TelaAgil:contracts');\n      localStorage.removeItem('@TelaAgil:customerServiceData');\n\n      setCustomerServiceData({} as CustomerServiceContextData);\n\n      setServicesPerformed([]);\n\n      setServiceStarted(false);\n    },\n    [saveAttendanceLog],\n  );\n\n  const registerServicePerformed = useCallback(\n    ({ serviceName, executionDate }: ServicePerformed) => {\n      setServicesPerformed(oldServices => [\n        ...oldServices,\n        { serviceName, executionDate },\n      ]);\n    },\n    [],\n  );\n\n  return (\n    <CustomerServiceContext.Provider\n      value={{\n        operatingCompany: customerServiceData.operatingCompany,\n        protocol: customerServiceData.protocol,\n        customer: customerServiceData.customer,\n        installation: customerServiceData.installation,\n        debits: customerServiceData.debits,\n        serviceNotes: customerServiceData.serviceNotes,\n        contracts: customerServiceData.contracts,\n        serviceStarted,\n        fetchServiceData,\n        fetchInstallationData,\n        startService,\n        finishService,\n        registerServicePerformed,\n        findAllContracts,\n        generateProtocol,\n      }}\n    >\n      {children}\n    </CustomerServiceContext.Provider>\n  );\n};\n\nfunction useCustomerService(): CustomerServiceContextData {\n  const context = useContext(CustomerServiceContext);\n\n  if (!context) {\n    throw new Error(\n      'useCustomerService must be used within a CustomerServiceProvider',\n    );\n  }\n\n  return context;\n}\n\nexport { CustomerServiceProvider, useCustomerService };\n","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/alert.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/services/eqtlBarApi.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/extractResponseData.ts",["389","390","391","392","393","394","395"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/getValidationErrors.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/ToastContainer/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Button/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/ToastContainer/Toast/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/CustomRadioGroup/RadioOptions/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/FindContractModal/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/QuickMenu/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ClientData/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DebitsConsultationModal/index.tsx",["396"],"import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from 'react';\r\nimport { Form } from '@unform/web';\r\nimport { FormHandles } from '@unform/core';\r\nimport { format } from 'date-fns';\r\nimport { useLoading } from 'react-use-loading';\r\nimport * as Yup from 'yup';\r\nimport Swal from 'sweetalert2';\r\n\r\nimport getValidationErrors from '../../../utils/getValidationErrors';\r\nimport getUnformattedPhone from '../../../utils/getUnformattedPhone';\r\n\r\nimport { useCustomerService } from '../../../hooks/customerService';\r\nimport { useDebitsConsultation } from '../../../hooks/debitsConsultation';\r\nimport { useWhatsappSending } from '../../../hooks/whatsappSending';\r\n\r\nimport Loading from '../../Loading';\r\nimport Modal from '../../Modal';\r\nimport InputMask from '../../InputMask';\r\n\r\nimport { currencyMask } from '../../../utils/inputMasks';\r\n\r\nimport { InstallmentDebit, InvoiceDebit } from '../../../types/Debits';\r\nimport { ModalContent, SendButton, DebitContainer } from './styles';\r\n\r\ninterface ModalProps {\r\n  isOpen: boolean;\r\n  setIsOpen: () => void;\r\n}\r\n\r\ninterface SendDebitFormData {\r\n  phone: string;\r\n}\r\n\r\nconst DebitsConsultationModal: React.FC<ModalProps> = ({\r\n  isOpen,\r\n  setIsOpen,\r\n}) => {\r\n  const [selectedDebit, setSelectedDebit] = useState<\r\n    InstallmentDebit | InvoiceDebit | undefined\r\n  >(undefined);\r\n\r\n  const {\r\n    debits,\r\n    customer,\r\n    operatingCompany,\r\n    registerServicePerformed,\r\n  } = useCustomerService();\r\n  const { getInvoiceUrl } = useDebitsConsultation();\r\n  const { sendInvoiceDebit, sendInstallmentPayment } = useWhatsappSending();\r\n  const [{ isLoading, message }, { start, stop }] = useLoading();\r\n\r\n  const formRef = useRef<FormHandles>(null);\r\n\r\n  const selectedDebitReference = useMemo(() => {\r\n    if (selectedDebit) {\r\n      if (Object.keys(selectedDebit).includes('overdueInvoiceNumber')) {\r\n        const invoiceDebit: InvoiceDebit = selectedDebit as InvoiceDebit;\r\n\r\n        let monthReference;\r\n        let yearReference;\r\n\r\n        if (operatingCompany === '98' || operatingCompany === '95') {\r\n          yearReference = Number(\r\n            invoiceDebit.overdueInvoiceNumber.substr(1, 4),\r\n          );\r\n\r\n          monthReference = Number(\r\n            invoiceDebit.overdueInvoiceNumber.substr(5, 2),\r\n          );\r\n        } else {\r\n          yearReference = Number(\r\n            invoiceDebit.overdueInvoiceNumber.substr(8, 4),\r\n          );\r\n\r\n          monthReference = Number(\r\n            invoiceDebit.overdueInvoiceNumber.substr(12, 2),\r\n          );\r\n        }\r\n\r\n        const referenceDate = new Date(yearReference, monthReference - 1);\r\n\r\n        return format(referenceDate, 'MM/yyyy');\r\n      }\r\n\r\n      return 'Parcelamento';\r\n    }\r\n\r\n    return null;\r\n  }, [selectedDebit, operatingCompany]);\r\n\r\n  const handleSubmit = useCallback(\r\n    async (data: SendDebitFormData) => {\r\n      try {\r\n        start('Enviando fatura ...');\r\n\r\n        formRef.current?.setErrors({});\r\n\r\n        const schema = Yup.object().shape({\r\n          phone: Yup.string().required('Telefone obrigatório'),\r\n        });\r\n\r\n        await schema.validate(data, {\r\n          abortEarly: false,\r\n        });\r\n\r\n        if (selectedDebit) {\r\n          if (Object.keys(selectedDebit).includes('overdueInvoiceNumber')) {\r\n            const invoiceUrl = await getInvoiceUrl({\r\n              invoiceReference: selectedDebit.invoiceReference,\r\n              operatingCompany,\r\n            });\r\n\r\n            if (invoiceUrl && selectedDebitReference) {\r\n              await sendInvoiceDebit({\r\n                invoiceUrl,\r\n                operatingCompany,\r\n                reference: selectedDebitReference,\r\n                phoneNumber: getUnformattedPhone(data.phone),\r\n              });\r\n\r\n              Swal.fire({\r\n                icon: 'success',\r\n                title: 'Fatura enviada',\r\n                html: '<p>Fatura foi enviada com sucesso.</p>',\r\n                confirmButtonText: `OK`,\r\n                confirmButtonColor: '#3c1490',\r\n              });\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          if (Object.keys(selectedDebit).includes('billingDocumentNumber')) {\r\n            await sendInstallmentPayment({\r\n              operatingCompany,\r\n              phoneNumber: getUnformattedPhone(data.phone),\r\n              name: customer.name,\r\n              amount: selectedDebit.invoiceAmount,\r\n              barCode: selectedDebit.paymentCode,\r\n              contract: customer.contractAccount,\r\n            });\r\n\r\n            Swal.fire({\r\n              icon: 'success',\r\n              title: 'Código enviado',\r\n              html: '<p>O código para pagamento foi enviado com sucesso.</p>',\r\n              confirmButtonText: `OK`,\r\n              confirmButtonColor: '#3c1490',\r\n            });\r\n          }\r\n        }\r\n      } catch (err) {\r\n        if (err instanceof Yup.ValidationError) {\r\n          const errors = getValidationErrors(err);\r\n\r\n          formRef.current?.setErrors(errors);\r\n          return;\r\n        }\r\n\r\n        Swal.fire({\r\n          icon: 'error',\r\n          title: 'Erro no envio',\r\n          html:\r\n            '<p>Ocorreu um erro ao enviar a fatura, cheque o número de telefone</p>',\r\n          confirmButtonText: `OK`,\r\n          confirmButtonColor: '#3c1490',\r\n        });\r\n      } finally {\r\n        setSelectedDebit(undefined);\r\n        setIsOpen();\r\n        stop();\r\n      }\r\n    },\r\n    [\r\n      selectedDebit,\r\n      customer,\r\n      getInvoiceUrl,\r\n      operatingCompany,\r\n      start,\r\n      sendInvoiceDebit,\r\n      selectedDebitReference,\r\n      sendInstallmentPayment,\r\n      stop,\r\n      setIsOpen,\r\n    ],\r\n  );\r\n\r\n  const handleClickDebit = useCallback(debit => {\r\n    setSelectedDebit(debit);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      registerServicePerformed({\r\n        serviceName: 'Consulta de débitos',\r\n        executionDate: new Date(),\r\n      });\r\n    }\r\n  }, [registerServicePerformed, isOpen]);\r\n\r\n  const generateInstallmentRows = useMemo(() => {\r\n    const installmentRows = debits.installmentDebits.installmentDebitDetails.map(\r\n      debit => (\r\n        <tr\r\n          key={debit.billingDocumentNumber}\r\n          tabIndex={0}\r\n          onClick={() => handleClickDebit(debit)}\r\n        >\r\n          <td>\r\n            <span>Parcelamento</span>\r\n          </td>\r\n          <td>\r\n            <h2>{currencyMask(debit.invoiceAmount)}</h2>\r\n          </td>\r\n          <td />\r\n        </tr>\r\n      ),\r\n    );\r\n\r\n    return installmentRows;\r\n  }, [debits, handleClickDebit]);\r\n\r\n  const generateInvoiceRows = useMemo(() => {\r\n    const invoiceRows = debits.invoiceDebits.invoiceDebitDetails.map(debit => {\r\n      let monthReference;\r\n      let yearReference;\r\n\r\n      if (operatingCompany === '98' || operatingCompany === '95') {\r\n        yearReference = Number(debit.overdueInvoiceNumber.substr(1, 4));\r\n        monthReference = Number(debit.overdueInvoiceNumber.substr(5, 2));\r\n\r\n        if (yearReference < 2016) {\r\n          yearReference = debit.dueDate.getFullYear();\r\n          monthReference = debit.dueDate.getMonth() + 1;\r\n        }\r\n      } else {\r\n        yearReference = Number(debit.overdueInvoiceNumber.substr(8, 4));\r\n\r\n        monthReference = Number(debit.overdueInvoiceNumber.substr(12, 2));\r\n      }\r\n\r\n      const referenceDate = new Date(yearReference, monthReference - 1);\r\n\r\n      return (\r\n        <tr\r\n          key={debit.invoiceReference}\r\n          tabIndex={0}\r\n          onClick={() => handleClickDebit(debit)}\r\n        >\r\n          <td>\r\n            <span>Referente a</span>\r\n            <strong>{format(referenceDate, 'MM/yyyy ')}</strong>\r\n          </td>\r\n          <td>\r\n            <h2>{currencyMask(debit.invoiceAmount)}</h2>\r\n          </td>\r\n          <td>\r\n            <span>Vencimento</span>\r\n            <strong>{format(new Date(debit.dueDate), 'dd/MM/yyyy')}</strong>\r\n          </td>\r\n        </tr>\r\n      );\r\n    });\r\n\r\n    return invoiceRows;\r\n  }, [debits, handleClickDebit]);\r\n\r\n  useEffect(() => {\r\n    setSelectedDebit(undefined);\r\n  }, [setIsOpen]);\r\n\r\n  return (\r\n    <Modal isOpen={isOpen} setIsOpen={setIsOpen}>\r\n      <ModalContent>\r\n        <h2>Consulta de débitos</h2>\r\n\r\n        <div>\r\n          <table>\r\n            <tbody>\r\n              {generateInstallmentRows}\r\n              {generateInvoiceRows}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        <Form\r\n          ref={formRef}\r\n          onSubmit={handleSubmit}\r\n          initialData={{\r\n            phone: customer.contacts.phones?.cellPhone,\r\n          }}\r\n        >\r\n          {selectedDebit ? (\r\n            <DebitContainer>\r\n              <p>Débito selecionado</p>\r\n\r\n              <strong>{`Referente a: ${selectedDebitReference}`}</strong>\r\n\r\n              <strong>\r\n                {`Valor: ${currencyMask(selectedDebit.invoiceAmount)}`}\r\n              </strong>\r\n            </DebitContainer>\r\n          ) : (\r\n            <span>Nenhum débito selecionado</span>\r\n          )}\r\n\r\n          <InputMask\r\n            name=\"phone\"\r\n            mask=\"(99) 99999-9999\"\r\n            type=\"text\"\r\n            placeholder=\"Telefone do cliente\"\r\n            autoComplete=\"off\"\r\n          />\r\n\r\n          <SendButton type=\"submit\" disabled={!selectedDebit}>\r\n            Enviar fatura\r\n          </SendButton>\r\n        </Form>\r\n      </ModalContent>\r\n\r\n      {isLoading && (\r\n        <Loading isOpen={isLoading} message={message} setIsOpen={stop} />\r\n      )}\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default DebitsConsultationModal;\r\n","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/DueDateChange/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/StepModal/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/Header/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/Header/TagInfo/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/routes/Route.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Button/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Main/ServicesContent/ContractData/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/hasSocialTariff.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/debitsConsultation.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/powerOutageService.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/inputMasks.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/AlertModal/index.tsx",["397"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/LeftBar/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/FindContractModal/index.tsx",["398","399"],"import React from 'react';\r\n\r\nimport { useCustomerService } from '../../hooks/customerService';\r\n\r\nimport Modal from '../Modal';\r\nimport ContractsTable from './ContractsTable';\r\n\r\nimport { ModalContent, OwnerContainer, OwnerLabel, OwnerName } from './styles';\r\n\r\ninterface ModalProps {\r\n  isOpen: boolean;\r\n  setIsOpen: () => void;\r\n}\r\n\r\ninterface Contract {\r\n  contractAccount: string;\r\n  address: string;\r\n}\r\n\r\nconst FindContractModal: React.FC<ModalProps> = ({ isOpen, setIsOpen }) => {\r\n  const { contracts } = useCustomerService();\r\n\r\n  const data: Contract[] = contracts.map(contract => ({\r\n    contractAccount: contract.contractAccount,\r\n    address: `${contract.address.publicArea}, ${contract.address.number}, ${contract.address.neighborhood}, ${contract.address.city} - ${contract.address.uf}, CEP ${contract.address.postalCode}`,\r\n  }));\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={isOpen}\r\n      setIsOpen={setIsOpen}\r\n      customStyles={{\r\n        borderRadius: '8px',\r\n        padding: '48px 0',\r\n        width: 'fit-content',\r\n        height: 'fit-content',\r\n      }}\r\n    >\r\n      <ModalContent>\r\n        <OwnerContainer>\r\n          {/* <OwnerLabel>Nome do titular:</OwnerLabel> */}\r\n          {/* <OwnerName>{contracts && contracts[0].owner}</OwnerName> */}\r\n        </OwnerContainer>\r\n\r\n        <ContractsTable data={data} closeModal={setIsOpen} />\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default FindContractModal;\r\n","/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/OutlineInputRegex/styles.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/hooks/monitoringOfProtocols.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/PowerOutageFlow/StepModal/index.tsx",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/utils/addZeroesToNumber.ts",[],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/ServiceNotesList/index.tsx",[],["400","401","402","403","404"],"/home/roberto/Área de Trabalho/eqtl-tela-agil/src/components/Services/ServiceNotesList/ServiceNotesTable/styles.ts",[],{"ruleId":"405","replacedBy":"406"},{"ruleId":"407","replacedBy":"408"},{"ruleId":"409","replacedBy":"410"},{"ruleId":"411","replacedBy":"412"},{"ruleId":"413","replacedBy":"414"},{"ruleId":"405","replacedBy":"415"},{"ruleId":"407","replacedBy":"416"},{"ruleId":"409","replacedBy":"417"},{"ruleId":"411","replacedBy":"418"},{"ruleId":"413","replacedBy":"419"},{"ruleId":"420","severity":1,"message":"421","line":18,"column":3,"nodeType":"422","messageId":"423","endLine":18,"endColumn":12},{"ruleId":"405","replacedBy":"424"},{"ruleId":"407","replacedBy":"425"},{"ruleId":"409","replacedBy":"426"},{"ruleId":"411","replacedBy":"427"},{"ruleId":"413","replacedBy":"428"},{"ruleId":"429","severity":1,"message":"430","line":7,"column":13,"nodeType":"431","messageId":"432","endLine":7,"endColumn":16,"suggestions":"433"},{"ruleId":"420","severity":1,"message":"434","line":16,"column":21,"nodeType":"422","messageId":"423","endLine":16,"endColumn":33},{"ruleId":"405","replacedBy":"435"},{"ruleId":"407","replacedBy":"436"},{"ruleId":"409","replacedBy":"437"},{"ruleId":"411","replacedBy":"438"},{"ruleId":"413","replacedBy":"439"},{"ruleId":"405","replacedBy":"440"},{"ruleId":"407","replacedBy":"441"},{"ruleId":"409","replacedBy":"442"},{"ruleId":"411","replacedBy":"443"},{"ruleId":"413","replacedBy":"444"},{"ruleId":"429","severity":1,"message":"430","line":36,"column":21,"nodeType":"431","messageId":"432","endLine":36,"endColumn":24,"suggestions":"445"},{"ruleId":"429","severity":1,"message":"430","line":39,"column":23,"nodeType":"431","messageId":"432","endLine":39,"endColumn":26,"suggestions":"446"},{"ruleId":"420","severity":1,"message":"447","line":6,"column":3,"nodeType":"422","messageId":"423","endLine":6,"endColumn":15},{"ruleId":"420","severity":1,"message":"448","line":47,"column":10,"nodeType":"422","messageId":"423","endLine":47,"endColumn":35},{"ruleId":"420","severity":1,"message":"449","line":47,"column":37,"nodeType":"422","messageId":"423","endLine":47,"endColumn":65},{"ruleId":"450","severity":1,"message":"451","line":220,"column":5,"nodeType":"452","messageId":"453","endLine":220,"endColumn":16},{"ruleId":"420","severity":1,"message":"454","line":32,"column":8,"nodeType":"422","messageId":"423","endLine":32,"endColumn":20},{"ruleId":"420","severity":1,"message":"455","line":34,"column":8,"nodeType":"422","messageId":"423","endLine":34,"endColumn":24},{"ruleId":"420","severity":1,"message":"456","line":43,"column":20,"nodeType":"422","messageId":"423","endLine":43,"endColumn":25},{"ruleId":"420","severity":1,"message":"457","line":43,"column":27,"nodeType":"422","messageId":"423","endLine":43,"endColumn":32},{"ruleId":"429","severity":1,"message":"430","line":161,"column":20,"nodeType":"431","messageId":"432","endLine":161,"endColumn":23,"suggestions":"458"},{"ruleId":"459","severity":1,"message":"460","line":87,"column":3,"nodeType":"422","messageId":"461","endLine":87,"endColumn":28},{"ruleId":"429","severity":1,"message":"430","line":87,"column":25,"nodeType":"431","messageId":"432","endLine":87,"endColumn":28,"suggestions":"462"},{"ruleId":"429","severity":1,"message":"430","line":152,"column":36,"nodeType":"431","messageId":"432","endLine":152,"endColumn":39,"suggestions":"463"},{"ruleId":"429","severity":1,"message":"430","line":156,"column":13,"nodeType":"431","messageId":"432","endLine":156,"endColumn":16,"suggestions":"464"},{"ruleId":"429","severity":1,"message":"430","line":168,"column":13,"nodeType":"431","messageId":"432","endLine":168,"endColumn":16,"suggestions":"465"},{"ruleId":"429","severity":1,"message":"430","line":204,"column":12,"nodeType":"431","messageId":"432","endLine":204,"endColumn":15,"suggestions":"466"},{"ruleId":"429","severity":1,"message":"430","line":223,"column":12,"nodeType":"431","messageId":"432","endLine":223,"endColumn":15,"suggestions":"467"},{"ruleId":"468","severity":1,"message":"469","line":272,"column":6,"nodeType":"470","endLine":272,"endColumn":32,"suggestions":"471"},{"ruleId":"420","severity":1,"message":"472","line":1,"column":41,"nodeType":"422","messageId":"423","endLine":1,"endColumn":47},{"ruleId":"420","severity":1,"message":"473","line":8,"column":40,"nodeType":"422","messageId":"423","endLine":8,"endColumn":50},{"ruleId":"420","severity":1,"message":"474","line":8,"column":52,"nodeType":"422","messageId":"423","endLine":8,"endColumn":61},{"ruleId":"405","replacedBy":"475"},{"ruleId":"407","replacedBy":"476"},{"ruleId":"409","replacedBy":"477"},{"ruleId":"411","replacedBy":"478"},{"ruleId":"413","replacedBy":"479"},"lines-around-directive",["480"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],["480"],[],[],[],[],"@typescript-eslint/no-unused-vars","'setIsOpen' is defined but never used.","Identifier","unusedVar",["480"],[],[],[],[],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["481","482"],"'setQuestions' is assigned a value but never used.",["480"],[],[],[],[],["480"],[],[],[],[],["483","484"],["485","486"],"'FaDollarSign' is defined but never used.","'monitoringOfProtocolsOpen' is assigned a value but never used.","'setMonitoringOfProtocolsOpen' is assigned a value but never used.","no-console","Unexpected console statement.","MemberExpression","unexpected","'OutlineInput' is defined but never used.","'OutlineInputMask' is defined but never used.","'index' is defined but never used.","'event' is defined but never used.",["487","488"],"@typescript-eslint/explicit-module-boundary-types","Argument 'responseInstallation' should be typed with a non-any type.","anyTypedArg",["489","490"],["491","492"],["493","494"],["495","496"],["497","498"],["499","500"],"react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'operatingCompany'. Either include it or remove the dependency array.","ArrayExpression",["501"],"'useRef' is defined but never used.","'OwnerLabel' is defined but never used.","'OwnerName' is defined but never used.",["480"],[],[],[],[],"padding-line-between-statements",{"messageId":"502","fix":"503","desc":"504"},{"messageId":"505","fix":"506","desc":"507"},{"messageId":"502","fix":"508","desc":"504"},{"messageId":"505","fix":"509","desc":"507"},{"messageId":"502","fix":"510","desc":"504"},{"messageId":"505","fix":"511","desc":"507"},{"messageId":"502","fix":"512","desc":"504"},{"messageId":"505","fix":"513","desc":"507"},{"messageId":"502","fix":"514","desc":"504"},{"messageId":"505","fix":"515","desc":"507"},{"messageId":"502","fix":"516","desc":"504"},{"messageId":"505","fix":"517","desc":"507"},{"messageId":"502","fix":"518","desc":"504"},{"messageId":"505","fix":"519","desc":"507"},{"messageId":"502","fix":"520","desc":"504"},{"messageId":"505","fix":"521","desc":"507"},{"messageId":"502","fix":"522","desc":"504"},{"messageId":"505","fix":"523","desc":"507"},{"messageId":"502","fix":"524","desc":"504"},{"messageId":"505","fix":"525","desc":"507"},{"desc":"526","fix":"527"},"suggestUnknown",{"range":"528","text":"529"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"528","text":"530"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"531","text":"529"},{"range":"531","text":"530"},{"range":"532","text":"529"},{"range":"532","text":"530"},{"range":"533","text":"529"},{"range":"533","text":"530"},{"range":"534","text":"529"},{"range":"534","text":"530"},{"range":"535","text":"529"},{"range":"535","text":"530"},{"range":"536","text":"529"},{"range":"536","text":"530"},{"range":"537","text":"529"},{"range":"537","text":"530"},{"range":"538","text":"529"},{"range":"538","text":"530"},{"range":"539","text":"529"},{"range":"539","text":"530"},"Update the dependencies array to be: [debits.invoiceDebits.invoiceDebitDetails, handleClickDebit, operatingCompany]",{"range":"540","text":"541"},[153,156],"unknown","never",[998,1001],[1088,1091],[3904,3907],[2846,2849],[4530,4533],[4726,4729],[5147,5150],[6217,6220],[6861,6864],[7971,7997],"[debits.invoiceDebits.invoiceDebitDetails, handleClickDebit, operatingCompany]"]